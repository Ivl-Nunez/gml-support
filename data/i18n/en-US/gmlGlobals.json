{
    "abs": {
        "desc": "This function returns the absolute value of the input argument, so if it's a positive value then it will remain the same, but if it's negative it will be multiplied by -1 to make it positive. \n\n**Returns:** Real",
        "val": "The number to turn absolute."
    },
    "achievement_available": {
        "desc": "This function will return true if the user is currently connected to the internet and the chosen leaderboard and achievement system is available, otherwise it will return false. \n\n**Returns:** Boolean "
    },
    "achievement_event": {
        "desc": "",
        "stringid": ""
    },
    "achievement_get_challenges": {
        "desc": "This function will send a request to the server for information on all current challenges and will trigger a callback  Social Asynchronous Event which contains the **async_load** map populated with the relevant key/value pairs. The **id** key of this **ds_map** is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and will be paired with the constant **achievement_challenge_list_received** as well as a number of other key/value pairs for each challenge. The exact contents of the map are shown below: \n\n - \"id\": For this function it should be **achievement_challenge_list_received**\n\n - \"numchallenges\": The number of challenges (local and remote) currently available.\n\n - \"ChallengeNplayerid\": The player id for the challenge, where \"N\" is an integer, EG: \"Challenge5playerid\" is the player id for the fifth challenge in the list.\n\n - \"ChallengeNissuerid\": The id of the person that issued the challenge, where \"N\" is an integer, EG: \"Challenge2issuerid\" is the issuer id for the second challenge in the list.\n\n - \"ChallengeNstate\": The state of the challenge \"N\", which will have a value of 0: 3 (as a string) for invalid, pending, completed or declined.\n\n - \"ChallengeNmessage\": The text message for challenge \"N\".\n\n - \"ChallengeNissueddate\": The issue date for challenge \"N\".\n\n - \"ChallengeNcompleteddate\": The completion date for challenge \"N\".\n\n - \"ChallengeNtype\": The type of challenge given. Can be one of two constants:\n\n    •achievement_type_score_challenge: A challenge based on the score value.\n\n    •achievement_type_achievement_challenge: A challenge based on an achievement.\n\n - \"ChallengeNidentifier\": The identifying string for the challenge.\n\n - \"ChallengeNscore\": The score tied in with the challenge. \n\n**Returns:**  N/A \n\nNOTE: This function is for iOS only. "
    },
    "achievement_get_info": {
        "desc": "",
        "userid": ""
    },
    "achievement_get_pic": {
        "desc": "This function will send a request to the server for the image of a player or a friend and will trigger a callback Social Asynchronous Event which contains the **async_load** map populated with the relevant key/value pairs. The **id** key of this **ds_map** is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and will be paired with the constant **achievement_pic_loaded** as well as a number of other key/value pairs. The exact contents of the map are shown below: \n\n - \"id\": For this function it should be **achievement_pic_loaded**\n\n - \"playerid\": The id of the player or friend that we are receiving the image of.\n\n - \"spriteid\": The sprite id for the image that can then be used to draw it on-screen using any of the draw sprite functions.\n\n**Returns:** N/A \n\nNOTE: This function is for iOS only. \n\nWARNING: This function creates sprites and as such, their ids should be stored in variables and then removed from memory using the sprite_delete function otherwise repeated use will give you a memory leak that will eventually slow down or crash your game. ",
        "char": "The id of the person to get the image of (either from a friends list or a leaderboard)"
    },
    "achievement_increment": {
        "desc": "Google Play permit Android games to have achievements with no completion value and you can use this function to increment those achievement by a given amount. \n\n**Returns:** N/A ",
        "achievement_name": "The name of the achievement. ",
        "value": "The value to be sent."
    },
    "achievement_load_friends": {
        "desc": "This function will send a request to the server for information on all the logged in users friends and will trigger a callback Social Asynchronous Event which contains the **async_load** map populated with the relevant key/value pairs. The **id** key of this **ds_map** is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and will be paired with the constant **achievement_friends_info** as well as a number of other key/value pairs for each friend. The exact contents of the map are shown below: \n\n - \"id\": For this function it should be **achievement_friends_info**\n\n - \"FriendN\": The name of the friend, where \"N\" is an integer value corresponding to their position within the friends list.\n\n - \"FriendidN\": The unique user id of the friend, \"N\". \n\n**Returns:**  N/A \n\nNOTE: This function is for iOS only. "
    },
    "achievement_load_leaderboard": {
        "desc": "This function will send a request to the server for information on the given leaderboard. The leaderboard must have been created previously on the developer dashboard for your game and the ID given is that which you must supply as the first argument of the function. It will trigger a callback  Social Asynchronous Event which contains the **async_load** map populated with the relevant key/value pairs. The **id** key of this **ds_map** is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and will be paired with the constant **achievement_leaderboard_info** as well as a number of other key/value pairs for each player. The exact contents of the map are shown below: \n\n - \"id\": For this function it should be **achievement_leaderboard_info**\n\n - \"leaderboardid\": The unique ID for the leaderboard as defined on the provider dashboard.\n\n - \"numentries\": The number of entries in the leaderboard that you have received.\n\n - \"PlayerN\": The name of the player, where \"N\" is an integer value corresponding to their position within the leaderboard entries list.\n\n - \"PlayeridN\": The unique user id of the player, \"N\". \n\n - \"RankN\": The rank of the player \"N\" within the leaderboard.\n\n - \"ScoreN\": The score of the player \"N\". \n\nYou can specify the exact portion of the leaderboard to show by giving a minimum and maximum index value, as well as request that the results be filtered to retrieve only those scores by your friends or those posted by all players using the following filter constants: \n\n    •achievement_filter_friends_only: Get only the scores of the players friends.\n\n    •achievement_filter_all_players: Get all scores for all players.\n\n**Returns:**  N/A \n\nNOTE: this function does not work on the Android platform. ",
        "ident": "The unique ID of the leaderboard as shown on the developer dashboard.",
        "minindex": "The starting index value to get the leaderboard data from.",
        "maxindex": "The maximum index value to get the leaderboard data from.",
        "filter": "Whether to filter the results to those that are on your friends list or to all players (see the Description below)"
    },
    "achievement_load_progress": {
        "desc": "This function will send a request to the server for information on all available achievements. It will trigger a callback Social Asynchronous Event which contains the **async_load** map populated with the relevant key/value pairs. The **id** key of this **ds_map** is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and will be paired with the constant **achievement_achievement_info** as well as a number of other key/value pairs for each player. The exact contents of the map are shown below: \n\n - \"id\": For this function it should be **achievement_achievement_info.**\n\n - \"numentries\": The number of achievements in the list.\n\n - \"AchN\": The name of the achievement, where \"N\" is an integer value corresponding to its place in the entries list. \n\n - \"AchCompN\": How complete the achievement \"N\" is as a percentage value from 0 to 100 (a string). \n\n**Returns:**  N/A \n\nNOTE: This function is for iOS only. "
    },
    "achievement_login": {
        "desc": "This function logs the user into appropriate leaderboard and achievement service. If the service is **not** available, the user is logged into a \"pretend\" game centre and all achievements and scores are stored on the device so that when the actual service is available, these details can be uploaded. The function will trigger a callback  Social Asynchronous Event which contains the **async_load** map populated with the relevant key/value pairs. The **id** key of this **ds_map** is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and will be paired with the constant **achievement_our_info** as well as a number of other key/value pairs for each challenge. The exact contents of the map are shown below: \n\n - \"id\": For this function it should be **achievement_our_info**\n\n - \"name\": The name of the user that is currently logged in.\n\n - \"playerid\": The unique player id for the user that is currently logged in.\n\n**Returns:** N/A "
    },
    "achievement_login_status": {
        "desc": "This function is currently only useful for Google Play on the Android platform. It will check to see if the user is already logged into Google services, in which case it will return *true*, or not, returning *false*. If it returns true there is no need to call the **achievement_login** function. \n\n**Returns:** Boolean "
    },
    "achievement_logout": {
        "desc": "This function logs the user out of the chosen leaderboard and achievement service. This will stop all further achievements and scores from being recorded. \n\n**Returns:** N/A "
    },
    "achievement_post": {
        "desc": "You can use this function to send your achievements to the chosen leaderboard and achievement service. You send the name of the achievement (this is the name you assigned to it when you set up the account for your app) and the percentage that you have completed towards getting the achievement (0: None, 100: Completed). \n\n**Returns:** N/A ",
        "achievement_name": "The name of the achievement.",
        "percent": "The percentage of the achievement completed."
    },
    "achievement_post_score": {
        "desc": "You can use this function to send your score to the chosen leaderboard and achievement service. You send the name of the score table (the \"leaderboard\" name that you assigned to your game when you set up the account) and the actual score value). \n\n**Returns:** N/A ",
        "score_name": "The name of the score table (or \"Leaderboard\").",
        "score": "The score to be sent."
    },
    "achievement_reset": {
        "desc": "This function will reset all achievements back to their initial values for the game. This function is provided as a debug function and it is **not** recommended that you permit the end-user to do this in your games. "
    },
    "achievement_send_challenge": {
        "desc": "This function will send a challenge across the network to the chosen player. You can get the **playerid** using the **achievement_load_friends** or the **achievement_load_leaderboard** functions and you must also supply the challengeid which is the unique value given the challenge when you created it on your iTunes Connect or Google Play dashboard. You must also supply a score, and a short text message as well as set the challenge **type**. This can be one of the following constants:\n\n    •achievement_type_score_challenge: A challenge based on the score value.\n\n    •achievement_type_achievement_challenge: A challenge based on an achievement.\n\nThis function will trigger a callback Social Asynchronous Event for the player that is to receive the challenge, and in this event you will have a ds_map referenced in the variable **async_load**. The **id** key of this **ds_map** is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and will be paired with the constant **achievement_challenge_received** as well as a number of other key/value pairs for each player. The exact contents of the map are shown below: \n\nNOTE: that the user can also receive toast notifications for challenges received, but this will depend on the values you have chosen using the function **achievement_show_challenge_notifications**. \n\n - \"id\": For this function it should be achievement_leaderboard_info\n\n - \"playerid\": The player ID for the challenge.\n\n - \"issuerid\": The issuer ID for the challenge.\n\n - \"state\": The state of the challenge, which will have a value of 0: 3 (as a string) for invalid, pending, completed or declined.\n\n - \"message\": The text message for challenge.\n\n - \"completeddate\": The completion date for challenge.\n\n - \"issueddate\": The issue date for challenge. \n\n - \"type\": The type of challenge given. Can be one of two constants:\n\n    •achievement_type_score_challenge: A challenge based on the score value.\n\n    •achievement_type_achievement_challenge: A challenge based on an achievement.\n\n - \"identifier\": The identifying string for the challenge, as set on the provider dashboard.\n\n - \"score\": The score tied in with the challenge (if applicable). \n\n**Returns:**  N/A ",
        "to": "The unique ID of the player to challenge. ",
        "challengeid": "The unique challenge ID (as found on the provider dashboard).",
        "score": "The score to beat. ",
        "type": "The type of challenge to be issued: one of two constants given below.",
        "msg": "The message to attach to the challenge."
    },
    "achievement_show": {
        "desc": "",
        "type": "",
        "val": ""
    },
    "achievement_show_achievements": {
        "desc": "This function will open the achievements page for the chosen platform. Please note that this is an **asynchronous function**, ie: your game will continue to run in the background while the achievements page is being shown. As such, you should be careful where you use this and make sure to pause the game or only permit it to be shown in areas of your game where it will not interfere with the game-play. \n\n**Returns:** N/A "
    },
    "achievement_show_challenge_notifications": {
        "desc": "With this function you can show, or suppress, the various different \"toast\" pop-up notifications relating to challenges. When the arguments are set to *true* these messages will appear, informing the player of any local or remote challenges received as well as those challenges that have been completed, while setting them to *false* will suppress these notifications. \n\n**Returns:** N/A ",
        "receive_challenge": "Show challenges received pop-up (true) or not (false).",
        "local_complete": "Show completed local challenges pop-up (true) or not (false).",
        "remote_complete": "Show completed remote challenges pop-up (true) or not (false)."
    },
    "achievement_show_leaderboards": {
        "desc": "This function will open the leaderboards page for the chosen platform. Please note that this is an **asynchronous function**, ie: your game will continue to run in the background while the leaderboards page is being shown. As such, you should be careful where you use this and make sure to pause the game or only permit it to be shown in areas of your game where it will not interfere with the game-play. \n\n**Returns:** N/A "
    },
    "alarm_get": {
        "desc": "This function can be used to get the current value of the given alarm. You supply the alarm number from 0 to 11 and this function will return the value that the alarm is currently on. This is an alternative method to getting the alarm array value directly. \n\n**Returns:** Real ",
        "index": "The alarm index to get, from 0 to 11."
    },
    "alarm_set": {
        "desc": "This function can be used to set an alarm. You supply the alarm number from 0 to 11, and then the value to set the alarm to. The value must be an integer value, and you can set it to -1 to stop the alarm. This is an alternative method to setting the alarm array directly. \n\n**Returns:** N/A ",
        "index": "The alarm index to set, from 0 to 11.",
        "count": "The value (an integer) to set the alarm to."
    },
    "angle_difference": {
        "desc": "This function will return the smallest angle difference between two angles as a value between -180 and 180 degrees (where a positive angle is anti-clockwise and a negative angle clockwise). \n\n**Returns:** Real ",
        "ang1": "The first angle to use.",
        "ang2": "The second angle to use."
    },
    "ansi_char": {
        "desc": "This function returns a string containing the character with raw BYTE value set. This will not, and should not, be displayed, but it will save correctly to disk for use in encoding. \n\n**Returns:** String (Single character) ",
        "val": "The raw byte value."
    },
    "application_get_position": {
        "desc": "When you have \"maintain aspect ratio\" ticked in the Global Game Settings for a target platform, GameMaker: Studio will automatically set the draw position for the application surface so that it is displayed correctly centered and scaled on the given display. However if you are manipulating this surface and wish to draw it yourself, then this function gives you an easy way to find exactly where within the display or window that the surface was being drawn so that you can then draw it there yourself, or align GUI images or post draw images to it. \n\nThe function will return an array with four keys, where key 0 and 1 are the x and y position of the top lefthand corner of the surface, and keys 2 and 3 are the x and y of the bottom righthand corner of the surface, all relative to the size of the display or window. \n\n**Returns:** Array "
    },
    "application_surface_draw_enable": {
        "desc": "You can use this function to enable or disable the automatic drawing of the application surface. By default this is enabled, but in many cases you will want to take over when and how the surface is drawn (when using shaders for example), in which case you would use this function to set it to false so that you can draw it yourself when and how you require. \n\n**Returns:** N/A ",
        "flag": "The flag will be either *true* (enabled, the default value) or *false* (disabled)."
    },
    "application_surface_enable": {
        "desc": "With this function you can enable or disable the application surface. By default the application surface is enabled and all drawing for the Draw events will be done to that and the surface drawn to the screen. However on some older devices and specific chipsets this may result in poorer performance. In those cases you can switch off drawing to the application surface and all Draw event drawing will then be done directly to the screen buffer.\n\nYou can use this function to enable or disable the application surface at any time in your game, but you should note that it requires at least one frame (step) for the changes to take effect. Switching it off will switch off all aspect ratio correction, as set in the Global Game Settings for the target platform. This means that you should have some method in place that scales the game to the required device, window or screen dimensions. If you switch it back on again, then the Global Game Settings will take effect again the next step. \n\nIt is recommended that you use this function carefully as it will impact on how everything is drawn to the screen. In general you would want to have it as an option in a menu of your game, or call it only once at the start of your game and write your code around whether you have it enabled or disabled. \n\n**Returns:** N/A ",
        "enable": "Set to enable (true) or disable (false) the application surface."
    },
    "application_surface_is_enabled": {
        "desc": "This function will return *true* if the application surface is being used for drawing, or *false* if the screen buffer is being used. \n\n**Returns:** Boolean "
    },
    "arccos": {
        "desc": "Returns the inverse cosine of x, in that if cos(val)=n, arccos(n)=val, and the resulting number will be between pi and 0. \n\nNOTE: This will only accept a number between -1 and 1 (anything else will throw an error). \n\n**Returns:** Real",
        "x": "The angle (in radians) to return the inverse cosine of."
    },
    "arcsin": {
        "desc": "Returns the inverse sine of x, in that if sin(x)=n, arcsin(n)=x, and the resulting number will be between -pi/2 and pi/2. \n\nNOTE: This will only accept a value between -1 and 1 (anything else will throw an error). \n\n**Returns:** Real",
        "x": "The angle (in radians) to return the inverse sine of."
    },
    "arctan": {
        "desc": "Returns the inverse tangent of x. This will accept any number as, unlike tan, arctans asymptotes are on the y axis so it just means you'll never get returned a number greater than pi/2 or less than -pi/2. \n\n**Returns:** Real",
        "x": "The angle (in radians) to return the inverse tangent of."
    },
    "arctan2": {
        "desc": "This function returns the inverse tangent of an angle y/x, where y = Opposite side of triangle and x = Adjacent side of triangle. Unlike arctan(x) the function arctan2(y, x) is valid for all angles and so may be used to convert a vector to an angle without risking division by zero, and it also returns a result in the correct quadrant. \n\n**Returns:** Real\n\nNOTE: The value returned is in radians, not degrees. ",
        "y": "The y coordinate to calculate.",
        "x": "The x coordinate to calculate."
    },
    "array_copy": {
        "desc": "With this function you can copy all or part of one array into another array at any position. You need to supply both the source and the destination arrays (both need to have been created previously), as well as a position within the source array to copy from and a position within the destination array to copy to. Finally you need to specify the length of the array (or the length of the part that you want) to copy. If the data being copied exceeds the length of the destination array, the array will be extended to accept the data.",
        "dest": "The ID of the array to copy to.",
        "dest_index": "The index within the array to copy to.",
        "src": "The ID of the array to copy from.",
        "src_index": "The index with the array to start copying from.",
        "length": "The length (number of array indices) to copy."
    },
    "array_create": {
        "desc": "With this function you can create an array of a given size. You tell the function the length of the array to create, and it will return the \"handle\" for the array which you can then assign to a variable. Arrays created in this way will have each entry initialised to 0 unless you specify an (optional) initialisation value. If you do supply the extra value for initialising the array, then all indices within the new array will be set to that instead of 0, but note that the function will take longer to run. \n\n**Returns:** Array (Handle) ",
        "size": "The size of the array to create.",
        "value": "The value to use to initialise all array indices (optional)."
    },
    "array_equals": {
        "desc": "With this function you can check to see if two arrays are equal (equivalent or the same). You give the two arrays to check, and the function will return *true* if they are equal (either equivalent or the same) or *false* if they are not. Note that this is not the same as checking if two arrays are the same using ==, which will not check to see if the two arrays hold equivalent values, but only to see if the arrays are referencing the same initial array. \n\n**Returns:** Boolean ",
        "var1": "The index of the first array.",
        "var2": " The index of the second array. "
    },
    "array_height_2d": {
        "desc": "With this function you can get the height (number of entries) of a the first dimension of a 2D array. You supply the array to check and the output from the function tells you how many initial entries it contains. You can get the number of entries for the second dimension of the array using the function **array_length_2d**. \n\n**Returns:** Real ",
        "array": "The array to check."
    },
    "array_length_1d": {
        "desc": "With this function you can get the length (number of entries) of a 1D array. For 2D arrays you should be using the **array_height_2d** and **array_length_2d** functions. \n\nWARNING!: If the array has over 32,000 entries this function will return an erroneous value and should not be used. \n\n**Returns:** Real ",
        "array": "The array to check."
    },
    "array_length_2d": {
        "desc": "With this function you can get the length (number of entries) of a the second dimension of an array. You supply the entry number for the first dimension and the function will return the number of second dimension entries that the array has (to find the length of the first dimension use the function **array_height_2d**). The function will return 0 if the variable given is not an array or 1 if the variable is a 1D array (as there is still 1 row). \n\n**Returns:** Real ",
        "array": "The array to check.",
        "n": " The entry of the array to get the length of. "
    },
    "asset_get_index": {
        "desc": "You can use this function to get the unique identifying index for a game asset from its name. If the asset is not found, the function will return a value of -1, otherwise it will return the unique index id for the asset being checked. This id can then be used in other functions as you would any other index value, like the **sprite_index** or **the path_index**, for example. Please note that although this function can be used to reference assets from strings (see example below) you should always make sure that the asset exists before using it otherwise you may get errors that will crash your game. \n\n**Returns:** Real \n\nNOTE: Script names will not resolve as assets on the HTML5 target platform due to obfuscation of the final code, which may cause issues and should be taken into consideration when using the function. \n\n**Returns:** Real ",
        "name": "The name of the game asset to get the index of (a string)."
    },
    "asset_get_type": {
        "desc": "With this function you can get the type of asset being referenced from it s name (a string). \n\n**Returns:** Constant ",
        "name": "The name of the game asset to get the type of (a string)."
    },
    "audio_channel_num": {
        "desc": "With this function you can set how many audio channels are available for playing audio in GameMaker: Studio. What this basically means is that you give the number of simultaneous sounds that can be played at any one time, and if the number exceeds the amount, those sounds with a lower priority are stopped to free up a channel for the sounds with a higher priority. You can use this function to optimise your game for devices as the lower the number of channels for audio the better the performance, but bear in mind that this may also cause noticeable cut off of certain sounds if many are played at once. \n\n**Returns:** N/A ",
        "numchannels": "Number of available audio channels (default is 128)."
    },
    "audio_create_buffer_sound": {
        "desc": "With this function you can create a new sound from the contents of a buffer. The buffer will have been created previously (see the buffer functions for details on how to do this), and have had data added or loaded into it. You then pass it to this function with the data format (only **buffer_u8** or **buffer_s16** are currently supported), the sample rate (which can be between 1000hz and 48000hz), and an offset into the buffer to get the data from. You also need to supply the number of samples in the buffer and the channels that the sound requires. \n\nNote that after you have created a sound, you should free the pointer index associated with it when it is no longer required using the function **audio_free_buffer_sound()**. If you fail to do this and then re-assign the variable or change rooms etc... the sound ID will be lost and you will have a memory leak. Also note that you cannot delete the buffer if any sound has been created from it and the sound has not been freed up first. So you would free the sound (or sounds) first, then delete the buffer. It is also worth noting that adding anything to the buffer, or changing the buffer size, after it has had a sound created from it will give unexpected results and it is not recommended: once you have started creating sounds from any buffer you should not manipulate it in any other way afterwards. \n\n**Returns:** Index ",
        "bufferId": "The ID of the buffer to use.",
        "format": "The format of the data in the buffer (**buffer_u8** or **buffer_s16**).",
        "rate": "The sample rate of the data in the buffer.",
        "offset": "The offset into the buffer to read the sample data from (in bytes).",
        "length": "The length of the buffer (the number of the samples in the buffer).",
        "channels": " The channels to use from one of the constants listed below. "
    },
    "audio_create_play_queue": {
        "desc": "This function prepares a buffer queue for audio. You pass data format (only **buffer_u8** or **buffer_s16** are currently supported), the sample rate (which can be between 1000hz and 48000hz). \n\nNote that you should free up any audio queues created with this function when no longer required to prevent memory leaks using the function **audio_free_play_queue()**. \n\nThis function will trigger an Audio Playback Asynchronous Event when the queue has reached the end, and in this event a special ds_map will be created in the variable **async_load** with the following key/value pairs: \n\n  •\"queue_id\": the queue that has finished playing data \n\n  •\"buffer_id\": the buffer that is no longer being played from \n\n  •\"queue_shutdown\": this is set to 0 during normal playback and 1 when the event is received because **audio_free_play_queue** has been called. When this is set to 1, you don't want to queue up any further data. \n\n**Returns:** Index ",
        "queueFormat": "The format of the buffer data to use (**buffer_u8** or **buffer_s16**).",
        "sampleRate": "The sample rate of the data in the buffer queue.",
        "channels": "The channels to use from one of the constants listed below."
    },
    "audio_create_stream": {
        "desc": "With this function you can create a new sound index which can then be used in the regular audio functions to stream audio directly from an external OGG file source. The function requires the filename (which can be an included file, for example) and will return the new sound index for use. Note that after you no longer need the sound you should call the function **audio_destroy_stream()** with the sound index to remove it from memory otherwise you may get a memory leak which will slow down and eventually crash your game. \n\n**Returns:** Sound Index ",
        "filename": " The file (OGG only) to stream the audio from."
    },
    "audio_create_sync_group": {
        "desc": "Creates a sync group and returns a unique ID value for it which should then be used in all further audio function calls for this group. If you want the group to loop then pass in true, otherwise pass in false, but note that if you want them to loop, all the tracks added later need to be the same length. Note that when you create a sync group, you will need to free the memory and sounds associated with it when not in use using the **audio_destroy_sync_group()** function: for example, in the Room End or Destroy events. \n\n**Returns:** index ",
        "looping": "Whether the tracks in the group should loop (true) or not (false)."
    },
    "audio_debug": {
        "desc": "This function can be used to display debug information about the audio system, with true switching it on and false to switch it off.\n\nFor synchronised groups of audio, you also have the function **audio_sync_group_debug()**. \n\nNOTE: This function does not work on the HTML5 target platform. \n\n**Returns:** N/A ",
        "enable": "Enable (set to true) or disable (false) audio debugging."
    },
    "audio_destroy_stream": {
        "desc": "If you have previously created an audio stream from a file using the function **audio_create_stream()** and no longer need that sound, you can call this function to delete it from memory. Any further calls to the sound index after it has been destroyed will give an error. \n\n**Returns:** N/A ",
        "filename": " The file to stream the audio from. "
    },
    "audio_destroy_sync_group": {
        "desc": "Audio sync groups need to be destroyed when not in use to free up the memory and sound resources associated with them using this function. It takes the group index as returned when the group was created using the **function audio_create_sync_group()**, and frees all resources used by the group. \n\n**Returns:** N/A ",
        "group_index": " The group index to be destroyed. "
    },
    "audio_emitter_create": {
        "desc": "This function creates a new audio emitter and returns the index for it. This index should be stored in a variable for all further functions that relate to this emitter, and then when it is no longer needed it should be removed from memory using the function **audio_emitter_free** to prevent memory leaks which may eventually crash your game. \n\n**Returns:** Real "
    },
    "audio_emitter_exists": {
        "desc": "This function returns whether an audio emitter exists (true) or not (false). Note that if the index you search for has not been initialised previously, this function will cause an error as it is searching for non-existent indices. \n\n**Returns:** Boolean ",
        "index": "The index of the emitter to check the existence of."
    },
    "audio_emitter_falloff": {
        "desc": "With this function you can set the fall-off distance for an emitter. This is the distance from the listener the emitter has to be before the sound will have \"fallen off\" to a volume of 0. The default value for this is 100, but beware of setting this to any value lower than 1 as that will make any sound played through this emitter inaudible to the listener, however any other value will cause the sound to fade away the further that the emitter is from the listener. \n\nHow the sound itself is heard will depend on the falloff reference (which is the distance under which the volume for the source would normally drop by half) and the roll off factor (which affects the sound past the falloff reference distance only). The default factor is normally 1, and the effect of the different falloff values will depend on the model chosen. \n\nFor a complete guide to the different falloff models and how these values are used, please see the function **audio_falloff_set_model**\n\n**Returns:** N/A ",
        "emitterid": "The index of the emitter to change.",
        "falloff_ref_dist": "The falloff reference relative to the listener (clamp).",
        "falloff_max_dist": "The maximum falloff distance relative to the listener.",
        "falloff_factor": "The falloff factor (default 1)."
    },
    "audio_emitter_free": {
        "desc": "With this function you can remove the given emitter from memory. This should always be done whenever the emitter is not going to be used further in the room or the game, ie: in the Destroy Event of the instance or in the Room End Event, otherwise you may end up with a memory leak that will slow down and eventually crash your game. \n\n**Returns:** N/A ",
        "emitterid": ""
    },
    "audio_emitter_gain": {
        "desc": "This function sets the maximum gain (volume) for the sound. The perceived volume for a sound can change depending on the fall-off value and the position it has relative to the listener, but by setting the gain with this function, the full volume will never exceed the specified gain value.\n\nThis function will change the volume of the sound while it is being played as well all subsequent sounds played through the given emitter. \n\nNOTE: the final volume will also be influenced by the global audio gain that has been set by the function **audio_master_gain**. \n\n**Returns:** N/A ",
        "emitterid": "The index of the emitter to change.",
        "gain": "The maximum gain (default 1)."
    },
    "audio_emitter_get_gain": {
        "desc": "This function returns the current gain (volume) set for the given audio emitter, a value between 0 and 1. \n\n**Returns:** Real ",
        "emitterid": "The index of the emitter to use."
    },
    "audio_emitter_get_listener_mask": {
        "desc": "This function will return the bit-mask data that defines which audio listeners an emitter should play sounds from. \n\n**Returns:** Real ",
        "emitterid": "The unique ID of the emitter to get the mask of"
    },
    "audio_emitter_get_pitch": {
        "desc": "This function returns the current pitch value set for the given audio emitter. \n\n**Returns:** Real ",
        "emitterid": "The index of the emitter to use."
    },
    "audio_emitter_get_vx": {
        "desc": "This function returns the current velocity along the x axis for the given audio emitter. \n\n**Returns:** Real ",
        "emitterid": "The index of the emitter to use."
    },
    "audio_emitter_get_vy": {
        "desc": "This function returns the current velocity along the y axis for the given audio emitter. \n\n**Returns:** Real ",
        "emitterid": "The index of the emitter to use."
    },
    "audio_emitter_get_vz": {
        "desc": "This function returns the current velocity along the z axis for the given audio emitter.  \n\n**Returns:** Real ",
        "emitterid": "The index of the emitter to use."
    },
    "audio_emitter_get_x": {
        "desc": "This function returns the current x position of the given audio emitter. \n\n**Returns:** Real ",
        "emitterid": " The index of the emitter to use. "
    },
    "audio_emitter_get_y": {
        "desc": "This function returns the current y position of the given audio emitter. \n\n**Returns:** Real ",
        "emitterid": "This function returns the current y position of the given audio emitter. "
    },
    "audio_emitter_get_z": {
        "desc": "This function returns the current z position of the given audio emitter. \n\n**Returns:** Real ",
        "emitterid": "The index of the emitter to use."
    },
    "audio_emitter_pitch": {
        "desc": "This function can be used to change the pitch of all sounds emitted from the given emitter. It is a pitch multiplier, in that the input value multiplies the current pitch by that amount, so the default value of 1 is no pitch change, while a value of less than 1 will lower the pitch and greater than 1 will raise the pitch. It is best to use small increments for this function as any value under 0 or over 5 may not be audible anyway. \n\nNOTE: If a sound is being looped through the emitter, the change in pitch will not be detected unless the sound is stopped and looped again! \n\n**Returns:** N/A ",
        "emitterid": "The index of the emitter to change.",
        "pitch": "The pitch multiplier (default 1)."
    },
    "audio_emitter_position": {
        "desc": "With this function you can change the position of an audio emitter within the 3D audio space. The position will affect the sound in different ways depending on where the listener is positioned within the audio space too (default position is (0, 0, 0). See **audio_listener_position** for more information), so for example if the emitter position is set to (100, 0, 0) and the current listener is at (200, 0, 0) the audio streamed from the emitter will appear to be on the left of the audio field.",
        "emitterid": "The index of the emitter to change.\n\n**Returns:** N/A",
        "x": "The x position. ",
        "y": "The y position.",
        "z": "The z position."
    },
    "audio_emitter_set_listener_mask": {
        "desc": "",
        "emitterid": "",
        "mask": ""
    },
    "audio_emitter_velocity": {
        "desc": "This function can be used to give an emitter doppler effects and simulate audio motion based on the vector that is resolved from the given relative x, y and z positions (for more information on vectors, please see Maths: Vectors). If the emitter itself is not ever going to move you would normally not need to set these values, but, for example, if you are making a scrolling shooter game where the enemies come from the right and scroll to the left, you would set this to have a velocity of (hspeed, 0, 0) in the create event of the enemies (and update the emitter of each instance in the step event using **audio_emitter_position**) to give any sounds emitted by the enemy instances the correct doppler as they pass the player instance (which in turn would be using the function **audio_listener_position** to set the listener to the correct position). \n\n**Returns:** N/A",
        "emitterid": "The index of the emitter to change.",
        "vx": "The x vector value (default 0).",
        "vy": "The y vector value (default 0).",
        "vz": "The z vector value (default 0)."
    },
    "audio_exists": {
        "desc": "This function returns whether a sound exists (true) or not (false). Note that if the index you search for has not been initialised previously, this function will cause an error as it is searching for non-existent asset indices. The sound to check can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the **audio_play_sound** or **audio_play_sound_at** functions) or a sound asset. \n\n**Returns:** Boolean",
        "index": "The index of the sound to check the existence of."
    },
    "audio_falloff_set_model": {
        "desc": "To add more versatility to the audio engine, GameMaker: Studio permits you to select the falloff model that suits your game. This model will be used for all the audio functions in the game or app, and so you should make sure that the model you choose is the correct one, as each one will affect how the listener perceives the sounds you play through emitters or with the function **audio_play_sound_at**. \n\nWhen setting falloff in your game with the appropriate functions there are three arguments that you will need to set, and each one is appropriate to a specific, model and will affect the way the final sound is \"heard\" by the player depending on the distance that the listener is from the source. The three arguments are: \n\n        •reference distance: this is the distance from the listener the distance under which the volume for the sound playing would normally drop by half before being influenced by rolloff factor or the specified maximum distance.\n        •maximum distance: this sets the distance where there will no longer be any attenuation of the source sound. This can be the point at which the sound is no longer heard or the point at which the sound volume no longer decreases below the minimum threshold defined by the model chosen.\n        •falloff factor: The falloff factor is used in distance attenuation based on the inverse distance model and sets the final minimum threshold for a sound with falloff.\n\n**Returns:** N/A ",
        "falloffmodel": "The constant used to set the falloff model."
    },
    "audio_free_buffer_sound": {
        "desc": "With this function you can free up the pointer index value associated with the sound ID. Freed sounds will not be available for playing, and if multiple instances of the sound are being played they will all be stopped. Note that before you can delete the buffer itself, you must first free all sound ID's associated with it.\n\n**Returns:** N/A",
        "index": "The index of the buffered sound to free."
    },
    "audio_free_play_queue": {
        "desc": "This function is used to free up the memory associated with the given audio queue. The queue index is the value returned when you created the queue using the function **audio_create_play_queue()**, and this function should be called when the queue is no longer required to prevent memory leaks. Freeing the queue will stop any sound that is be playing, and you cannot delete the buffer that a sound is being streamed from until the queue it is assigned to has been freed. This function will trigger an Audio Playback Asynchronous Event, and in this event a special **ds_map** will be created in the variable **async_load** with the following key/value pairs:\n\n  \"queue_id\": the queue that has finished playing data\n\n  \"buffer_id\": the buffer that is no longer being played from\n\n  \"queue_shutdown\": this is set to 0 during normal playback and 1 when the event is received because you have freed the queue with this function. When this is set to 1, you don't want to queue up any further data.\n\n**Returns:** N/A",
        "queueIndex": "The index of the queue to free."
    },
    "audio_get_listener_count": {
        "desc": "Certain target platforms permit more than one listener, so it is important that you know how many the target has before changing or using different listeners. This function will return the number of listeners available.\n\n**Returns:** Real"
    },
    "audio_get_listener_info": {
        "desc": "This function will create a ds_map and populate it with information for the given listener.\n\nNOTE: You are responsible for the destruction of the returned ds_map using the appropriate function.\n\nThe ds_map will contain the following keys:\n\n    \"name\": The name of the listener, as a string, with \"default\" being the standard listener name on most target platforms\n\n    \"mask\": The bit-mask for the listener\n\n    \"index\": The unique index value of the listener\n\nThe mask value can be used to set a sound or emitter to play from multiple listeners at once, simply using the bitwise or \"|\" to generate a mask for the sound (see the example code below), while the index is used to set the properties like position or velocity for a given listener using functions like **audio_listener_set_position()**.\n\n**Returns:** ds_map",
        "num": "The listener number to get the data for."
    },
    "audio_get_listener_mask": {
        "desc": "This function will return the bit-mask data that defines the current default (global) mask for the audio listeners.\n\nReturns: Real"
    },
    "audio_get_master_gain": {
        "desc": "",
        "listenerIndex": ""
    },
    "audio_get_name": {
        "desc": "This function will return the name of a given audio resource as a string. The \"index\" value can be that of the resource itself (as seen in the resource tree) or the unique ID value that is given when you play the sound using, for example, **audio_play_sound()**. \n\nNote that the string returned is not the same as the resource ID and cannot be used to access the resource itself, so should only be used for displaying or error checking.\n\nReturns: String",
        "index": "The index of the sound to check."
    },
    "audio_get_recorder_count": {
        "desc": "This function will return the number of audio recording sources (like microphones, etc...) currently available to your game. So, if you have a return value of, for example, four, then you will have audio input on the sources 0, 1, 2 and 3, with one of these values being that which you use to start recording from using the function **audio_start_recording()**. This value can change at any time as people plug/unplug microphones or other input sources to the device. Note that you can use the function **audio_get_recorder_info** to get information on each device connected.\n\nReturns: Integer"
    },
    "audio_get_recorder_info": {
        "desc": "This function will return a **ds_map** with information about the given recorder source index. You can find out how many recorder sources are available using the function **audio_get_recorder_count**, and the map returned will contain the following key/value pairs:\n\n - \"name\" - a name to describe the device\n\n - \"index\" - the index to be used to record\n\n - \"data_format\" - the format data will be returned in (this is currently always **buffer_s16** but other formats may be supported in the future)\n\n - \"sample_rate\" - the sample rate (in Hz) of the data returned (currently clamped to 16000hz but this may change in future)\n\n - \"channels\" - the constant audio_mono (further constants for stereo and 3D may be supported in the future)\n\nnote that while the function creates a **ds_map** for you, it does not remove it again later and so you should be destroying the map yourself when it is no longer needed to prevent any memory leaks.\n\nNOTE: Most platforms support recording audio in some form, but that does not mean that all devices will permit it, even if the platform does, so you should always check that the audio_get_recorder_count() function returns a value greater than 0 to verify that recording devices are available before using the rest of the recording functions.\n\nReturns: ds_map",
        "recorder_index": "The index of the recorder source to get the information from."
    },
    "audio_get_type": {
        "desc": "When adding audio to GameMaker: Studio it can be either streamed or in memory. If you need to know whether a given sound index is for streamed audio or not you can use this function which will return 1 for streamed, 0 for sound in memory, and -1 if there is any error or the index does not point to a valid sound resource.\n\nReturns: Real",
        "soundid": "The index of the sound to check."
    },
    "audio_group_is_loaded": {
        "desc": "This function will check a specific audio group to see if it has been loaded into memory, ready for use.\n\nReturns: Boolean",
        "groupId": "The index of the audio group to check (as defined in the Global Game Settings Audio Groups Tab)"
    },
    "audio_group_load": {
        "desc": "This function will load all the sounds that are flagged as belonging to the given Audio Group into memory. The function will return *true* if loading is initiated and *false* if the group ID is invalid, or it has already been flagged for loading. The function is asynchronous so your game will continue to run while the audio is loaded in the background. This means that it will also trigger an Asynchronous Load/Save Event to inform you that the whole group has been loaded into memory and the sounds can now be used.\n\nReturns: Boolean",
        "groupId": "The index of the audio group to load (as defined in the Global Game Settings Audio Groups Tab)"
    },
    "audio_group_load_progress": {
        "desc": "This function will check the loading progress for an audio group and return an (approximate) value between 0 and 100.\n\nReturns: Real",
        "groupId": "The index of the audio group to check (as defined in the Global Game Settings Audio Groups Tab)"
    },
    "audio_group_name": {
        "desc": "This function will return a string containing the name of the given audio group for displaying or checking. When you define an audio group in the Global Game Settings, you give it a unique \"name\" which is really a constant to use as an ID value for the group. All this function does is take the ID and return a string of the ID name you gave.\n\nReturns: String",
        "groupId": "The index value constant of the audio group to check (as defined in the Global Game Settings Audio Groups Tab)\n\nReturns: String"
    },
    "audio_group_set_gain": {
        "desc": "With this function you can fade a group of sounds in or out over a given length of time, or it can be used to set the group gain instantly. The time is measured in milliseconds, and the function requires that you input a final level of gain for the group to have reached by the end of that time. This gain can be between 0 (silent) and 1 (full volume) and the scale is linear, such that a value of 0.5 would be half volume. To instantly change the gain, simply set the time argument to 0.\n\nReturns: N/A",
        "groupId": "The index of the audio group to stop (as defined in the Global Game Settings Audio Groups Tab)",
        "volume": "The final value for the group volume.",
        "time": "The length of the change in gain in milliseconds."
    },
    "audio_group_stop": {
        "desc": "This function will stop all sounds from the given audio group that are currently playing.\n\nReturns: N/A",
        "groupId": "The index of the audio group to stop (as defined in the Global Game Settings Audio Groups Tab)"
    },
    "audio_group_unload": {
        "desc": "",
        "groupId": ""
    },
    "audio_is_paused": {
        "desc": "",
        "soundid": ""
    },
    "audio_is_playing": {
        "desc": "",
        "soundid": ""
    },
    "audio_listener_get_data": {
        "desc": "",
        "index": ""
    },
    "audio_listener_orientation": {
        "desc": "",
        "lookat_x": "",
        "lookat_y": "",
        "lookat_z": "",
        "up_x": "",
        "up_y": "",
        "up_z": ""
    },
    "audio_listener_position": {
        "desc": "",
        "x": "",
        "y": "",
        "z": ""
    },
    "audio_listener_set_orientation": {
        "desc": "",
        "index": "",
        "lookat_x": "",
        "lookat_y": "",
        "lookat_z": "",
        "up_x": "",
        "up_y": "",
        "up_z": ""
    },
    "audio_listener_set_position": {
        "desc": "",
        "index": "",
        "x": "",
        "y": "",
        "z": ""
    },
    "audio_listener_set_velocity": {
        "desc": "",
        "index": "",
        "vx": "",
        "vy": "",
        "vz": ""
    },
    "audio_listener_velocity": {
        "desc": "",
        "vx": "",
        "vy": "",
        "vz": ""
    },
    "audio_master_gain": {
        "desc": "",
        "gain": ""
    },
    "audio_pause_all": {
        "desc": ""
    },
    "audio_pause_sound": {
        "desc": "",
        "soundid": ""
    },
    "audio_pause_sync_group": {
        "desc": "",
        "sync_group_id": ""
    },
    "audio_play_in_sync_group": {
        "desc": "",
        "sync_group_id": "",
        "soundid": ""
    },
    "audio_play_sound": {
        "desc": "",
        "soundid": "",
        "priority": "",
        "loops": ""
    },
    "audio_play_sound_at": {
        "desc": "",
        "soundid": "",
        "x": "",
        "y": "",
        "z": "",
        "falloff_ref_dist": "",
        "falloff_max_dist": "",
        "falloff_factor": "",
        "loops": "",
        "priority": ""
    },
    "audio_play_sound_on": {
        "desc": "",
        "emitterid": "",
        "soundid": "",
        "priority": "",
        "loops": ""
    },
    "audio_queue_sound": {
        "desc": "",
        "queueid": "",
        "buffer_id": "",
        "offset": "",
        "length": ""
    },
    "audio_resume_all": {
        "desc": ""
    },
    "audio_resume_sound": {
        "desc": "",
        "soundid": ""
    },
    "audio_resume_sync_group": {
        "desc": "",
        "sync_group_id": ""
    },
    "audio_set_listener_mask": {
        "desc": "",
        "mask": ""
    },
    "audio_set_master_gain": {
        "desc": "",
        "listenerIndex": "",
        "gain": ""
    },
    "audio_sound_gain": {
        "desc": "",
        "index": "",
        "volume": "",
        "time": ""
    },
    "audio_sound_get_gain": {
        "desc": "",
        "index": ""
    },
    "audio_sound_get_listener_mask": {
        "desc": "",
        "soundid": ""
    },
    "audio_sound_get_pitch": {
        "desc": "",
        "index": ""
    },
    "audio_sound_get_track_position": {
        "desc": "",
        "soundid": ""
    },
    "audio_sound_length": {
        "desc": "",
        "soundid": ""
    },
    "audio_sound_pitch": {
        "desc": "",
        "index": "",
        "pitch": ""
    },
    "audio_sound_set_listener_mask": {
        "desc": "",
        "soundid": "",
        "mask": ""
    },
    "audio_sound_set_track_position": {
        "desc": "",
        "soundid": "",
        "time": ""
    },
    "audio_start_recording": {
        "desc": "",
        "recorder_num": ""
    },
    "audio_start_sync_group": {
        "desc": "",
        "sync_group_id": ""
    },
    "audio_stop_all": {
        "desc": ""
    },
    "audio_stop_recording": {
        "desc": "",
        "channel_index": ""
    },
    "audio_stop_sound": {
        "desc": "",
        "soundid": ""
    },
    "audio_stop_sync_group": {
        "desc": "",
        "sync_group_id": ""
    },
    "audio_sync_group_debug": {
        "desc": "",
        "sync_group_id": ""
    },
    "audio_sync_group_get_track_pos": {
        "desc": "",
        "sync_group_id": ""
    },
    "audio_sync_group_is_playing": {
        "desc": "",
        "sync_group_id": ""
    },
    "audio_system": {
        "desc": ""
    },
    "base64_decode": {
        "desc": "",
        "string": ""
    },
    "base64_encode": {
        "desc": "",
        "string": ""
    },
    "browser_input_capture": {
        "desc": "",
        "enable": ""
    },
    "buffer_async_group_begin": {
        "desc": "",
        "groupname": ""
    },
    "buffer_async_group_end": {
        "desc": ""
    },
    "buffer_async_group_option": {
        "desc": "",
        "optionname": "",
        "optionvalue": ""
    },
    "buffer_base64_decode": {
        "desc": "",
        "string": ""
    },
    "buffer_base64_decode_ext": {
        "desc": "",
        "buffer": "",
        "string": "",
        "offset": ""
    },
    "buffer_base64_encode": {
        "desc": "",
        "buffer": "",
        "offset": "",
        "size": ""
    },
    "buffer_copy": {
        "desc": "",
        "src_buffer": "",
        "src_offset": "",
        "size": "",
        "dest_buffer": "",
        "dest_offset": ""
    },
    "buffer_copy_from_vertex_buffer": {
        "desc": "",
        "vertex_buffer": "",
        "start_vertex": "",
        "num_vertices": "",
        "dest_buffer": "",
        "dest_offset": ""
    },
    "buffer_create": {
        "desc": "",
        "size": "",
        "buffer_type": "",
        "alignment": ""
    },
    "buffer_create_from_vertex_buffer": {
        "desc": "",
        "vertex_buffer": "",
        "type": "",
        "alignment": ""
    },
    "buffer_create_from_vertex_buffer_ext": {
        "desc": "",
        "vertex_buffer": "",
        "type": "",
        "alignment": "",
        "start_vertex": "",
        "num_vertices": ""
    },
    "buffer_delete": {
        "desc": "",
        "buffer": ""
    },
    "buffer_exists": {
        "desc": "",
        "buffer": ""
    },
    "buffer_fill": {
        "desc": "",
        "buffer": "",
        "offset": "",
        "type": "",
        "value": "",
        "size": ""
    },
    "buffer_get_address": {
        "desc": "",
        "buffer": ""
    },
    "buffer_get_alignment": {
        "desc": "",
        "buffer": ""
    },
    "buffer_get_size": {
        "desc": "",
        "buffer": ""
    },
    "buffer_get_surface": {
        "desc": "",
        "buffer": "",
        "surface": "",
        "mode": "",
        "offset": "",
        "modulo": ""
    },
    "buffer_get_type": {
        "desc": "",
        "buffer": ""
    },
    "buffer_load": {
        "desc": "",
        "filename": ""
    },
    "buffer_load_async": {
        "desc": "",
        "bufferid": "",
        "filename": "",
        "offset": "",
        "size": ""
    },
    "buffer_load_ext": {
        "desc": "",
        "bufferid": "",
        "filename": "",
        "offset": ""
    },
    "buffer_load_partial": {
        "desc": "",
        "bufferid": "",
        "filename": "",
        "src_offset": "",
        "src_len": "",
        "dest_offset": ""
    },
    "buffer_md5": {
        "desc": "",
        "buffer": "",
        "offset": "",
        "size": ""
    },
    "buffer_peek": {
        "desc": "",
        "buffer": "",
        "offset": "",
        "type": ""
    },
    "buffer_poke": {
        "desc": "",
        "buffer": "",
        "offset": "",
        "type": "",
        "value": ""
    },
    "buffer_read": {
        "desc": "",
        "buffer": "",
        "type": ""
    },
    "buffer_resize": {
        "desc": "",
        "buffer": "",
        "newsize": ""
    },
    "buffer_save": {
        "desc": "",
        "buffer": "",
        "filename": ""
    },
    "buffer_save_async": {
        "desc": "",
        "buffer": "",
        "type": "",
        "offset": "",
        "size": ""
    },
    "buffer_save_ext": {
        "desc": "",
        "bufferid": "",
        "filename": "",
        "offset": "",
        "size": ""
    },
    "buffer_seek": {
        "desc": "",
        "bufferid": "",
        "base": "",
        "offset": ""
    },
    "buffer_set_surface": {
        "desc": "",
        "buffer": "",
        "surface": "",
        "mode": "",
        "offset": "",
        "modulo": ""
    },
    "buffer_sha1": {
        "desc": "",
        "bufferid": "",
        "offset": "",
        "size": ""
    },
    "buffer_sizeof": {
        "desc": "",
        "type": ""
    },
    "buffer_tell": {
        "desc": "",
        "buffer": ""
    },
    "buffer_write": {
        "desc": "",
        "buffer": "",
        "type": "",
        "value": ""
    },
    "ceil": {
        "desc": "",
        "x": ""
    },
    "choose": {
        "desc": "",
        "x1": "",
        "x2": "",
        "x3": "",
        "more": ""
    },
    "chr": {
        "desc": "",
        "val": ""
    },
    "clamp": {
        "desc": "",
        "val": "",
        "min": "",
        "max": ""
    },
    "clickable_add": {
        "desc": "",
        "x": "",
        "y": "",
        "spritetpe": "",
        "URL": "",
        "target": "",
        "params": ""
    },
    "clickable_add_ext": {
        "desc": "",
        "x": "",
        "y": "",
        "spritetpe": "",
        "URL": "",
        "target": "",
        "params": "",
        "scale": "",
        "alpha": ""
    },
    "clickable_change": {
        "desc": "",
        "buttonid": "",
        "spritetpe": "",
        "x": "",
        "y": ""
    },
    "clickable_change_ext": {
        "desc": "",
        "buttonid": "",
        "spritetpe": "",
        "x": "",
        "y": "",
        "scale": "",
        "alpha": ""
    },
    "clickable_delete": {
        "desc": "",
        "buttonid": ""
    },
    "clickable_exists": {
        "desc": "",
        "index": ""
    },
    "clickable_set_style": {
        "desc": "",
        "buttonid": "",
        "map": ""
    },
    "clipboard_get_text": {
        "desc": ""
    },
    "clipboard_has_text": {
        "desc": ""
    },
    "clipboard_set_text": {
        "desc": "",
        "str": ""
    },
    "cloud_file_save": {
        "desc": "",
        "filename": ""
    },
    "cloud_string_save": {
        "desc": "",
        "data": ""
    },
    "cloud_synchronise": {
        "desc": ""
    },
    "code_is_compiled": {
        "desc": ""
    },
    "collision_circle": {
        "desc": "",
        "x1": "",
        "y1": "",
        "radius": "",
        "obj": "",
        "prec": "",
        "notme": ""
    },
    "collision_ellipse": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "obj": "",
        "prec": "",
        "notme": ""
    },
    "collision_line": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "obj": "",
        "prec": "",
        "notme": ""
    },
    "collision_point": {
        "desc": "",
        "x": "",
        "y": "",
        "obj": "",
        "prec": "",
        "notme": ""
    },
    "collision_rectangle": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "obj": "",
        "prec": "",
        "notme": ""
    },
    "color_get_blue": {
        "desc": "",
        "col": ""
    },
    "color_get_green": {
        "desc": "",
        "col": ""
    },
    "color_get_hue": {
        "desc": "",
        "col": ""
    },
    "color_get_red": {
        "desc": "",
        "col": ""
    },
    "color_get_saturation": {
        "desc": "",
        "col": ""
    },
    "color_get_value": {
        "desc": "",
        "col": ""
    },
    "colour_get_blue": {
        "desc": "",
        "col": ""
    },
    "colour_get_green": {
        "desc": "",
        "col": ""
    },
    "colour_get_hue": {
        "desc": "",
        "col": ""
    },
    "colour_get_red": {
        "desc": "",
        "col": ""
    },
    "colour_get_saturation": {
        "desc": "",
        "col": ""
    },
    "colour_get_value": {
        "desc": "",
        "col": ""
    },
    "cos": {
        "desc": "",
        "radian_angle": ""
    },
    "darccos": {
        "desc": "",
        "x": ""
    },
    "darcsin": {
        "desc": "",
        "x": ""
    },
    "darctan": {
        "desc": "",
        "x": ""
    },
    "darctan2": {
        "desc": "",
        "y": "",
        "x": ""
    },
    "date_compare_date": {
        "desc": "",
        "date1": "",
        "date2": ""
    },
    "date_compare_datetime": {
        "desc": "",
        "date1": "",
        "date2": ""
    },
    "date_compare_time": {
        "desc": "",
        "date1": "",
        "date2": ""
    },
    "date_create_datetime": {
        "desc": "",
        "year": "",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": ""
    },
    "date_current_datetime": {
        "desc": ""
    },
    "date_datetime_string": {
        "desc": "",
        "date": ""
    },
    "date_date_of": {
        "desc": "",
        "date": ""
    },
    "date_date_string": {
        "desc": "",
        "date": ""
    },
    "date_days_in_month": {
        "desc": "",
        "date": ""
    },
    "date_days_in_year": {
        "desc": "",
        "date": ""
    },
    "date_day_span": {
        "desc": "",
        "date1": "",
        "date2": ""
    },
    "date_get_day": {
        "desc": "",
        "date": ""
    },
    "date_get_day_of_year": {
        "desc": "",
        "date": ""
    },
    "date_get_hour": {
        "desc": "",
        "date": ""
    },
    "date_get_hour_of_year": {
        "desc": "",
        "date": ""
    },
    "date_get_minute": {
        "desc": "",
        "date": ""
    },
    "date_get_minute_of_year": {
        "desc": "",
        "date": ""
    },
    "date_get_month": {
        "desc": "",
        "date": ""
    },
    "date_get_second": {
        "desc": "",
        "date": ""
    },
    "date_get_second_of_year": {
        "desc": "",
        "date": ""
    },
    "date_get_timezone": {
        "desc": ""
    },
    "date_get_week": {
        "desc": "",
        "date": ""
    },
    "date_get_weekday": {
        "desc": "",
        "date": ""
    },
    "date_get_year": {
        "desc": "",
        "date": ""
    },
    "date_hour_span": {
        "desc": "",
        "date1": "",
        "date2": ""
    },
    "date_inc_day": {
        "desc": "",
        "date": "",
        "amount": ""
    },
    "date_inc_hour": {
        "desc": "",
        "date": "",
        "amount": ""
    },
    "date_inc_minute": {
        "desc": "",
        "date": "",
        "amount": ""
    },
    "date_inc_month": {
        "desc": "",
        "date": "",
        "amount": ""
    },
    "date_inc_second": {
        "desc": "",
        "date": "",
        "amount": ""
    },
    "date_inc_week": {
        "desc": "",
        "date": "",
        "amount": ""
    },
    "date_inc_year": {
        "desc": "",
        "date": "",
        "amount": ""
    },
    "date_is_today": {
        "desc": "",
        "date": ""
    },
    "date_leap_year": {
        "desc": "",
        "date": ""
    },
    "date_minute_span": {
        "desc": "",
        "date1": "",
        "date2": ""
    },
    "date_month_span": {
        "desc": "",
        "date1": "",
        "date2": ""
    },
    "date_second_span": {
        "desc": "",
        "date1": "",
        "date2": ""
    },
    "date_set_timezone": {
        "desc": "",
        "timezone": ""
    },
    "date_time_of": {
        "desc": "",
        "date": ""
    },
    "date_time_string": {
        "desc": "",
        "date": ""
    },
    "date_valid_datetime": {
        "desc": "",
        "year": "",
        "month": "",
        "day": "",
        "hour": "",
        "minute": "",
        "second": ""
    },
    "date_week_span": {
        "desc": "",
        "date1": "",
        "date2": ""
    },
    "date_year_span": {
        "desc": "",
        "date1": "",
        "date2": ""
    },
    "dcos": {
        "desc": "",
        "degree_angle": ""
    },
    "debug_event": {
        "desc": "",
        "str": ""
    },
    "degtorad": {
        "desc": "",
        "x": ""
    },
    "device_get_tilt_x": {
        "desc": ""
    },
    "device_get_tilt_y": {
        "desc": ""
    },
    "device_get_tilt_z": {
        "desc": ""
    },
    "device_is_keypad_open": {
        "desc": ""
    },
    "device_mouse_check_button": {
        "desc": "",
        "device": "",
        "button": ""
    },
    "device_mouse_check_button_pressed": {
        "desc": "",
        "device": "",
        "button": ""
    },
    "device_mouse_check_button_released": {
        "desc": "",
        "device": "",
        "button": ""
    },
    "device_mouse_dbclick_enable": {
        "desc": "",
        "enable": ""
    },
    "device_mouse_raw_x": {
        "desc": "",
        "device": ""
    },
    "device_mouse_raw_y": {
        "desc": "",
        "device": ""
    },
    "device_mouse_x": {
        "desc": "",
        "device": ""
    },
    "device_mouse_x_to_gui": {
        "desc": "",
        "device": ""
    },
    "device_mouse_y": {
        "desc": "",
        "device": ""
    },
    "device_mouse_y_to_gui": {
        "desc": "",
        "device": ""
    },
    "directory_create": {
        "desc": "",
        "dname": ""
    },
    "directory_destroy": {
        "desc": "",
        "dname": ""
    },
    "directory_exists": {
        "desc": "",
        "dname": ""
    },
    "display_get_dpi_x": {
        "desc": ""
    },
    "display_get_dpi_y": {
        "desc": ""
    },
    "display_get_gui_height": {
        "desc": ""
    },
    "display_get_gui_width": {
        "desc": ""
    },
    "display_get_colordepth": {
        "desc": ""
    },
    "display_get_height": {
        "desc": ""
    },
    "display_get_orientation": {
        "desc": ""
    },
    "display_get_width": {
        "desc": ""
    },
    "display_mouse_get_x": {
        "desc": ""
    },
    "display_mouse_get_y": {
        "desc": ""
    },
    "display_set_gui_maximise": {
        "desc": "",
        "xscale": "",
        "yscale": "",
        "xoffset": "",
        "yoffset": ""
    },
    "display_set_gui_size": {
        "desc": "",
        "width": "",
        "height": ""
    },
    "display_set_ui_visibility": {
        "desc": "",
        "flags": ""
    },
    "display_mouse_set": {
        "desc": "",
        "x": "",
        "y": ""
    },
    "display_reset": {
        "desc": "",
        "aa_level": "",
        "vsync": ""
    },
    "distance_to_object": {
        "desc": "",
        "obj": ""
    },
    "distance_to_point": {
        "desc": "",
        "x": "",
        "y": ""
    },
    "dot_product": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": ""
    },
    "dot_product_3d": {
        "desc": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": ""
    },
    "dot_product_3d_normalised": {
        "desc": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": ""
    },
    "dot_product_normalised": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": ""
    },
    "draw_arrow": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "size": ""
    },
    "draw_button": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "up": ""
    },
    "draw_circle": {
        "desc": "",
        "x": "",
        "y": "",
        "r": "",
        "outline": ""
    },
    "draw_circle_color": {
        "desc": "",
        "x": "",
        "y": "",
        "r": "",
        "col1": "",
        "col2": "",
        "outline": ""
    },
    "draw_circle_colour": {
        "desc": "",
        "x": "",
        "y": "",
        "r": "",
        "col1": "",
        "col2": "",
        "outline": ""
    },
    "draw_clear": {
        "desc": "",
        "col": ""
    },
    "draw_clear_alpha": {
        "desc": "",
        "col": "",
        "alpha": ""
    },
    "draw_ellipse": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "outline": ""
    },
    "draw_ellipse_color": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "col1": "",
        "col2": "",
        "outline": ""
    },
    "draw_ellipse_colour": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "col1": "",
        "col2": "",
        "outline": ""
    },
    "draw_enable_alphablend": {
        "desc": "",
        "enable": ""
    },
    "draw_enable_drawevent": {
        "desc": "",
        "enable": ""
    },
    "draw_enable_swf_aa": {
        "desc": "",
        "enable": ""
    },
    "draw_flush": {
        "desc": ""
    },
    "draw_getpixel": {
        "desc": "",
        "x": "",
        "y": ""
    },
    "draw_getpixel_ext": {
        "desc": "",
        "x": "",
        "y": ""
    },
    "draw_get_alpha": {
        "desc": ""
    },
    "draw_get_alpha_test": {
        "desc": ""
    },
    "draw_get_alpha_test_ref_value": {
        "desc": ""
    },
    "draw_get_color": {
        "desc": ""
    },
    "draw_get_colour": {
        "desc": ""
    },
    "draw_get_swf_aa_level": {
        "desc": ""
    },
    "draw_healthbar": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "amount": "",
        "backcol": "",
        "mincol": "",
        "maxcol": "",
        "direction": "",
        "showback": "",
        "showborder": ""
    },
    "draw_highscore": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": ""
    },
    "draw_line": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": ""
    },
    "draw_line_color": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "col1": "",
        "col2": ""
    },
    "draw_line_colour": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "col1": "",
        "col2": ""
    },
    "draw_line_width": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "w": ""
    },
    "draw_line_width_color": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "w": "",
        "col1": "",
        "col2": ""
    },
    "draw_line_width_colour": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "w": "",
        "col1": "",
        "col2": ""
    },
    "draw_path": {
        "desc": "",
        "path": "",
        "x1": "",
        "y1": "",
        "absolute": ""
    },
    "draw_point": {
        "desc": "",
        "x": "",
        "y": ""
    },
    "draw_point_color": {
        "desc": "",
        "x": "",
        "y": "",
        "col": ""
    },
    "draw_point_colour": {
        "desc": "",
        "x": "",
        "y": "",
        "col": ""
    },
    "draw_primitive_begin": {
        "desc": "",
        "kind": ""
    },
    "draw_primitive_begin_texture": {
        "desc": "",
        "kind": "",
        "texid": ""
    },
    "draw_primitive_end": {
        "desc": ""
    },
    "draw_rectangle": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "outline": ""
    },
    "draw_rectangle_color": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "col1": "",
        "col2": "",
        "col3": "",
        "col4": "",
        "outline": ""
    },
    "draw_rectangle_colour": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "col1": "",
        "col2": "",
        "col3": "",
        "col4": "",
        "outline": ""
    },
    "draw_roundrect": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "outline": ""
    },
    "draw_roundrect_color": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "col1": "",
        "col2": "",
        "outline": ""
    },
    "draw_roundrect_color_ext": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "radiusx": "",
        "radiusy": "",
        "col1": "",
        "col2": "",
        "outline": ""
    },
    "draw_roundrect_colour": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "col1": "",
        "col2": "",
        "outline": ""
    },
    "draw_roundrect_colour_ext": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "radiusx": "",
        "radiusy": "",
        "col1": "",
        "col2": "",
        "outline": ""
    },
    "draw_roundrect_ext": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "radiusx": "",
        "radiusy": "",
        "outline": ""
    },
    "draw_self": {
        "desc": ""
    },
    "draw_set_alpha": {
        "desc": "",
        "alpha": ""
    },
    "draw_set_alpha_test": {
        "desc": "",
        "enable": ""
    },
    "draw_set_alpha_test_ref_value": {
        "desc": "",
        "value": ""
    },
    "draw_set_blend_mode": {
        "desc": "",
        "mode": ""
    },
    "draw_set_blend_mode_ext": {
        "desc": "",
        "src": "",
        "dest": ""
    },
    "draw_set_circle_precision": {
        "desc": "",
        "precision": ""
    },
    "draw_set_color": {
        "desc": "",
        "col": ""
    },
    "draw_set_color_write_enable": {
        "desc": "",
        "red": "",
        "green": "",
        "blue": "",
        "alpha": ""
    },
    "draw_set_colour": {
        "desc": "",
        "col": ""
    },
    "draw_set_colour_write_enable": {
        "desc": "",
        "red": "",
        "green": "",
        "blue": "",
        "alpha": ""
    },
    "draw_set_font": {
        "desc": "",
        "font": ""
    },
    "draw_set_halign": {
        "desc": "",
        "halign": ""
    },
    "draw_set_swf_aa_level": {
        "desc": "",
        "aa_level": ""
    },
    "draw_set_valign": {
        "desc": "",
        "valign": ""
    },
    "draw_skeleton": {
        "desc": "",
        "sprite": "",
        "animname": "",
        "skinname": "",
        "frame": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "rot": "",
        "colour": "",
        "alpha": ""
    },
    "draw_skeleton_collision": {
        "desc": "",
        "sprite": "",
        "animname": "",
        "frame": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "rot": "",
        "colour": ""
    },
    "draw_skeleton_instance": {
        "desc": "",
        "instance": "",
        "animname": "",
        "skinname": "",
        "frame": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "rot": "",
        "colour": "",
        "alpha": ""
    },
    "draw_skeleton_time": {
        "desc": "",
        "sprite": "",
        "animname": "",
        "skinname": "",
        "time": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "rot": "",
        "colour": "",
        "alpha": ""
    },
    "draw_sprite": {
        "desc": "",
        "sprite": "",
        "subimg": "",
        "x": "",
        "y": ""
    },
    "draw_sprite_ext": {
        "desc": "",
        "sprite": "",
        "subimg": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "rot": "",
        "colour": "",
        "alpha": ""
    },
    "draw_sprite_general": {
        "desc": "",
        "sprite": "",
        "subimg": "",
        "left": "",
        "top": "",
        "width": "",
        "height": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "rot": "",
        "c1": "",
        "c2": "",
        "c3": "",
        "c4": "",
        "alpha": ""
    },
    "draw_sprite_part": {
        "desc": "",
        "sprite": "",
        "subimg": "",
        "left": "",
        "top": "",
        "width": "",
        "height": "",
        "x": "",
        "y": ""
    },
    "draw_sprite_part_ext": {
        "desc": "",
        "sprite": "",
        "subimg": "",
        "left": "",
        "top": "",
        "width": "",
        "height": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "colour": "",
        "alpha": ""
    },
    "draw_sprite_pos": {
        "desc": "",
        "sprite": "",
        "subimg": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "x3": "",
        "y3": "",
        "x4": "",
        "y4": "",
        "alpha": ""
    },
    "draw_sprite_stretched": {
        "desc": "",
        "sprite": "",
        "subimg": "",
        "x": "",
        "y": "",
        "w": "",
        "h": ""
    },
    "draw_sprite_stretched_ext": {
        "desc": "",
        "sprite": "",
        "subimg": "",
        "x": "",
        "y": "",
        "w": "",
        "h": "",
        "colour": "",
        "alpha": ""
    },
    "draw_sprite_tiled": {
        "desc": "",
        "sprite": "",
        "subimg": "",
        "x": "",
        "y": ""
    },
    "draw_sprite_tiled_ext": {
        "desc": "",
        "sprite": "",
        "subimg": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "colour": "",
        "alpha": ""
    },
    "draw_surface": {
        "desc": "",
        "id": "",
        "x": "",
        "y": ""
    },
    "draw_surface_ext": {
        "desc": "",
        "id": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "rot": "",
        "colour": "",
        "alpha": ""
    },
    "draw_surface_general": {
        "desc": "",
        "id": "",
        "left": "",
        "top": "",
        "width": "",
        "height": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "rot": "",
        "c1": "",
        "c2": "",
        "c3": "",
        "c4": "",
        "alpha": ""
    },
    "draw_surface_part": {
        "desc": "",
        "id": "",
        "left": "",
        "top": "",
        "width": "",
        "height": "",
        "x": "",
        "y": ""
    },
    "draw_surface_part_ext": {
        "desc": "",
        "id": "",
        "left": "",
        "top": "",
        "width": "",
        "height": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "colour": "",
        "alpha": ""
    },
    "draw_surface_stretched": {
        "desc": "",
        "id": "",
        "x": "",
        "y": "",
        "w": "",
        "h": ""
    },
    "draw_surface_stretched_ext": {
        "desc": "",
        "id": "",
        "x": "",
        "y": "",
        "w": "",
        "h": "",
        "colour": "",
        "alpha": ""
    },
    "draw_surface_tiled": {
        "desc": "",
        "id": "",
        "x": "",
        "y": ""
    },
    "draw_surface_tiled_ext": {
        "desc": "",
        "id": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "colour": "",
        "alpha": ""
    },
    "draw_text": {
        "desc": "",
        "x": "",
        "y": "",
        "string": ""
    },
    "draw_texture_flush": {
        "desc": ""
    },
    "draw_text_color": {
        "desc": "",
        "x": "",
        "y": "",
        "string": "",
        "c1": "",
        "c2": "",
        "c3": "",
        "c4": "",
        "alpha": ""
    },
    "draw_text_colour": {
        "desc": "",
        "x": "",
        "y": "",
        "string": "",
        "c1": "",
        "c2": "",
        "c3": "",
        "c4": "",
        "alpha": ""
    },
    "draw_text_ext": {
        "desc": "",
        "x": "",
        "y": "",
        "string": "",
        "sep": "",
        "w": ""
    },
    "draw_text_ext_color": {
        "desc": "",
        "x": "",
        "y": "",
        "string": "",
        "sep": "",
        "w": "",
        "c1": "",
        "c2": "",
        "c3": "",
        "c4": "",
        "alpha": ""
    },
    "draw_text_ext_colour": {
        "desc": "",
        "x": "",
        "y": "",
        "string": "",
        "sep": "",
        "w": "",
        "c1": "",
        "c2": "",
        "c3": "",
        "c4": "",
        "alpha": ""
    },
    "draw_text_ext_transformed": {
        "desc": "",
        "x": "",
        "y": "",
        "string": "",
        "sep": "",
        "w": "",
        "xscale": "",
        "yscale": "",
        "angle": ""
    },
    "draw_text_ext_transformed_color": {
        "desc": "",
        "x": "",
        "y": "",
        "string": "",
        "sep": "",
        "w": "",
        "xscale": "",
        "yscale": "",
        "angle": "",
        "c1": "",
        "c2": "",
        "c3": "",
        "c4": "",
        "alpha": ""
    },
    "draw_text_ext_transformed_colour": {
        "desc": "",
        "x": "",
        "y": "",
        "string": "",
        "sep": "",
        "w": "",
        "xscale": "",
        "yscale": "",
        "angle": "",
        "c1": "",
        "c2": "",
        "c3": "",
        "c4": "",
        "alpha": ""
    },
    "draw_text_transformed": {
        "desc": "",
        "x": "",
        "y": "",
        "string": "",
        "xscale": "",
        "yscale": "",
        "angle": ""
    },
    "draw_text_transformed_color": {
        "desc": "",
        "x": "",
        "y": "",
        "string": "",
        "xscale": "",
        "yscale": "",
        "angle": "",
        "c1": "",
        "c2": "",
        "c3": "",
        "c4": "",
        "alpha": ""
    },
    "draw_text_transformed_colour": {
        "desc": "",
        "x": "",
        "y": "",
        "string": "",
        "xscale": "",
        "yscale": "",
        "angle": "",
        "c1": "",
        "c2": "",
        "c3": "",
        "c4": "",
        "alpha": ""
    },
    "draw_triangle": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "x3": "",
        "y3": "",
        "outline": ""
    },
    "draw_triangle_color": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "x3": "",
        "y3": "",
        "col1": "",
        "col2": "",
        "col3": "",
        "outline": ""
    },
    "draw_triangle_colour": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "x3": "",
        "y3": "",
        "col1": "",
        "col2": "",
        "col3": "",
        "outline": ""
    },
    "draw_vertex": {
        "desc": "",
        "x": "",
        "y": ""
    },
    "draw_vertex_color": {
        "desc": "",
        "x": "",
        "y": "",
        "col": "",
        "alpha": ""
    },
    "draw_vertex_colour": {
        "desc": "",
        "x": "",
        "y": "",
        "col": "",
        "alpha": ""
    },
    "draw_vertex_texture": {
        "desc": "",
        "x": "",
        "y": "",
        "xtex": "",
        "ytex": ""
    },
    "draw_vertex_texture_color": {
        "desc": "",
        "x": "",
        "y": "",
        "xtex": "",
        "ytex": "",
        "col": "",
        "alpha": ""
    },
    "draw_vertex_texture_colour": {
        "desc": "",
        "x": "",
        "y": "",
        "xtex": "",
        "ytex": "",
        "col": "",
        "alpha": ""
    },
    "dsin": {
        "desc": "",
        "degree_angle": ""
    },
    "ds_exists": {
        "desc": "",
        "id": "",
        "type": ""
    },
    "ds_grid_add": {
        "desc": "",
        "id": "",
        "x": "",
        "y": "",
        "val": ""
    },
    "ds_grid_add_disk": {
        "desc": "",
        "id": "",
        "xm": "",
        "ym": "",
        "r": "",
        "val": ""
    },
    "ds_grid_add_grid_region": {
        "desc": "",
        "id": "",
        "source": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "xpos": "",
        "ypos": ""
    },
    "ds_grid_add_region": {
        "desc": "",
        "id": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "val": ""
    },
    "ds_grid_clear": {
        "desc": "",
        "id": "",
        "val": ""
    },
    "ds_grid_copy": {
        "desc": "",
        "id": "",
        "source": ""
    },
    "ds_grid_create": {
        "desc": "",
        "w": "",
        "h": ""
    },
    "ds_grid_destroy": {
        "desc": "",
        "id": ""
    },
    "ds_grid_get": {
        "desc": "",
        "id": "",
        "x": "",
        "y": ""
    },
    "ds_grid_get_disk_max": {
        "desc": "",
        "id": "",
        "xm": "",
        "ym": "",
        "r": ""
    },
    "ds_grid_get_disk_mean": {
        "desc": "",
        "id": "",
        "xm": "",
        "ym": "",
        "r": ""
    },
    "ds_grid_get_disk_min": {
        "desc": "",
        "id": "",
        "xm": "",
        "ym": "",
        "r": ""
    },
    "ds_grid_get_disk_sum": {
        "desc": "",
        "id": "",
        "xm": "",
        "ym": "",
        "r": ""
    },
    "ds_grid_get_max": {
        "desc": "",
        "id": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": ""
    },
    "ds_grid_get_mean": {
        "desc": "",
        "id": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": ""
    },
    "ds_grid_get_min": {
        "desc": "",
        "id": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": ""
    },
    "ds_grid_get_sum": {
        "desc": "",
        "id": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": ""
    },
    "ds_grid_height": {
        "desc": "",
        "id": ""
    },
    "ds_grid_multiply": {
        "desc": "",
        "id": "",
        "x": "",
        "y": "",
        "val": ""
    },
    "ds_grid_multiply_disk": {
        "desc": "",
        "id": "",
        "xm": "",
        "ym": "",
        "r": "",
        "val": ""
    },
    "ds_grid_multiply_grid_region": {
        "desc": "",
        "id": "",
        "source": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "xpos": "",
        "ypos": ""
    },
    "ds_grid_multiply_region": {
        "desc": "",
        "id": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "val": ""
    },
    "ds_grid_read": {
        "desc": "",
        "id": "",
        "str": "",
        "more": ""
    },
    "ds_grid_resize": {
        "desc": "",
        "id": "",
        "w": "",
        "h": ""
    },
    "ds_grid_set": {
        "desc": "",
        "id": "",
        "x": "",
        "y": "",
        "val": ""
    },
    "ds_grid_set_disk": {
        "desc": "",
        "id": "",
        "xm": "",
        "ym": "",
        "r": "",
        "val": ""
    },
    "ds_grid_set_grid_region": {
        "desc": "",
        "id": "",
        "source": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "xpos": "",
        "ypos": ""
    },
    "ds_grid_set_region": {
        "desc": "",
        "id": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "val": ""
    },
    "ds_grid_shuffle": {
        "desc": "",
        "id": ""
    },
    "ds_grid_sort": {
        "desc": "",
        "id": "",
        "column": "",
        "ascending": ""
    },
    "ds_grid_value_disk_exists": {
        "desc": "",
        "id": "",
        "xm": "",
        "ym": "",
        "r": "",
        "val": ""
    },
    "ds_grid_value_disk_x": {
        "desc": "",
        "id": "",
        "xm": "",
        "ym": "",
        "r": "",
        "val": ""
    },
    "ds_grid_value_disk_y": {
        "desc": "",
        "id": "",
        "xm": "",
        "ym": "",
        "r": "",
        "val": ""
    },
    "ds_grid_value_exists": {
        "desc": "",
        "id": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "val": ""
    },
    "ds_grid_value_x": {
        "desc": "",
        "id": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "val": ""
    },
    "ds_grid_value_y": {
        "desc": "",
        "id": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "val": ""
    },
    "ds_grid_width": {
        "desc": "",
        "id": ""
    },
    "ds_grid_write": {
        "desc": "",
        "id": ""
    },
    "ds_list_add": {
        "desc": "",
        "id": "",
        "value": "",
        "more": ""
    },
    "ds_list_clear": {
        "desc": "",
        "id": ""
    },
    "ds_list_copy": {
        "desc": "",
        "id": "",
        "source": ""
    },
    "ds_list_create": {
        "desc": ""
    },
    "ds_list_delete": {
        "desc": "",
        "id": "",
        "pos": ""
    },
    "ds_list_destroy": {
        "desc": "",
        "id": ""
    },
    "ds_list_empty": {
        "desc": "",
        "id": ""
    },
    "ds_list_find_index": {
        "desc": "",
        "id": "",
        "value": ""
    },
    "ds_list_find_value": {
        "desc": "",
        "id": "",
        "pos": ""
    },
    "ds_list_insert": {
        "desc": "",
        "id": "",
        "pos": "",
        "value": ""
    },
    "ds_list_mark_as_list": {
        "desc": "",
        "id": "",
        "pos": ""
    },
    "ds_list_mark_as_map": {
        "desc": "",
        "id": "",
        "pos": ""
    },
    "ds_list_read": {
        "desc": "",
        "id": "",
        "str": "",
        "more": ""
    },
    "ds_list_replace": {
        "desc": "",
        "id": "",
        "pos": "",
        "value": ""
    },
    "ds_list_shuffle": {
        "desc": "",
        "id": ""
    },
    "ds_list_size": {
        "desc": "",
        "id": ""
    },
    "ds_list_sort": {
        "desc": "",
        "id": "",
        "ascending": ""
    },
    "ds_list_write": {
        "desc": "",
        "id": ""
    },
    "ds_map_add": {
        "desc": "",
        "id": "",
        "key": "",
        "value": ""
    },
    "ds_map_add_list": {
        "desc": "",
        "id": "",
        "key": "",
        "value": ""
    },
    "ds_map_add_map": {
        "desc": "",
        "id": "",
        "key": "",
        "value": ""
    },
    "ds_map_clear": {
        "desc": "",
        "id": ""
    },
    "ds_map_copy": {
        "desc": "",
        "id": "",
        "source": ""
    },
    "ds_map_create": {
        "desc": ""
    },
    "ds_map_delete": {
        "desc": "",
        "id": "",
        "key": ""
    },
    "ds_map_destroy": {
        "desc": "",
        "id": ""
    },
    "ds_map_empty": {
        "desc": "",
        "id": ""
    },
    "ds_map_exists": {
        "desc": "",
        "id": "",
        "key": ""
    },
    "ds_map_find_first": {
        "desc": "",
        "id": ""
    },
    "ds_map_find_last": {
        "desc": "",
        "id": ""
    },
    "ds_map_find_next": {
        "desc": "",
        "id": "",
        "key": ""
    },
    "ds_map_find_previous": {
        "desc": "",
        "id": "",
        "key": ""
    },
    "ds_map_find_value": {
        "desc": "",
        "id": "",
        "key": ""
    },
    "ds_map_read": {
        "desc": "",
        "id": "",
        "str": "",
        "more": ""
    },
    "ds_map_replace": {
        "desc": "",
        "id": "",
        "key": "",
        "value": ""
    },
    "ds_map_replace_list": {
        "desc": "",
        "id": "",
        "key": "",
        "value": ""
    },
    "ds_map_replace_map": {
        "desc": "",
        "id": "",
        "key": "",
        "value": ""
    },
    "ds_map_secure_load": {
        "desc": "",
        "filename": ""
    },
    "ds_map_secure_load_buffer": {
        "desc": "",
        "buffer": ""
    },
    "ds_map_secure_save": {
        "desc": "",
        "id": "",
        "filename": ""
    },
    "ds_map_secure_save_buffer": {
        "desc": "",
        "id": "",
        "buffer": ""
    },
    "ds_map_size": {
        "desc": "",
        "id": ""
    },
    "ds_map_write": {
        "desc": "",
        "id": ""
    },
    "ds_priority_add": {
        "desc": "",
        "id": "",
        "value": "",
        "priority": ""
    },
    "ds_priority_change_priority": {
        "desc": "",
        "id": "",
        "value": "",
        "priority": ""
    },
    "ds_priority_clear": {
        "desc": "",
        "id": ""
    },
    "ds_priority_copy": {
        "desc": "",
        "id": "",
        "source": ""
    },
    "ds_priority_create": {
        "desc": ""
    },
    "ds_priority_delete_max": {
        "desc": "",
        "id": ""
    },
    "ds_priority_delete_min": {
        "desc": "",
        "id": ""
    },
    "ds_priority_delete_value": {
        "desc": "",
        "id": "",
        "value": ""
    },
    "ds_priority_destroy": {
        "desc": "",
        "id": ""
    },
    "ds_priority_empty": {
        "desc": "",
        "id": ""
    },
    "ds_priority_find_max": {
        "desc": "",
        "id": ""
    },
    "ds_priority_find_min": {
        "desc": "",
        "id": ""
    },
    "ds_priority_find_priority": {
        "desc": "",
        "id": "",
        "value": ""
    },
    "ds_priority_read": {
        "desc": "",
        "id": "",
        "str": "",
        "more": ""
    },
    "ds_priority_size": {
        "desc": "",
        "id": ""
    },
    "ds_priority_write": {
        "desc": "",
        "id": ""
    },
    "ds_queue_clear": {
        "desc": "",
        "id": ""
    },
    "ds_queue_copy": {
        "desc": "",
        "id": "",
        "source": ""
    },
    "ds_queue_create": {
        "desc": ""
    },
    "ds_queue_dequeue": {
        "desc": "",
        "id": ""
    },
    "ds_queue_destroy": {
        "desc": "",
        "id": ""
    },
    "ds_queue_empty": {
        "desc": "",
        "id": ""
    },
    "ds_queue_enqueue": {
        "desc": "",
        "id": "",
        "value": "",
        "more": ""
    },
    "ds_queue_head": {
        "desc": "",
        "id": ""
    },
    "ds_queue_read": {
        "desc": "",
        "id": "",
        "str": "",
        "more": ""
    },
    "ds_queue_size": {
        "desc": "",
        "id": ""
    },
    "ds_queue_tail": {
        "desc": "",
        "id": ""
    },
    "ds_queue_write": {
        "desc": "",
        "id": ""
    },
    "ds_set_precision": {
        "desc": "",
        "prec": ""
    },
    "ds_stack_clear": {
        "desc": "",
        "id": ""
    },
    "ds_stack_copy": {
        "desc": "",
        "id": "",
        "source": ""
    },
    "ds_stack_create": {
        "desc": ""
    },
    "ds_stack_destroy": {
        "desc": "",
        "id": ""
    },
    "ds_stack_empty": {
        "desc": "",
        "id": ""
    },
    "ds_stack_pop": {
        "desc": "",
        "id": ""
    },
    "ds_stack_push": {
        "desc": "",
        "id": "",
        "value": "",
        "more": ""
    },
    "ds_stack_read": {
        "desc": "",
        "id": "",
        "str": "",
        "more": ""
    },
    "ds_stack_size": {
        "desc": "",
        "id": ""
    },
    "ds_stack_top": {
        "desc": "",
        "id": ""
    },
    "ds_stack_write": {
        "desc": "",
        "id": ""
    },
    "dtan": {
        "desc": "",
        "degree_angle": ""
    },
    "effect_clear": {
        "desc": ""
    },
	"effect_create_above": {
        "desc": "",
        "kind": "",
        "x": "",
        "y": "",
        "size": "",
        "colour": ""
    },
	"effect_create_below": {
        "desc": "",
        "kind": "",
        "x": "",
        "y": "",
        "size": "",
        "colour": ""
    },
	"environment_get_variable": {
        "desc": "",
        "name": ""
    },
	"event_inherited": {
        "desc": ""
    },
	"event_perform": {
        "desc": "",
        "type": "",
        "numb": ""
    },
	"event_perform_object": {
        "desc": "",
        "obj": "",
        "type": "",
        "numb": ""
    },
	"event_user": {
        "desc": "",
        "numb": ""
    },
	"exp": {
        "desc": "",
        "x": ""
    },
	"external_call": {
        "desc": "",
        "id": "",
        "arg1": "",
        "arg2": "",
        "more": ""
    },
	"external_define": {
        "desc": "",
        "dll": "",
        "name": "",
        "calltype": "",
        "restype": "",
        "argnumb": "",
        "arg1type": "",
        "arg2type": "",
        "more": ""
    },
	"external_free": {
        "desc": "",
        "dllname": ""
    },
	"facebook_accesstoken": {
        "desc": ""
    },
	"facebook_check_permission": {
        "desc": "",
        "permission": ""
    },
	"facebook_dialog": {
        "desc": "",
        "graph_path": "",
        "ds_map_params": "",
        "ds_map_response": ""
    },
	"facebook_graph_request": {
        "desc": "",
        "graph_path": "",
        "httpMethod": "",
        "ds_map_params": "",
        "ds_map_response": ""
    },
	"facebook_init": {
        "desc": ""
    },
	"facebook_launch_offerwall": {
        "desc": "",
        "product_url": ""
    },
	"facebook_login": {
        "desc": "",
        "ds_list_of_permissions": "",
        "ios_login_type": ""
    },
	"facebook_logout": {
        "desc": ""
    },
	"facebook_post_message": {
        "desc": "",
        "title": "",
        "caption": "",
        "message": "",
        "picture_url": "",
        "redirect_url": "",
        "actionname": "",
        "action_url": ""
    },
	"facebook_request_publish_permissions": {
        "desc": "",
        "ds_list_permissions": ""
    },
	"facebook_request_read_permissions": {
        "desc": "",
        "ds_list_permissions": ""
    },
	"facebook_send_invite": {
        "desc": "",
        "title": "",
        "message": "",
        "picture_url": "",
        "redirect_url": "",
        "ds_map_response": ""
    },
	"facebook_status": {
        "desc": ""
    },
	"facebook_user_id": {
        "desc": ""
    },
	"filename_change_ext": {
        "desc": "",
        "fname": "",
        "newext": ""
    },
	"filename_dir": {
        "desc": "",
        "fname": ""
    },
	"filename_drive": {
        "desc": "",
        "fname": ""
    },
	"filename_ext": {
        "desc": "",
        "fname": ""
    },
	"filename_name": {
        "desc": "",
        "fname": ""
    },
	"filename_path": {
        "desc": "",
        "fname": ""
    },
	"file_attributes": {
        "desc": "",
        "fname": "",
        "attr": ""
    },
	"file_bin_close": {
        "desc": "",
        "binfile": ""
    },
	"file_bin_open": {
        "desc": "",
        "fname": "",
        "mode": ""
    },
	"file_bin_position": {
        "desc": "",
        "binfile": ""
    },
	"file_bin_read_byte": {
        "desc": "",
        "binfile": ""
    },
	"file_bin_rewrite": {
        "desc": "",
        "binfile": ""
    },
	"file_bin_seek": {
        "desc": "",
        "binfile": "",
        "pos": ""
    },
	"file_bin_size": {
        "desc": "",
        "binfile": ""
    },
	"file_bin_write_byte": {
        "desc": "",
        "binfile": "",
        "byte": ""
    },
	"file_copy": {
        "desc": "",
        "fname": "",
        "newname": ""
    },
	"file_delete": {
        "desc": "",
        "fname": ""
    },
	"file_exists": {
        "desc": "",
        "fname": ""
    },
	"file_find_close": {
        "desc": ""
    },
	"file_find_first": {
        "desc": "",
        "mask": "",
        "attr": ""
    },
	"file_find_next": {
        "desc": ""
    },
	"file_rename": {
        "desc": "",
        "oldname": "",
        "newname": ""
    },
	"file_text_close": {
        "desc": "",
        "file": ""
    },
	"file_text_eof": {
        "desc": "",
        "file": ""
    },
	"file_text_eoln": {
        "desc": "",
        "file": ""
    },
	"file_text_open_append": {
        "desc": "",
        "fname": ""
    },
	"file_text_open_from_string": {
        "desc": "",
        "content": ""
    },
	"file_text_open_read": {
        "desc": "",
        "fname": ""
    },
	"file_text_open_write": {
        "desc": "",
        "fname": ""
    },
	"file_text_readln": {
        "desc": "",
        "file": ""
    },
	"file_text_read_real": {
        "desc": "",
        "file": ""
    },
	"file_text_read_string": {
        "desc": "",
        "file": ""
    },
	"file_text_writeln": {
        "desc": "",
        "file": ""
    },
	"file_text_write_real": {
        "desc": "",
        "file": "",
        "val": ""
    },
	"file_text_write_string": {
        "desc": "",
        "file": "",
        "str": ""
    },
	"floor": {
        "desc": "",
        "x": ""
    },
	"font_add": {
        "desc": "",
        "name": "",
        "size": "",
        "bold": "",
        "italic": "",
        "first": "",
        "last": ""
    },
	"font_add_sprite": {
        "desc": "",
        "spr": "",
        "first": "",
        "prop": "",
        "sep": ""
    },
	"font_add_sprite_ext": {
        "desc": "",
        "spr": "",
        "mapstring": "",
        "prop": "",
        "sep": ""
    },
	"font_delete": {
        "desc": "",
        "ind": ""
    },
	"font_exists": {
        "desc": "",
        "ind": ""
    },
	"font_get_bold": {
        "desc": "",
        "ind": ""
    },
	"font_get_first": {
        "desc": "",
        "ind": ""
    },
	"font_get_fontname": {
        "desc": "",
        "ind": ""
    },
	"font_get_italic": {
        "desc": "",
        "ind": ""
    },
	"font_get_last": {
        "desc": "",
        "ind": ""
    },
	"font_get_name": {
        "desc": "",
        "ind": ""
    },
	"font_get_size": {
        "desc": "",
        "ind": ""
    },
	"font_get_texture": {
        "desc": "",
        "ind": ""
    },
	"font_get_uvs": {
        "desc": "",
        "ind": ""
    },
	"font_replace": {
        "desc": "",
        "ind": "",
        "name": "",
        "size": "",
        "bold": "",
        "italic": "",
        "first": "",
        "last": ""
    },
	"font_replace_sprite": {
        "desc": "",
        "ind": "",
        "spr": "",
        "first": "",
        "prop": "",
        "sep": ""
    },
	"font_replace_sprite_ext": {
        "desc": "",
        "font": "",
        "spr": "",
        "string_map": "",
        "prop": "",
        "sep": ""
    },
	"font_set_cache_size": {
        "desc": "",
        "font": "",
        "max": ""
    },
	"frac": {
        "desc": "",
        "x": ""
    },
	"gamepad_axis_count": {
        "desc": "",
        "axis": ""
    },
	"gamepad_axis_value": {
        "desc": "",
        "device": "",
        "axisIndex": ""
    },
	"gamepad_button_check": {
        "desc": "",
        "device": "",
        "buttonIndex": ""
    },
	"gamepad_button_check_pressed": {
        "desc": "",
        "device": "",
        "buttonIndex": ""
    },
	"gamepad_button_check_released": {
        "desc": "",
        "device": "",
        "buttonIndex": ""
    },
	"gamepad_button_count": {
        "desc": "",
        "device": ""
    },
	"gamepad_button_value": {
        "desc": "",
        "device": "",
        "buttonIndex": ""
    },
	"gamepad_get_axis_deadzone": {
        "desc": "",
        "device": ""
    },
	"gamepad_get_button_threshold": {
        "desc": "",
        "device": ""
    },
	"gamepad_get_description": {
        "desc": "",
        "device": ""
    },
	"gamepad_get_device_count": {
        "desc": ""
    },
	"gamepad_is_connected": {
        "desc": "",
        "device": ""
    },
	"gamepad_is_supported": {
        "desc": ""
    },
	"gamepad_set_axis_deadzone": {
        "desc": "",
        "device": "",
        "deadzone": ""
    },
	"gamepad_set_button_threshold": {
        "desc": "",
        "device": "",
        "threshold": ""
    },
	"gamepad_set_color": {
        "desc": "",
        "index": "",
        "color": ""
    },
	"gamepad_set_colour": {
        "desc": "",
        "index": "",
        "colour": ""
    },
	"gamepad_set_vibration": {
        "desc": "",
        "device": "",
        "leftMotorSpeed": "",
        "rightMotorSpeed": ""
    },
	"game_end": {
        "desc": ""
    },
	"game_load": {
        "desc": "",
        "filename": ""
    },
	"game_load_buffer": {
        "desc": "",
        "buffer": ""
    },
	"game_restart": {
        "desc": ""
    },
	"game_save": {
        "desc": "",
        "filename": ""
    },
	"game_save_buffer": {
        "desc": "",
        "buffer": ""
    },
	"get_integer": {
        "desc": "",
        "str": "",
        "def": ""
    },
	"get_integer_async": {
        "desc": "",
        "str": "",
        "def": ""
    },
	"get_login_async": {
        "desc": "",
        "username": "",
        "password": ""
    },
	"get_open_filename": {
        "desc": "",
        "filter": "",
        "fname": ""
    },
	"get_open_filename_ext": {
        "desc": "",
        "filter": "",
        "fname": "",
        "dir": "",
        "title": ""
    },
	"get_save_filename": {
        "desc": "",
        "filter": "",
        "fname": ""
    },
	"get_save_filename_ext": {
        "desc": "",
        "filter": "",
        "fname": "",
        "dir": "",
        "title": ""
    },
	"get_string": {
        "desc": "",
        "str": "",
        "def": ""
    },
	"get_string_async": {
        "desc": "",
        "str": "",
        "def": ""
    },
	"get_timer": {
        "desc": ""
    },
	"gml_pragma": {
        "desc": "",
        "setting": "",
        "more": ""
    },
	"gml_release_mode": {
        "desc": "",
        "enable": ""
    },
	"highscore_add": {
        "desc": "",
        "str": "",
        "numb": ""
    },
	"highscore_clear": {
        "desc": ""
    },
	"highscore_name": {
        "desc": "",
        "place": ""
    },
	"highscore_value": {
        "desc": "",
        "place": ""
    },
	"http_get": {
        "desc": "",
        "url": ""
    },
	"http_get_file": {
        "desc": "",
        "url": "",
        "dest": ""
    },
	"http_post_string": {
        "desc": "",
        "url": "",
        "string": ""
    },
	"http_request": {
        "desc": "",
        "url": "",
        "method": "",
        "header_map": "",
        "body": ""
    },
	"iap_acquire": {
        "desc": "",
        "product_id": "",
        "payload": ""
    },
	"iap_activate": {
        "desc": "",
        "ds_list": ""
    },
	"iap_consume": {
        "desc": "",
        "product_id": ""
    },
	"iap_enumerate_products": {
        "desc": "",
        "ds_list": ""
    },
	"iap_is_purchased": {
        "desc": "",
        "product_id": ""
    },
	"iap_product_details": {
        "desc": "",
        "product_id": "",
        "ds_map": ""
    },
	"iap_purchase_details": {
        "desc": "",
        "product_id": "",
        "ds_map": ""
    },
	"iap_restore_all": {
        "desc": ""
    },
	"iap_status": {
        "desc": ""
    },
	"ini_close": {
        "desc": ""
    },
	"ini_key_delete": {
        "desc": "",
        "section": "",
        "key": ""
    },
	"ini_key_exists": {
        "desc": "",
        "section": "",
        "key": ""
    },
	"ini_open": {
        "desc": "",
        "fname": ""
    },
	"ini_open_from_string": {
        "desc": "",
        "content": ""
    },
	"ini_read_real": {
        "desc": "",
        "section": "",
        "key": "",
        "default": ""
    },
	"ini_read_string": {
        "desc": "",
        "section": "",
        "key": "",
        "default": ""
    },
	"ini_section_delete": {
        "desc": "",
        "section": ""
    },
	"ini_section_exists": {
        "desc": "",
        "section": ""
    },
	"ini_write_real": {
        "desc": "",
        "section": "",
        "key": "",
        "value": ""
    },
	"ini_write_string": {
        "desc": "",
        "section": "",
        "key": "",
        "str": ""
    },
	"instance_activate_all": {
        "desc": ""
    },
	"instance_activate_object": {
        "desc": "",
        "obj": ""
    },
	"instance_activate_region": {
        "desc": "",
        "left": "",
        "top": "",
        "width": "",
        "height": "",
        "inside": ""
    },
	"instance_change": {
        "desc": "",
        "obj": "",
        "performevents": ""
    },
	"instance_copy": {
        "desc": "",
        "performevents": ""
    },
	"instance_create": {
        "desc": "",
        "x": "",
        "y": "",
        "obj": ""
    },
	"instance_deactivate_all": {
        "desc": "",
        "notme": ""
    },
	"instance_deactivate_object": {
        "desc": "",
        "obj": ""
    },
	"instance_deactivate_region": {
        "desc": "",
        "left": "",
        "top": "",
        "width": "",
        "height": "",
        "inside": "",
        "notme": ""
    },
	"instance_destroy": {
        "desc": "",
        "id": "",
        "execute_event_flag": ""
    },
	"instance_exists": {
        "desc": "",
        "obj": ""
    },
	"instance_find": {
        "desc": "",
        "obj": "",
        "n": ""
    },
	"instance_furthest": {
        "desc": "",
        "x": "",
        "y": "",
        "obj": ""
    },
	"instance_nearest": {
        "desc": "",
        "x": "",
        "y": "",
        "obj": ""
    },
	"instance_number": {
        "desc": "",
        "obj": ""
    },
	"instance_place": {
        "desc": "",
        "x": "",
        "y": "",
        "obj": ""
    },
	"instance_position": {
        "desc": "",
        "x": "",
        "y": "",
        "obj": ""
    },
	"int64": {
        "desc": "",
        "val": ""
    },
	"io_clear": {
        "desc": ""
    },
	"irandom": {
        "desc": "",
        "x": ""
    },
	"irandom_old": {
        "desc": "",
        "x": ""
    },
	"irandom_range": {
        "desc": "",
        "x1": "",
        "x2": ""
    },
	"irandom_range_old": {
        "desc": "",
        "x1": "",
        "x2": ""
    },
	"is_array": {
        "desc": "",
        "val": ""
    },
	"is_bool": {
        "desc": "",
        "val": ""
    },
	"is_int32": {
        "desc": "",
        "val": ""
    },
	"is_int64": {
        "desc": "",
        "val": ""
    },
	"is_matrix": {
        "desc": "",
        "val": ""
    },
	"is_ptr": {
        "desc": "",
        "val": ""
    },
	"is_real": {
        "desc": "",
        "val": ""
    },
	"is_string": {
        "desc": "",
        "val": ""
    },
	"is_undefined": {
        "desc": "",
        "val": ""
    },
	"is_vec3": {
        "desc": "",
        "val": ""
    },
	"is_vec4": {
        "desc": "",
        "val": ""
    },
	"joystick_axes": {
        "desc": "",
        "id": ""
    },
	"joystick_buttons": {
        "desc": "",
        "id": ""
    },
	"joystick_check_button": {
        "desc": "",
        "id": "",
        "button": ""
    },
	"joystick_direction": {
        "desc": "",
        "id": ""
    },
	"joystick_exists": {
        "desc": "",
        "id": ""
    },
	"joystick_has_pov": {
        "desc": "",
        "id": ""
    },
	"joystick_name": {
        "desc": "",
        "id": ""
    },
	"joystick_pov": {
        "desc": "",
        "id": ""
    },
	"joystick_rpos": {
        "desc": "",
        "id": ""
    },
	"joystick_upos": {
        "desc": "",
        "id": ""
    },
	"joystick_vpos": {
        "desc": "",
        "id": ""
    },
	"joystick_xpos": {
        "desc": "",
        "id": ""
    },
	"joystick_ypos": {
        "desc": "",
        "id": ""
    },
	"joystick_zpos": {
        "desc": "",
        "id": ""
    },
	"json_decode": {
        "desc": "",
        "string": ""
    },
	"json_encode": {
        "desc": "",
        "ds_map": ""
    },
	"keyboard_check": {
        "desc": "",
        "key": ""
    },
	"keyboard_check_direct": {
        "desc": "",
        "key": ""
    },
	"keyboard_check_pressed": {
        "desc": "",
        "key": ""
    },
	"keyboard_check_released": {
        "desc": "",
        "key": ""
    },
	"keyboard_clear": {
        "desc": "",
        "key": ""
    },
	"keyboard_get_map": {
        "desc": "",
        "key": ""
    },
	"keyboard_get_numlock": {
        "desc": ""
    },
	"keyboard_key_press": {
        "desc": "",
        "key": ""
    },
	"keyboard_key_release": {
        "desc": "",
        "key": ""
    },
	"keyboard_set_map": {
        "desc": "",
        "key1": "",
        "key2": ""
    },
	"keyboard_set_numlock": {
        "desc": "",
        "bool": ""
    },
	"keyboard_unset_map": {
        "desc": ""
    },
	"lengthdir_x": {
        "desc": "",
        "len": "",
        "dir": ""
    },
	"lengthdir_y": {
        "desc": "",
        "len": "",
        "dir": ""
    },
	"lerp": {
        "desc": "",
        "val1": "",
        "val2": "",
        "amount": ""
    },
	"ln": {
        "desc": "",
        "x": ""
    },
	"log10": {
        "desc": "",
        "x": ""
    },
	"log2": {
        "desc": "",
        "x": ""
    },
	"logn": {
        "desc": "",
        "n": "",
        "x": ""
    },
	"make_color_hsv": {
        "desc": "",
        "hue": "",
        "saturation": "",
        "value": ""
    },
	"make_color_rgb": {
        "desc": "",
        "red": "",
        "green": "",
        "blue": ""
    },
	"make_colour_hsv": {
        "desc": "",
        "hue": "",
        "saturation": "",
        "value": ""
    },
	"make_colour_rgb": {
        "desc": "",
        "red": "",
        "green": "",
        "blue": ""
    },
	"math_get_epsilon": {
        "desc": ""
    },
	"math_set_epsilon": {
        "desc": "",
        "new_epsilon": ""
    },
	"matrix_build": {
        "desc": "",
        "x": "",
        "y": "",
        "z": "",
        "xrotation": "",
        "yrotation": "",
        "zrotation": "",
        "xscale": "",
        "yscale": "",
        "zscale": ""
    },
	"matrix_get": {
        "desc": "",
        "type": ""
    },
	"matrix_multiply": {
        "desc": "",
        "matrix": ""
    },
	"matrix_set": {
        "desc": "",
        "type": "",
        "matrix": ""
    },
	"max": {
        "desc": "",
        "x1": "",
        "x2": "",
        "x3": "",
        "more": ""
    },
	"md5_file": {
        "desc": "",
        "fname": ""
    },
	"md5_string_unicode": {
        "desc": "",
        "string": ""
    },
	"md5_string_utf8": {
        "desc": "",
        "string": ""
    },
	"mean": {
        "desc": "",
        "x1": "",
        "x2": "",
        "x3": "",
        "more": ""
    },
	"median": {
        "desc": "",
        "x1": "",
        "x2": "",
        "x3": "",
        "more": ""
    },
	"merge_color": {
        "desc": "",
        "col1": "",
        "col2": "",
        "amount": ""
    },
	"min": {
        "desc": "",
        "x1": "",
        "x2": "",
        "x3": "",
        "more": ""
    },
	"motion_add": {
        "desc": "",
        "dir": "",
        "speed": ""
    },
	"motion_set": {
        "desc": "",
        "dir": "",
        "speed": ""
    },
	"mouse_check_button": {
        "desc": "",
        "button": ""
    },
	"mouse_check_button_pressed": {
        "desc": "",
        "button": ""
    },
	"mouse_check_button_released": {
        "desc": "",
        "button": ""
    },
	"mouse_clear": {
        "desc": "",
        "button": ""
    },
	"mouse_wheel_down": {
        "desc": ""
    },
	"mouse_wheel_up": {
        "desc": ""
    },
	"move_bounce_all": {
        "desc": "",
        "advanced": ""
    },
	"move_bounce_solid": {
        "desc": "",
        "advanced": ""
    },
	"move_contact_all": {
        "desc": "",
        "dir": "",
        "maxdist": ""
    },
	"move_contact_solid": {
        "desc": "",
        "dir": "",
        "maxdist": ""
    },
	"move_outside_all": {
        "desc": "",
        "dir": "",
        "maxdist": ""
    },
	"move_outside_solid": {
        "desc": "",
        "dir": "",
        "maxdist": ""
    },
	"move_random": {
        "desc": "",
        "hsnap": "",
        "vsnap": ""
    },
	"move_snap": {
        "desc": "",
        "hsnap": "",
        "vsnap": ""
    },
	"move_towards_point": {
        "desc": "",
        "x": "",
        "y": "",
        "sp": ""
    },
	"move_wrap": {
        "desc": "",
        "hor": "",
        "vert": "",
        "margin": ""
    },
	"mp_grid_add_cell": {
        "desc": "",
        "id": "",
        "h": "",
        "v": ""
    },
	"mp_grid_add_instances": {
        "desc": "",
        "id": "",
        "obj": "",
        "prec": ""
    },
	"mp_grid_add_rectangle": {
        "desc": "",
        "id": "",
        "left": "",
        "top": "",
        "right": "",
        "bottom": ""
    },
	"mp_grid_clear_all": {
        "desc": "",
        "id": ""
    },
	"mp_grid_clear_cell": {
        "desc": "",
        "id": "",
        "h": "",
        "v": ""
    },
	"mp_grid_clear_rectangle": {
        "desc": "",
        "id": "",
        "left": "",
        "top": "",
        "right": "",
        "bottom": ""
    },
	"mp_grid_create": {
        "desc": "",
        "left": "",
        "top": "",
        "hcells": "",
        "vcells": "",
        "cellwidth": "",
        "cellheight": ""
    },
	"mp_grid_destroy": {
        "desc": "",
        "id": ""
    },
	"mp_grid_draw": {
        "desc": "",
        "id": ""
    },
	"mp_grid_get_cell": {
        "desc": "",
        "id": "",
        "h": "",
        "v": ""
    },
	"mp_grid_path": {
        "desc": "",
        "id": "",
        "path": "",
        "xstart": "",
        "ystart": "",
        "xgoal": "",
        "ygoal": "",
        "allowdiag": ""
    },
	"mp_grid_to_ds_grid": {
        "desc": "",
        "src": "",
        "dest": ""
    },
	"mp_linear_path": {
        "desc": "",
        "path": "",
        "xg": "",
        "yg": "",
        "stepsize": "",
        "checkall": ""
    },
	"mp_linear_path_object": {
        "desc": "",
        "path": "",
        "xg": "",
        "yg": "",
        "stepsize": "",
        "obj": ""
    },
	"mp_linear_step": {
        "desc": "",
        "x": "",
        "y": "",
        "speed": "",
        "checkall": ""
    },
	"mp_linear_step_object": {
        "desc": "",
        "x": "",
        "y": "",
        "speed": "",
        "obj": ""
    },
	"mp_potential_path": {
        "desc": "",
        "path": "",
        "xg": "",
        "yg": "",
        "stepsize": "",
        "factor": "",
        "checkall": ""
    },
	"mp_potential_path_object": {
        "desc": "",
        "path": "",
        "xg": "",
        "yg": "",
        "stepsize": "",
        "factor": "",
        "obj": ""
    },
	"mp_potential_settings": {
        "desc": "",
        "maxrot": "",
        "rotstep": "",
        "ahead": "",
        "onspot": ""
    },
	"mp_potential_step": {
        "desc": "",
        "x": "",
        "y": "",
        "speed": "",
        "checkall": ""
    },
	"mp_potential_step_object": {
        "desc": "",
        "x": "",
        "y": "",
        "speed": "",
        "obj": ""
    },
	"network_connect": {
        "desc": "",
        "socket": "",
        "url": "",
        "port": ""
    },
	"network_connect_raw": {
        "desc": "",
        "socket": "",
        "url": "",
        "port": ""
    },
	"network_create_server": {
        "desc": "",
        "type": "",
        "port": "",
        "maxclients": ""
    },
	"network_create_server_raw": {
        "desc": "",
        "type": "",
        "port": "",
        "maxclients": ""
    },
	"network_create_socket": {
        "desc": "",
        "type": ""
    },
	"network_create_socket_ext": {
        "desc": "",
        "type": "",
        "port": ""
    },
	"network_destroy": {
        "desc": "",
        "socket": ""
    },
	"network_resolve": {
        "desc": "",
        "url": ""
    },
	"network_send_broadcast": {
        "desc": "",
        "socket": "",
        "port": "",
        "bufferid": "",
        "size": ""
    },
	"network_send_packet": {
        "desc": "",
        "socket": "",
        "bufferid": "",
        "size": ""
    },
	"network_send_raw": {
        "desc": "",
        "socket": "",
        "bufferid": "",
        "size": ""
    },
	"network_send_udp": {
        "desc": "",
        "socket": "",
        "URL": "",
        "port": "",
        "data": "",
        "size": ""
    },
	"network_send_udp_raw": {
        "desc": "",
        "socket": "",
        "URL": "",
        "port": "",
        "data": "",
        "size": ""
    },
	"network_set_config": {
        "desc": "",
        "parameter": "",
        "value": ""
    },
	"network_set_timeout": {
        "desc": "",
        "socket": "",
        "read": "",
        "write": ""
    },
	"object_exists": {
        "desc": "",
        "ind": ""
    },
	"object_get_mask": {
        "desc": "",
        "ind": ""
    },
	"object_get_name": {
        "desc": "",
        "ind": ""
    },
	"object_get_parent": {
        "desc": "",
        "ind": ""
    },
	"object_get_persistent": {
        "desc": "",
        "ind": ""
    },
	"object_get_physics": {
        "desc": "",
        "ind": ""
    },
	"object_get_solid": {
        "desc": "",
        "ind": ""
    },
	"object_get_sprite": {
        "desc": "",
        "ind": ""
    },
	"object_get_visible": {
        "desc": "",
        "ind": ""
    },
	"object_is_ancestor": {
        "desc": "",
        "ind_child": "",
        "ind_parent": ""
    },
	"object_set_mask": {
        "desc": "",
        "ind": "",
        "spr": ""
    },
	"object_set_parent": {
        "desc": "",
        "ind": "",
        "obj": ""
    },
	"object_set_persistent": {
        "desc": "",
        "ind": "",
        "pers": ""
    },
	"object_set_solid": {
        "desc": "",
        "ind": "",
        "soild": ""
    },
	"object_set_sprite": {
        "desc": "",
        "ind": "",
        "spr": ""
    },
	"object_set_visible": {
        "desc": "",
        "ind": "",
        "vis": ""
    },
	"ord": {
        "desc": "",
        "char": ""
    },
	"os_get_config": {
        "desc": ""
    },
	"os_get_info": {
        "desc": ""
    },
	"os_get_language": {
        "desc": ""
    },
	"os_get_region": {
        "desc": ""
    },
	"os_is_network_connected": {
        "desc": ""
    },
	"os_is_paused": {
        "desc": ""
    },
	"os_lock_orientation": {
        "desc": "",
        "flag": ""
    },
	"os_powersave_enable": {
        "desc": "",
        "enable": ""
    },
	"parameter_count": {
        "desc": ""
    },
	"parameter_string": {
        "desc": "",
        "n": ""
    },
	"part_emitter_burst": {
        "desc": "",
        "ps": "",
        "ind": "",
        "parttype": "",
        "number": ""
    },
	"part_emitter_clear": {
        "desc": "",
        "ps": "",
        "ind": ""
    },
	"part_emitter_create": {
        "desc": "",
        "ps": ""
    },
	"part_emitter_destroy": {
        "desc": "",
        "ps": "",
        "ind": ""
    },
	"part_emitter_destroy_all": {
        "desc": "",
        "ps": ""
    },
	"part_emitter_exists": {
        "desc": "",
        "ps": "",
        "ind": ""
    },
	"part_emitter_region": {
        "desc": "",
        "ps": "",
        "ind": "",
        "xmin": "",
        "xmax": "",
        "ymin": "",
        "ymax": "",
        "shape": "",
        "distribution": ""
    },
	"part_emitter_stream": {
        "desc": "",
        "ps": "",
        "ind": "",
        "parttype": "",
        "number": ""
    },
	"part_particles_clear": {
        "desc": "",
        "ind": ""
    },
	"part_particles_count": {
        "desc": "",
        "ind": ""
    },
	"part_particles_create": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "parttype": "",
        "number": ""
    },
	"part_particles_create_color": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "parttype": "",
        "colour": "",
        "number": ""
    },
	"part_particles_create_colour": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "parttype": "",
        "colour": "",
        "number": ""
    },
	"part_system_automatic_draw": {
        "desc": "",
        "ind": "",
        "draw": ""
    },
	"part_system_automatic_update": {
        "desc": "",
        "ind": "",
        "automatic": ""
    },
	"part_system_clear": {
        "desc": "",
        "ind": ""
    },
	"part_system_create": {
        "desc": ""
    },
	"part_system_depth": {
        "desc": "",
        "ind": "",
        "depth": ""
    },
	"part_system_destroy": {
        "desc": "",
        "ind": ""
    },
	"part_system_drawit": {
        "desc": "",
        "ind": ""
    },
	"part_system_draw_order": {
        "desc": "",
        "ind": "",
        "oldtonew": ""
    },
	"part_system_exists": {
        "desc": "",
        "ind": ""
    },
	"part_system_position": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": ""
    },
	"part_system_update": {
        "desc": "",
        "ind": ""
    },
	"part_type_alpha1": {
        "desc": "",
        "ind": "",
        "alpha1": ""
    },
	"part_type_alpha2": {
        "desc": "",
        "ind": "",
        "alpha1": "",
        "alpha2": ""
    },
	"part_type_alpha3": {
        "desc": "",
        "ind": "",
        "alpha1": "",
        "alpha2": "",
        "alpha3": ""
    },
	"part_type_blend": {
        "desc": "",
        "ind": "",
        "additive": ""
    },
	"part_type_clear": {
        "desc": "",
        "ind": ""
    },
	"part_type_color1": {
        "desc": "",
        "ind": "",
        "color1": ""
    },
	"part_type_color2": {
        "desc": "",
        "ind": "",
        "color1": "",
        "color2": ""
    },
	"part_type_color3": {
        "desc": "",
        "ind": "",
        "color1": "",
        "color2": "",
        "color3": ""
    },
	"part_type_color_hsv": {
        "desc": "",
        "ind": "",
        "hmin": "",
        "hmax": "",
        "smin": "",
        "smax": "",
        "vmin": "",
        "vmax": ""
    },
	"part_type_color_mix": {
        "desc": "",
        "ind": "",
        "color1": "",
        "color2": ""
    },
	"part_type_color_rgb": {
        "desc": "",
        "ind": "",
        "rmin": "",
        "rmax": "",
        "gmin": "",
        "gmax": "",
        "bmin": "",
        "bmax": ""
    },
	"part_type_colour1": {
        "desc": "",
        "ind": "",
        "colour1": ""
    },
	"part_type_colour2": {
        "desc": "",
        "ind": "",
        "colour1": "",
        "colour2": ""
    },
	"part_type_colour3": {
        "desc": "",
        "ind": "",
        "colour1": "",
        "colour2": "",
        "colour3": ""
    },
	"part_type_colour_hsv": {
        "desc": "",
        "ind": "",
        "hmin": "",
        "hmax": "",
        "smin": "",
        "smax": "",
        "vmin": "",
        "vmax": ""
    },
	"part_type_colour_mix": {
        "desc": "",
        "ind": "",
        "colour1": "",
        "colour2": ""
    },
	"part_type_colour_rgb": {
        "desc": "",
        "ind": "",
        "rmin": "",
        "rmax": "",
        "gmin": "",
        "gmax": "",
        "bmin": "",
        "bmax": ""
    },
	"part_type_create": {
        "desc": ""
    },
	"part_type_death": {
        "desc": "",
        "ind": "",
        "death_number": "",
        "death_type": ""
    },
	"part_type_destroy": {
        "desc": "",
        "ind": ""
    },
	"part_type_direction": {
        "desc": "",
        "ind": "",
        "dir_min": "",
        "dir_max": "",
        "dir_incr": "",
        "dir_wiggle": ""
    },
	"part_type_exists": {
        "desc": "",
        "ind": ""
    },
	"part_type_gravity": {
        "desc": "",
        "ind": "",
        "grav_amount": "",
        "grav_dir": ""
    },
	"part_type_life": {
        "desc": "",
        "ind": "",
        "life_min": "",
        "life_max": ""
    },
	"part_type_orientation": {
        "desc": "",
        "ind": "",
        "ang_min": "",
        "ang_max": "",
        "ang_incr": "",
        "ang_wiggle": "",
        "ang_relative": ""
    },
	"part_type_scale": {
        "desc": "",
        "ind": "",
        "xscale": "",
        "yscale": ""
    },
	"part_type_shape": {
        "desc": "",
        "ind": "",
        "shape": ""
    },
	"part_type_size": {
        "desc": "",
        "ind": "",
        "size_min": "",
        "size_max": "",
        "size_incr": "",
        "size_wiggle": ""
    },
	"part_type_speed": {
        "desc": "",
        "ind": "",
        "speed_min": "",
        "speed_max": "",
        "speed_incr": "",
        "speed_wiggle": ""
    },
	"part_type_sprite": {
        "desc": "",
        "ind": "",
        "sprite": "",
        "animat": "",
        "stretch": "",
        "random": ""
    },
	"part_type_step": {
        "desc": "",
        "ind": "",
        "step_number": "",
        "step_type": ""
    },
	"path_add": {
        "desc": ""
    },
	"path_add_point": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "speed": ""
    },
	"path_append": {
        "desc": "",
        "ind": "",
        "path": ""
    },
	"path_assign": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "speed": ""
    },
	"path_change_point": {
        "desc": "",
        "ind": "",
        "n": "",
        "x": "",
        "y": "",
        "speed": ""
    },
	"path_clear_points": {
        "desc": "",
        "ind": ""
    },
	"path_delete": {
        "desc": "",
        "ind": ""
    },
	"path_delete_point": {
        "desc": "",
        "ind": "",
        "n": ""
    },
	"path_duplicate": {
        "desc": "",
        "ind": ""
    },
	"path_end": {
        "desc": ""
    },
	"path_exists": {
        "desc": "",
        "ind": ""
    },
	"path_flip": {
        "desc": "",
        "ind": ""
    },
	"path_get_closed": {
        "desc": "",
        "ind": ""
    },
	"path_get_kind": {
        "desc": "",
        "ind": ""
    },
	"path_get_length": {
        "desc": "",
        "ind": ""
    },
	"path_get_name": {
        "desc": "",
        "ind": ""
    },
	"path_get_number": {
        "desc": "",
        "ind": ""
    },
	"path_get_point_speed": {
        "desc": "",
        "ind": "",
        "n": ""
    },
	"path_get_point_x": {
        "desc": "",
        "ind": "",
        "n": ""
    },
	"path_get_point_y": {
        "desc": "",
        "ind": "",
        "n": ""
    },
	"path_get_precision": {
        "desc": "",
        "ind": ""
    },
	"path_get_speed": {
        "desc": "",
        "ind": "",
        "pos": ""
    },
	"path_get_time": {
        "desc": "",
        "ind": "",
        "speed": ""
    },
	"path_get_x": {
        "desc": "",
        "ind": "",
        "pos": ""
    },
	"path_get_y": {
        "desc": "",
        "ind": "",
        "pos": ""
    },
	"path_insert_point": {
        "desc": "",
        "ind": "",
        "n": "",
        "x": "",
        "y": "",
        "speed": ""
    },
	"path_mirror": {
        "desc": "",
        "ind": ""
    },
	"path_rescale": {
        "desc": "",
        "ind": "",
        "xscale": "",
        "yscale": ""
    },
	"path_reverse": {
        "desc": "",
        "ind": ""
    },
	"path_rotate": {
        "desc": "",
        "ind": "",
        "angle": ""
    },
	"path_set_closed": {
        "desc": "",
        "ind": "",
        "closed": ""
    },
	"path_set_kind": {
        "desc": "",
        "ind": "",
        "kind": ""
    },
	"path_set_precision": {
        "desc": "",
        "ind": "",
        "prec": ""
    },
	"path_shift": {
        "desc": "",
        "ind": "",
        "xshift": "",
        "yshift": ""
    },
	"path_start": {
        "desc": "",
        "path": "",
        "speed": "",
        "endaction": "",
        "absolute": ""
    },
	"physics_apply_angular_impulse": {
        "desc": "",
        "impulse": ""
    },
	"physics_apply_force": {
        "desc": "",
        "xpos": "",
        "ypos": "",
        "xforce": "",
        "yforce": ""
    },
	"physics_apply_impulse": {
        "desc": "",
        "xpos": "",
        "ypos": "",
        "ximpulse": "",
        "yimpulse": ""
    },
	"physics_apply_local_force": {
        "desc": "",
        "xlocal": "",
        "ylocal": "",
        "xforce_local": "",
        "yforce_local": ""
    },
	"physics_apply_local_impulse": {
        "desc": "",
        "xlocal": "",
        "ylocal": "",
        "ximpulse_local": "",
        "yimpulse_local": ""
    },
	"physics_apply_torque": {
        "desc": "",
        "torque": ""
    },
	"physics_draw_debug": {
        "desc": ""
    },
	"physics_fixture_add_point": {
        "desc": "",
        "fixture": "",
        "local_x": "",
        "local_y": ""
    },
	"physics_fixture_bind": {
        "desc": "",
        "fixture": "",
        "obj": ""
    },
	"physics_fixture_bind_ext": {
        "desc": "",
        "fixture": "",
        "obj": "",
        "xo": "",
        "yo": ""
    },
	"physics_fixture_create": {
        "desc": ""
    },
	"physics_fixture_delete": {
        "desc": "",
        "fixture": ""
    },
	"physics_fixture_set_angular_damping": {
        "desc": "",
        "fixture": "",
        "damping": ""
    },
	"physics_fixture_set_awake": {
        "desc": "",
        "fixture": "",
        "flag": ""
    },
	"physics_fixture_set_box_shape": {
        "desc": "",
        "fixture": "",
        "halfWidth": "",
        "halfHeight": ""
    },
	"physics_fixture_set_chain_shape": {
        "desc": "",
        "fixture": "",
        "loop": ""
    },
	"physics_fixture_set_circle_shape": {
        "desc": "",
        "fixture": "",
        "circleRadius": ""
    },
	"physics_fixture_set_collision_group": {
        "desc": "",
        "fixture": "",
        "group": ""
    },
	"physics_fixture_set_density": {
        "desc": "",
        "fixture": "",
        "density": ""
    },
	"physics_fixture_set_edge_shape": {
        "desc": "",
        "fixture": "",
        "local_x1": "",
        "local_y1": "",
        "local_x2": "",
        "local_y2": ""
    },
	"physics_fixture_set_friction": {
        "desc": "",
        "fixture": "",
        "friction": ""
    },
	"physics_fixture_set_kinematic": {
        "desc": "",
        "fixture": ""
    },
	"physics_fixture_set_linear_damping": {
        "desc": "",
        "fixture": "",
        "damping": ""
    },
	"physics_fixture_set_polygon_shape": {
        "desc": "",
        "fixture": ""
    },
	"physics_fixture_set_restitution": {
        "desc": "",
        "fixture": "",
        "restitution": ""
    },
	"physics_fixture_set_sensor": {
        "desc": "",
        "fixture": "",
        "sensorState": ""
    },
	"physics_get_density": {
        "desc": "",
        "fixture": ""
    },
	"physics_get_friction": {
        "desc": "",
        "fixture": ""
    },
	"physics_get_restitution": {
        "desc": "",
        "fixture": ""
    },
	"physics_joint_delete": {
        "desc": "",
        "joint": ""
    },
	"physics_joint_distance_create": {
        "desc": "",
        "inst1": "",
        "inst2": "",
        "anchor_1_x": "",
        "anchor_1_y": "",
        "anchor_2_x": "",
        "anchor_2_y": "",
        "collideinstances": ""
    },
	"physics_joint_enable_motor": {
        "desc": "",
        "joint": "",
        "motorState": ""
    },
	"physics_joint_friction_create": {
        "desc": "",
        "inst1": "",
        "inst2": "",
        "anchor_x": "",
        "anchor_y": "",
        "max_force": "",
        "max_torque": "",
        "collideinstances": ""
    },
	"physics_joint_gear_create": {
        "desc": "",
        "inst1": "",
        "inst2": "",
        "revoluteJoint": "",
        "prismaticJoint": "",
        "ratio": ""
    },
	"physics_joint_get_value": {
        "desc": "",
        "joint": "",
        "field": ""
    },
	"physics_joint_prismatic_create": {
        "desc": "",
        "inst1": "",
        "inst2": "",
        "anchor_x": "",
        "anchor_y": "",
        "axis_x": "",
        "axis_y": "",
        "lower_translation_limit": "",
        "upper_translation_limit": "",
        "enable_limit": "",
        "max_motor_force": "",
        "motor_speed": "",
        "enable_motor": "",
        "collideinstances": ""
    },
	"physics_joint_pulley_create": {
        "desc": "",
        "inst1": "",
        "inst2": "",
        "anchor_1_x": "",
        "anchor_1_y": "",
        "anchor_2_x": "",
        "anchor_2_y": "",
        "local_anchor_1_x": "",
        "local_anchor_1_y": "",
        "local_anchor_2_x": "",
        "local_anchor_2_y": "",
        "ratio": "",
        "collideinstances": ""
    },
	"physics_joint_revolute_create": {
        "desc": "",
        "inst1": "",
        "inst2": "",
        "anchor_x": "",
        "anchor_y": "",
        "lower_translation_limit": "",
        "upper_translation_limit": "",
        "enable_limit": "",
        "max_motor_force": "",
        "motor_speed": "",
        "enable_motor": "",
        "collideinstances": ""
    },
	"physics_joint_rope_create": {
        "desc": "",
        "inst1": "",
        "inst2": "",
        "anchor_1_x": "",
        "anchor_1_y": "",
        "anchor_2_x": "",
        "anchor_2_y": "",
        "maxLength": "",
        "collideinstances": ""
    },
	"physics_joint_set_value": {
        "desc": "",
        "joint": "",
        "field": "",
        "value": ""
    },
	"physics_joint_weld_create": {
        "desc": "",
        "inst1": "",
        "inst2": "",
        "anchor_x": "",
        "anchor_y": "",
        "ref_angle": "",
        "freq_hz": "",
        "damping_ratio": "",
        "collideinstances": ""
    },
	"physics_joint_wheel_create": {
        "desc": "",
        "inst1": "",
        "inst2": "",
        "anchor_x": "",
        "anchor_y": "",
        "axis_x": "",
        "axis_y": "",
        "enableMotor": "",
        "max_motor_torque": "",
        "motor_speed": "",
        "freq_hz": "",
        "damping_ratio": "",
        "collideinstances": ""
    },
	"physics_mass_properties": {
        "desc": "",
        "mass": "",
        "local_centre_of_mass_x": "",
        "local_centre_of_mass_y": "",
        "inertia": ""
    },
	"physics_particle_count": {
        "desc": ""
    },
	"physics_particle_create": {
        "desc": "",
        "typeflags": "",
        "x": "",
        "y": "",
        "xv": "",
        "yv": "",
        "col": "",
        "alpha": "",
        "category": ""
    },
	"physics_particle_delete": {
        "desc": "",
        "ind": ""
    },
	"physics_particle_delete_region_box": {
        "desc": "",
        "x": "",
        "y": "",
        "halfWidth": "",
        "halfHeight": ""
    },
	"physics_particle_delete_region_circle": {
        "desc": "",
        "x": "",
        "y": "",
        "radius": ""
    },
	"physics_particle_delete_region_poly": {
        "desc": "",
        "pointList": ""
    },
	"physics_particle_draw": {
        "desc": "",
        "typemask": "",
        "category": "",
        "sprite": "",
        "subimg": ""
    },
	"physics_particle_draw_ext": {
        "desc": "",
        "typemask": "",
        "category": "",
        "sprite": "",
        "subimg": "",
        "xscale": "",
        "yscale": "",
        "angle": "",
        "col": "",
        "alpha": ""
    },
	"physics_particle_get_damping": {
        "desc": ""
    },
	"physics_particle_get_data": {
        "desc": "",
        "buffer": "",
        "dataFlags": ""
    },
	"physics_particle_get_data_particle": {
        "desc": "",
        "ind": "",
        "buffer": "",
        "dataFlags": ""
    },
	"physics_particle_get_density": {
        "desc": ""
    },
	"physics_particle_get_gravity_scale": {
        "desc": ""
    },
	"physics_particle_get_group_flags": {
        "desc": "",
        "group": ""
    },
	"physics_particle_get_max_count": {
        "desc": ""
    },
	"physics_particle_get_radius": {
        "desc": ""
    },
	"physics_particle_group_add_point": {
        "desc": "",
        "x": "",
        "y": ""
    },
	"physics_particle_group_begin": {
        "desc": "",
        "typeflags": "",
        "groupflag": "",
        "x": "",
        "y": "",
        "ang": "",
        "xv": "",
        "yv": "",
        "angVelocity": "",
        "col": "",
        "alpha": "",
        "strength": "",
        "category": ""
    },
	"physics_particle_group_box": {
        "desc": "",
        "halfWidth": "",
        "halfHeight": ""
    },
	"physics_particle_group_circle": {
        "desc": "",
        "radius": ""
    },
	"physics_particle_group_count": {
        "desc": "",
        "group": ""
    },
	"physics_particle_group_delete": {
        "desc": "",
        "ind": ""
    },
	"physics_particle_group_end": {
        "desc": ""
    },
	"physics_particle_group_get_angle": {
        "desc": "",
        "group": ""
    },
	"physics_particle_group_get_ang_vel": {
        "desc": "",
        "group": ""
    },
	"physics_particle_group_get_centre_x": {
        "desc": "",
        "group": ""
    },
	"physics_particle_group_get_centre_y": {
        "desc": "",
        "group": ""
    },
	"physics_particle_group_get_data": {
        "desc": "",
        "group": "",
        "buffer": "",
        "dataFlags": ""
    },
	"physics_particle_group_get_inertia": {
        "desc": "",
        "group": ""
    },
	"physics_particle_group_get_mass": {
        "desc": "",
        "group": ""
    },
	"physics_particle_group_get_vel_x": {
        "desc": "",
        "group": ""
    },
	"physics_particle_group_get_vel_y": {
        "desc": "",
        "group": ""
    },
	"physics_particle_group_get_x": {
        "desc": "",
        "group": ""
    },
	"physics_particle_group_get_y": {
        "desc": "",
        "group": ""
    },
	"physics_particle_group_join": {
        "desc": "",
        "to": "",
        "from": ""
    },
	"physics_particle_group_polygon": {
        "desc": ""
    },
	"physics_particle_set_category_flags": {
        "desc": "",
        "catagory": "",
        "typeflags": ""
    },
	"physics_particle_set_damping": {
        "desc": "",
        "damping": ""
    },
	"physics_particle_set_density": {
        "desc": "",
        "density": ""
    },
	"physics_particle_set_flags": {
        "desc": "",
        "ind": "",
        "typeflags": ""
    },
	"physics_particle_set_gravity_scale": {
        "desc": "",
        "scale": ""
    },
	"physics_particle_set_group_flags": {
        "desc": "",
        "group": "",
        "groupflags": ""
    },
	"physics_particle_set_max_count": {
        "desc": "",
        "count": ""
    },
	"physics_particle_set_radius": {
        "desc": "",
        "radius": ""
    },
	"physics_pause_enable": {
        "desc": "",
        "pause": ""
    },
	"physics_remove_fixture": {
        "desc": "",
        "inst": "",
        "id": ""
    },
	"physics_set_density": {
        "desc": "",
        "fixture": "",
        "density": ""
    },
	"physics_set_friction": {
        "desc": "",
        "fixture": "",
        "friction": ""
    },
	"physics_set_restitution": {
        "desc": "",
        "fixture": "",
        "restitution": ""
    },
	"physics_test_overlap": {
        "desc": "",
        "x": "",
        "y": "",
        "angle": "",
        "obj": ""
    },
	"physics_world_create": {
        "desc": "",
        "PixelToMetreScale": ""
    },
	"physics_world_draw_debug": {
        "desc": "",
        "draw_flags": ""
    },
	"physics_world_gravity": {
        "desc": "",
        "gx": "",
        "gy": ""
    },
	"physics_world_update_iterations": {
        "desc": "",
        "iterations": ""
    },
	"physics_world_update_speed": {
        "desc": "",
        "speed": ""
    },
	"place_empty": {
        "desc": "",
        "x": "",
        "y": ""
    },
	"place_free": {
        "desc": "",
        "x": "",
        "y": ""
    },
	"place_meeting": {
        "desc": "",
        "x": "",
        "y": "",
        "obj": ""
    },
	"place_snapped": {
        "desc": "",
        "hsnap": "",
        "vsnap": ""
    },
	"point_direction": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": ""
    },
	"point_distance": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": ""
    },
	"point_distance_3d": {
        "desc": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": ""
    },
	"point_in_circle": {
        "desc": "",
        "px": "",
        "py": "",
        "cx": "",
        "cy": "",
        "rad": ""
    },
	"point_in_rectangle": {
        "desc": "",
        "px": "",
        "py": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": ""
    },
	"point_in_triangle": {
        "desc": "",
        "px": "",
        "py": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": ""
    },
	"position_change": {
        "desc": "",
        "x": "",
        "y": "",
        "obj": "",
        "performevents": ""
    },
	"position_destroy": {
        "desc": "",
        "x": "",
        "y": ""
    },
	"position_empty": {
        "desc": "",
        "x": "",
        "y": ""
    },
	"position_meeting": {
        "desc": "",
        "x": "",
        "y": "",
        "obj": ""
    },
	"power": {
        "desc": "",
        "x": "",
        "n": ""
    },
	"ptr": {
        "desc": "",
        "val": ""
    },
	"push_cancel_local_notification": {
        "desc": "",
        "id": ""
    },
	"push_get_first_local_notification": {
        "desc": "",
        "ds_map": ""
    },
	"push_get_next_local_notification": {
        "desc": "",
        "ds_map": ""
    },
	"push_local_notification": {
        "desc": "",
        "fire_time": "",
        "title": "",
        "message": "",
        "data": ""
    },
	"radtodeg": {
        "desc": "",
        "x": ""
    },
	"random": {
        "desc": "",
        "x": ""
    },
	"randomize": {
        "desc": ""
    },
	"random_get_seed": {
        "desc": ""
    },
	"random_old": {
        "desc": "",
        "x": ""
    },
	"random_range": {
        "desc": "",
        "x1": "",
        "x2": ""
    },
	"random_range_old": {
        "desc": "",
        "x1": "",
        "x2": ""
    },
	"random_set_seed": {
        "desc": "",
        "seed": ""
    },
	"random_use_old_version": {
        "desc": "",
        "trueFalse": ""
    },
	"real": {
        "desc": "",
        "val": ""
    },
	"rectangle_in_circle": {
        "desc": "",
        "sx1": "",
        "sy1": "",
        "sx2": "",
        "sy2": "",
        "cx": "",
        "cy": "",
        "rad": ""
    },
	"rectangle_in_rectangle": {
        "desc": "",
        "sx1": "",
        "sy1": "",
        "sx2": "",
        "sy2": "",
        "dx1": "",
        "dy1": "",
        "dx2": "",
        "dy2": ""
    },
	"rectangle_in_triangle": {
        "desc": "",
        "sx1": "",
        "sy1": "",
        "sx2": "",
        "sy2": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": "",
        "x3": "",
        "y3": ""
    },
	"room_add": {
        "desc": ""
    },
	"room_assign": {
        "desc": "",
        "ind": "",
        "source": ""
    },
	"room_duplicate": {
        "desc": "",
        "ind": ""
    },
	"room_exists": {
        "desc": "",
        "ind": ""
    },
	"room_get_name": {
        "desc": "",
        "ind": ""
    },
	"room_goto": {
        "desc": "",
        "numb": ""
    },
	"room_goto_next": {
        "desc": ""
    },
	"room_goto_previous": {
        "desc": ""
    },
	"room_instance_add": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "obj": ""
    },
	"room_instance_clear": {
        "desc": "",
        "ind": ""
    },
	"room_next": {
        "desc": "",
        "numb": ""
    },
	"room_previous": {
        "desc": "",
        "numb": ""
    },
	"room_restart": {
        "desc": ""
    },
	"room_set_background_color": {
        "desc": "",
        "ind": "",
        "col": "",
        "show": ""
    },
	"room_set_background_colour": {
        "desc": "",
        "ind": "",
        "col": "",
        "show": ""
    },
	"room_set_height": {
        "desc": "",
        "ind": "",
        "h": ""
    },
	"room_set_persistent": {
        "desc": "",
        "ind": "",
        "pers": ""
    },
	"room_set_view_enabled": {
        "desc": "",
        "ind": "",
        "val": ""
    },
	"room_set_width": {
        "desc": "",
        "ind": "",
        "w": ""
    },
	"round": {
        "desc": "",
        "x": ""
    },
	"screen_save": {
        "desc": "",
        "fname": ""
    },
	"screen_save_part": {
        "desc": "",
        "fname": "",
        "x": "",
        "y": "",
        "w": "",
        "h": ""
    },
	"script_execute": {
        "desc": "",
        "ind": "",
        "arg0": "",
        "arg1": "",
        "more": ""
    },
	"script_exists": {
        "desc": "",
        "ind": ""
    },
	"script_get_name": {
        "desc": "",
        "ind": ""
    },
	"sha1_file": {
        "desc": "",
        "fname": ""
    },
	"sha1_string_unicode": {
        "desc": "",
        "string": ""
    },
	"sha1_string_utf8": {
        "desc": "",
        "string": ""
    },
	"shaders_are_supported": {
        "desc": ""
    },
	"shader_enable_corner_id": {
        "desc": "",
        "enable": ""
    },
	"shader_get_sampler_index": {
        "desc": "",
        "shader": "",
        "uniform_name": ""
    },
	"shader_get_uniform": {
        "desc": "",
        "shader": "",
        "uniform_name": ""
    },
	"shader_is_compiled": {
        "desc": "",
        "shader": ""
    },
	"shader_reset": {
        "desc": ""
    },
	"shader_set": {
        "desc": "",
        "shader": ""
    },
	"shader_set_uniform_f": {
        "desc": "",
        "uniform_id": "",
        "val": "",
        "more": ""
    },
	"shader_set_uniform_f_array": {
        "desc": "",
        "uniform_id": "",
        "array": ""
    },
	"shader_set_uniform_i": {
        "desc": "",
        "uniform_id": "",
        "val": "",
        "more": ""
    },
	"shader_set_uniform_i_array": {
        "desc": "",
        "uniform_id": "",
        "array": ""
    },
	"shader_set_uniform_matrix": {
        "desc": "",
        "uniform_id": ""
    },
	"shader_set_uniform_matrix_array": {
        "desc": "",
        "uniform_id": "",
        "array": ""
    },
	"shop_leave_rating": {
        "desc": "",
        "text_string": "",
        "yes_string": "",
        "no_string": "",
        "url": ""
    },
	"show_debug_message": {
        "desc": "",
        "str": ""
    },
	"show_debug_overlay": {
        "desc": "",
        "bool": ""
    },
	"show_error": {
        "desc": "",
        "str": "",
        "abort": ""
    },
	"show_message": {
        "desc": "",
        "str": ""
    },
	"show_message_async": {
        "desc": "",
        "str": ""
    },
	"show_question": {
        "desc": "",
        "str": ""
    },
	"show_question_async": {
        "desc": "",
        "str": ""
    },
	"sign": {
        "desc": "",
        "x": ""
    },
	"sin": {
        "desc": "",
        "radian_angle": ""
    },
	"skeleton_animation_clear": {
        "desc": "",
        "track": ""
    },
	"skeleton_animation_get": {
        "desc": ""
    },
	"skeleton_animation_get_duration": {
        "desc": "",
        "anim_name": ""
    },
	"skeleton_animation_get_ext": {
        "desc": "",
        "track": ""
    },
	"skeleton_animation_get_frames": {
        "desc": "",
        "anim_name": ""
    },
	"skeleton_animation_list": {
        "desc": "",
        "sprite": "",
        "list": ""
    },
	"skeleton_animation_mix": {
        "desc": "",
        "anim_from": "",
        "anim_to": "",
        "duration": ""
    },
	"skeleton_animation_set": {
        "desc": "",
        "anim_name": ""
    },
	"skeleton_animation_set_ext": {
        "desc": "",
        "anim_name": "",
        "track": ""
    },
	"skeleton_attachment_create": {
        "desc": "",
        "name": "",
        "sprite": "",
        "ind": "",
        "xo": "",
        "yo": "",
        "xs": "",
        "ys": "",
        "ro": ""
    },
	"skeleton_attachment_get": {
        "desc": "",
        "slot": ""
    },
	"skeleton_attachment_set": {
        "desc": "",
        "slot": "",
        "attachment": ""
    },
	"skeleton_bone_data_get": {
        "desc": "",
        "bone": "",
        "map": ""
    },
	"skeleton_bone_data_set": {
        "desc": "",
        "bone": "",
        "map": ""
    },
	"skeleton_bone_state_get": {
        "desc": "",
        "bone": "",
        "map": ""
    },
	"skeleton_bone_state_set": {
        "desc": "",
        "bone": "",
        "map": ""
    },
	"skeleton_collision_draw_set": {
        "desc": "",
        "val": ""
    },
	"skeleton_get_bounds": {
        "desc": "",
        "index": ""
    },
	"skeleton_get_minmax": {
        "desc": ""
    },
	"skeleton_get_num_bounds": {
        "desc": ""
    },
	"skeleton_skin_get": {
        "desc": ""
    },
	"skeleton_skin_list": {
        "desc": "",
        "sprite": "",
        "list": ""
    },
	"skeleton_skin_set": {
        "desc": "",
        "skin_name": ""
    },
	"skeleton_slot_data": {
        "desc": "",
        "sprite": "",
        "list": ""
    },
	"sprite_add": {
        "desc": "",
        "fname": "",
        "imgnumb": "",
        "removeback": "",
        "smooth": "",
        "xorig": "",
        "yorig": ""
    },
	"sprite_add_from_surface": {
        "desc": "",
        "ind": "",
        "id": "",
        "x": "",
        "y": "",
        "w": "",
        "h": "",
        "removeback": "",
        "smooth": ""
    },
	"sprite_assign": {
        "desc": "",
        "ind": "",
        "source": ""
    },
	"sprite_collision_mask": {
        "desc": "",
        "ind": "",
        "sepmasks": "",
        "bboxmode": "",
        "bbleft": "",
        "bbtop": "",
        "bbright": "",
        "bbbottom": "",
        "kind": "",
        "tolerance": ""
    },
	"sprite_create_from_surface": {
        "desc": "",
        "id": "",
        "x": "",
        "y": "",
        "w": "",
        "h": "",
        "removeback": "",
        "smooth": "",
        "xorig": "",
        "yorig": ""
    },
	"sprite_delete": {
        "desc": "",
        "ind": ""
    },
	"sprite_duplicate": {
        "desc": "",
        "ind": ""
    },
	"sprite_exists": {
        "desc": "",
        "ind": ""
    },
	"sprite_flush": {
        "desc": "",
        "ind": ""
    },
	"sprite_flush_multi": {
        "desc": "",
        "indarray": ""
    },
	"sprite_get_bbox_bottom": {
        "desc": "",
        "ind": ""
    },
	"sprite_get_bbox_left": {
        "desc": "",
        "ind": ""
    },
	"sprite_get_bbox_right": {
        "desc": "",
        "ind": ""
    },
	"sprite_get_bbox_top": {
        "desc": "",
        "ind": ""
    },
	"sprite_get_height": {
        "desc": "",
        "ind": ""
    },
	"sprite_get_name": {
        "desc": "",
        "ind": ""
    },
	"sprite_get_number": {
        "desc": "",
        "ind": ""
    },
	"sprite_get_texture": {
        "desc": "",
        "spr": "",
        "subimg": ""
    },
	"sprite_get_tpe": {
        "desc": "",
        "index": "",
        "subindex": ""
    },
	"sprite_get_uvs": {
        "desc": "",
        "spr": "",
        "subimg": ""
    },
	"sprite_get_width": {
        "desc": "",
        "ind": ""
    },
	"sprite_get_xoffset": {
        "desc": "",
        "ind": ""
    },
	"sprite_get_yoffset": {
        "desc": "",
        "ind": ""
    },
	"sprite_merge": {
        "desc": "",
        "ind1": "",
        "ind2": ""
    },
	"sprite_prefetch": {
        "desc": "",
        "ind": ""
    },
	"sprite_prefetch_multi": {
        "desc": "",
        "indarray": ""
    },
	"sprite_replace": {
        "desc": "",
        "ind": "",
        "fname": "",
        "imgnumb": "",
        "removeback": "",
        "smooth": "",
        "xorig": "",
        "yorig": ""
    },
	"sprite_save": {
        "desc": "",
        "ind": "",
        "subimg": "",
        "fname": ""
    },
	"sprite_save_strip": {
        "desc": "",
        "ind": "",
        "fname": ""
    },
	"sprite_set_alpha_from_sprite": {
        "desc": "",
        "ind": "",
        "spr": ""
    },
	"sprite_set_cache_size": {
        "desc": "",
        "ind": "",
        "max": ""
    },
	"sprite_set_cache_size_ext": {
        "desc": "",
        "ind": "",
        "image": "",
        "max": ""
    },
	"sprite_set_offset": {
        "desc": "",
        "ind": "",
        "xoff": "",
        "yoff": ""
    },
	"sqr": {
        "desc": "",
        "x": ""
    },
	"sqrt": {
        "desc": "",
        "x": ""
    },
	"steam_activate_overlay": {
        "desc": "",
        "overlayIndex": ""
    },
	"steam_activate_overlay_browser": {
        "desc": "",
        "url": ""
    },
	"steam_activate_overlay_store": {
        "desc": "",
        "app_id": ""
    },
	"steam_activate_overlay_user": {
        "desc": "",
        "dialog_name": "",
        "steamid": ""
    },
	"steam_available_languages": {
        "desc": ""
    },
	"steam_clear_achievement": {
        "desc": "",
        "ach_name": ""
    },
	"steam_create_leaderboard": {
        "desc": "",
        "lb_name": "",
        "sort_method": "",
        "display_type": ""
    },
	"steam_current_game_language": {
        "desc": ""
    },
	"steam_download_friends_scores": {
        "desc": "",
        "lb_name": ""
    },
	"steam_download_scores": {
        "desc": "",
        "lb_name": "",
        "start_idx": "",
        "end_idx": ""
    },
	"steam_download_scores_around_user": {
        "desc": "",
        "lb_name": "",
        "range_start": "",
        "range_end": ""
    },
	"steam_file_delete": {
        "desc": "",
        "filename": ""
    },
	"steam_file_exists": {
        "desc": "",
        "filename": ""
    },
	"steam_file_persisted": {
        "desc": "",
        "filename": ""
    },
	"steam_file_read": {
        "desc": "",
        "filename": ""
    },
	"steam_file_share": {
        "desc": "",
        "filename": ""
    },
	"steam_file_size": {
        "desc": "",
        "filename": ""
    },
	"steam_file_write": {
        "desc": "",
        "steam_filename": "",
        "data": "",
        "size": ""
    },
	"steam_file_write_file": {
        "desc": "",
        "steam_filename": "",
        "local_filename": ""
    },
	"steam_get_achievement": {
        "desc": "",
        "ach_name": ""
    },
	"steam_get_app_id": {
        "desc": ""
    },
	"steam_get_persona_name": {
        "desc": ""
    },
	"steam_get_quota_free": {
        "desc": ""
    },
	"steam_get_quota_total": {
        "desc": ""
    },
	"steam_get_stat_avg_rate": {
        "desc": "",
        "stat_name": ""
    },
	"steam_get_stat_float": {
        "desc": "",
        "stat_name": ""
    },
	"steam_get_stat_int": {
        "desc": "",
        "stat_name": ""
    },
	"steam_get_user_account_id": {
        "desc": ""
    },
	"steam_get_user_persona_name": {
        "desc": "",
        "steam_id": ""
    },
	"steam_get_user_steam_id": {
        "desc": ""
    },
	"steam_initialised": {
        "desc": ""
    },
	"steam_is_cloud_enabled_for_account": {
        "desc": ""
    },
	"steam_is_cloud_enabled_for_app": {
        "desc": ""
    },
	"steam_is_overlay_activated": {
        "desc": ""
    },
	"steam_is_overlay_enabled": {
        "desc": ""
    },
	"steam_is_screenshot_requested": {
        "desc": ""
    },
	"steam_is_user_logged_on": {
        "desc": ""
    },
	"steam_publish_workshop_file": {
        "desc": "",
        "filename": "",
        "previewImage": "",
        "title": "",
        "description": ""
    },
	"steam_reset_all_stats": {
        "desc": ""
    },
	"steam_reset_all_stats_achievements": {
        "desc": ""
    },
	"steam_send_screenshot": {
        "desc": "",
        "filename": "",
        "width": "",
        "height": ""
    },
	"steam_set_achievement": {
        "desc": "",
        "ach_name": ""
    },
	"steam_set_stat_avg_rate": {
        "desc": "",
        "stat_name": "",
        "session_count": "",
        "session_length": ""
    },
	"steam_set_stat_float": {
        "desc": "",
        "stat_name": "",
        "value": ""
    },
	"steam_set_stat_int": {
        "desc": "",
        "stat_name": "",
        "value": ""
    },
	"steam_stats_ready": {
        "desc": ""
    },
	"steam_ugc_create_item": {
        "desc": "",
        "consumer_app_id": "",
        "file_type": ""
    },
	"steam_ugc_create_query_all": {
        "desc": "",
        "query_type": "",
        "match_type": "",
        "page": ""
    },
	"steam_ugc_create_query_all_ex": {
        "desc": "",
        "query_type": "",
        "match_type": "",
        "page": "",
        "creator_app_id": "",
        "consumer_app_id": ""
    },
	"steam_ugc_create_query_user": {
        "desc": "",
        "list_type": "",
        "match_type": "",
        "sort_order": "",
        "page": ""
    },
	"steam_ugc_create_query_user_ex": {
        "desc": "",
        "list_type": "",
        "match_type": "",
        "sort_order": "",
        "page": "",
        "account_id": "",
        "creator_app_id": "",
        "consumer_app_id": ""
    },
	"steam_ugc_download": {
        "desc": "",
        "ugc_handle": "",
        "dest_filename": ""
    },
	"steam_ugc_get_item_install_info": {
        "desc": "",
        "published_file_id": "",
        "info_map": ""
    },
	"steam_ugc_get_item_update_info": {
        "desc": "",
        "published_file_id": "",
        "info_map": ""
    },
	"steam_ugc_get_item_update_progress": {
        "desc": "",
        "ugc_update_handle": "",
        "info_map": ""
    },
	"steam_ugc_get_subscribed_items": {
        "desc": "",
        "info_map": ""
    },
	"steam_ugc_num_subscribed_items": {
        "desc": ""
    },
	"steam_ugc_query_add_excluded_tag": {
        "desc": "",
        "ugc_query_handle": "",
        "tag_name": ""
    },
	"steam_ugc_query_add_required_tag": {
        "desc": "",
        "ugc_query_handle": "",
        "tag_name": ""
    },
	"steam_ugc_query_set_allow_cached_response": {
        "desc": "",
        "ugc_query_handle": "",
        "max_age_seconds": ""
    },
	"steam_ugc_query_set_cloud_filename_filter": {
        "desc": "",
        "ugc_query_handle": "",
        "match_cloud_filename": ""
    },
	"steam_ugc_query_set_match_any_tag": {
        "desc": "",
        "ugc_query_handle": "",
        "match_any_tag": ""
    },
	"steam_ugc_query_set_ranked_by_trend_days": {
        "desc": "",
        "ugc_query_handle": "",
        "days": ""
    },
	"steam_ugc_query_set_return_long_description": {
        "desc": "",
        "ugc_query_handle": "",
        "return_long_desc": ""
    },
	"steam_ugc_query_set_return_total_only": {
        "desc": "",
        "ugc_query_handle": "",
        "return_total_only": ""
    },
	"steam_ugc_query_set_search_text": {
        "desc": "",
        "ugc_query_handle": "",
        "search_text": ""
    },
	"steam_ugc_request_item_details": {
        "desc": "",
        "published_file_id": "",
        "max_age_seconds": ""
    },
	"steam_ugc_send_query": {
        "desc": "",
        "ugc_query_handle": ""
    },
	"steam_ugc_set_item_content": {
        "desc": "",
        "ugc_update_handle": "",
        "directory": ""
    },
	"steam_ugc_set_item_description": {
        "desc": "",
        "ugc_update_handle": "",
        "description": ""
    },
	"steam_ugc_set_item_preview": {
        "desc": "",
        "ugc_update_handle": "",
        "image_path": ""
    },
	"steam_ugc_set_item_tags": {
        "desc": "",
        "ugc_update_handle": "",
        "tag_array": ""
    },
	"steam_ugc_set_item_title": {
        "desc": "",
        "ugc_update_handle": "",
        "title": ""
    },
	"steam_ugc_set_item_visibility": {
        "desc": "",
        "ugc_update_handle": "",
        "visibility": ""
    },
	"steam_ugc_start_item_update": {
        "desc": "",
        "consumer_app_id": "",
        "published_file_id": ""
    },
	"steam_ugc_submit_item_update": {
        "desc": "",
        "ugc_update_handle": "",
        "change_note": ""
    },
	"steam_ugc_subscribe_item": {
        "desc": "",
        "published_file_id": ""
    },
	"steam_ugc_unsubscribe_item": {
        "desc": "",
        "published_file_id": ""
    },
	"steam_upload_score": {
        "desc": "",
        "lb_name": "",
        "score": ""
    },
	"steam_upload_score_buffer": {
        "desc": "",
        "lb_name": "",
        "score": "",
        "buffer_id": ""
    },
	"steam_upload_score_buffer_ext": {
        "desc": "",
        "lb_name": "",
        "score": "",
        "buffer_id": "",
        "forceupdate": ""
    },
	"steam_upload_score_ext": {
        "desc": "",
        "lb_name": "",
        "score": "",
        "forceupdate": ""
    },
	"steam_user_installed_dlc": {
        "desc": "",
        "dlc_id": ""
    },
	"steam_user_owns_dlc": {
        "desc": "",
        "dlc_id": ""
    },
	"string": {
        "desc": "",
        "val": ""
    },
	"string_byte_at": {
        "desc": "",
        "str": "",
        "index": ""
    },
	"string_byte_length": {
        "desc": "",
        "str": ""
    },
	"string_char_at": {
        "desc": "",
        "str": "",
        "index": ""
    },
	"string_copy": {
        "desc": "",
        "str": "",
        "index": "",
        "count": ""
    },
	"string_count": {
        "desc": "",
        "substr": "",
        "str": ""
    },
	"string_delete": {
        "desc": "",
        "str": "",
        "index": "",
        "count": ""
    },
	"string_digits": {
        "desc": "",
        "str": ""
    },
	"string_format": {
        "desc": "",
        "val": "",
        "total": "",
        "dec": ""
    },
	"string_height": {
        "desc": "",
        "string": ""
    },
	"string_height_ext": {
        "desc": "",
        "string": "",
        "sep": "",
        "w": ""
    },
	"string_insert": {
        "desc": "",
        "substr": "",
        "str": "",
        "index": ""
    },
	"string_length": {
        "desc": "",
        "str": ""
    },
	"string_letters": {
        "desc": "",
        "str": ""
    },
	"string_lettersdigits": {
        "desc": "",
        "str": ""
    },
	"string_lower": {
        "desc": "",
        "str": ""
    },
	"string_ord_at": {
        "desc": "",
        "str": "",
        "index": ""
    },
	"string_pos": {
        "desc": "",
        "substr": "",
        "str": ""
    },
	"string_repeat": {
        "desc": "",
        "str": "",
        "count": ""
    },
	"string_replace": {
        "desc": "",
        "str": "",
        "substr": "",
        "newstr": ""
    },
	"string_replace_all": {
        "desc": "",
        "str": "",
        "substr": "",
        "newstr": ""
    },
	"string_set_byte_at": {
        "desc": "",
        "str": "",
        "index": "",
        "val": ""
    },
	"string_upper": {
        "desc": "",
        "str": ""
    },
	"string_width": {
        "desc": "",
        "string": ""
    },
	"string_width_ext": {
        "desc": "",
        "string": "",
        "sep": "",
        "w": ""
    },
	"surface_copy": {
        "desc": "",
        "destination": "",
        "x": "",
        "y": "",
        "source": ""
    },
	"surface_copy_part": {
        "desc": "",
        "destination": "",
        "x": "",
        "y": "",
        "source": "",
        "xs": "",
        "ys": "",
        "ws": "",
        "hs": ""
    },
	"surface_create": {
        "desc": "",
        "w": "",
        "h": ""
    },
	"surface_create_ext": {
        "desc": "",
        "name": "",
        "w": "",
        "h": ""
    },
	"surface_exists": {
        "desc": "",
        "id": ""
    },
	"surface_free": {
        "desc": "",
        "id": ""
    },
	"surface_getpixel": {
        "desc": "",
        "id": "",
        "x": "",
        "y": ""
    },
	"surface_getpixel_ext": {
        "desc": "",
        "id": "",
        "x": "",
        "y": ""
    },
	"surface_get_height": {
        "desc": "",
        "id": ""
    },
	"surface_get_texture": {
        "desc": "",
        "id": ""
    },
	"surface_get_width": {
        "desc": "",
        "id": ""
    },
	"surface_reset_target": {
        "desc": ""
    },
	"surface_resize": {
        "desc": "",
        "id": "",
        "width": "",
        "height": ""
    },
	"surface_save": {
        "desc": "",
        "id": "",
        "fname": ""
    },
	"surface_save_part": {
        "desc": "",
        "id": "",
        "fname": "",
        "x": "",
        "y": "",
        "w": "",
        "h": ""
    },
	"surface_set_target": {
        "desc": "",
        "id": ""
    },
	"surface_set_target_ext": {
        "desc": "",
        "index": "",
        "id": ""
    },
	"tan": {
        "desc": "",
        "radian_angle": ""
    },
	"texture_get_height": {
        "desc": "",
        "texid": ""
    },
	"texture_get_texel_height": {
        "desc": "",
        "texture_id": ""
    },
	"texture_get_texel_width": {
        "desc": "",
        "texture_id": ""
    },
	"texture_get_width": {
        "desc": "",
        "texid": ""
    },
	"texture_global_scale": {
        "desc": "",
        "pow2integer": ""
    },
	"texture_set_blending": {
        "desc": "",
        "blend": ""
    },
	"texture_set_interpolation": {
        "desc": "",
        "linear": ""
    },
	"texture_set_interpolation_ext": {
        "desc": "",
        "sampler_id": "",
        "linear": ""
    },
	"texture_set_repeat": {
        "desc": "",
        "repeat": ""
    },
	"texture_set_repeat_ext": {
        "desc": "",
        "sampler_id": "",
        "repeat": ""
    },
	"texture_set_stage": {
        "desc": "",
        "sampler_id": "",
        "texture_id": ""
    },
	"timeline_add": {
        "desc": ""
    },
	"timeline_clear": {
        "desc": "",
        "ind": ""
    },
	"timeline_delete": {
        "desc": "",
        "ind": ""
    },
	"timeline_exists": {
        "desc": "",
        "ind": ""
    },
	"timeline_get_name": {
        "desc": "",
        "ind": ""
    },
	"timeline_max_moment": {
        "desc": "",
        "ind": ""
    },
	"timeline_moment_add_script": {
        "desc": "",
        "id": "",
        "step": "",
        "script": ""
    },
	"timeline_moment_clear": {
        "desc": "",
        "id": "",
        "step": ""
    },
	"timeline_size": {
        "desc": "",
        "ind": ""
    },
	"typeof": {
        "desc": "",
        "val": ""
    },
	"url_get_domain": {
        "desc": ""
    },
	"url_open": {
        "desc": "",
        "url": ""
    },
	"url_open_ext": {
        "desc": "",
        "url": "",
        "target": ""
    },
	"url_open_full": {
        "desc": "",
        "url": "",
        "target": "",
        "options": ""
    },
	"vertex_argb": {
        "desc": "",
        "vbuff": "",
        "argb": ""
    },
	"vertex_begin": {
        "desc": "",
        "vbuff": "",
        "format": ""
    },
	"vertex_color": {
        "desc": "",
        "vbuff": "",
        "color": "",
        "alpha": ""
    },
	"vertex_colour": {
        "desc": "",
        "vbuff": "",
        "colour": "",
        "alpha": ""
    },
	"vertex_create_buffer": {
        "desc": ""
    },
	"vertex_create_buffer_ext": {
        "desc": "",
        "size": ""
    },
	"vertex_create_buffer_from_buffer": {
        "desc": "",
        "src_buffer": "",
        "format": ""
    },
	"vertex_create_buffer_from_buffer_ext": {
        "desc": "",
        "src_buffer": "",
        "format": "",
        "src_offset": "",
        "num_vertices": ""
    },
	"vertex_delete_buffer": {
        "desc": "",
        "vbuff": ""
    },
	"vertex_end": {
        "desc": "",
        "vbuff": ""
    },
	"vertex_float1": {
        "desc": "",
        "vbuff": "",
        "f1": ""
    },
	"vertex_float2": {
        "desc": "",
        "vbuff": "",
        "f1": "",
        "f2": ""
    },
	"vertex_float3": {
        "desc": "",
        "vbuff": "",
        "f1": "",
        "f2": "",
        "f3": ""
    },
	"vertex_float4": {
        "desc": "",
        "vbuff": "",
        "f1": "",
        "f2": "",
        "f3": "",
        "f4": ""
    },
	"vertex_format_add_color": {
        "desc": ""
    },
	"vertex_format_add_colour": {
        "desc": ""
    },
	"vertex_format_add_custom": {
        "desc": "",
        "type": "",
        "usage": ""
    },
	"vertex_format_add_normal": {
        "desc": ""
    },
	"vertex_format_add_position": {
        "desc": ""
    },
	"vertex_format_add_position_3d": {
        "desc": ""
    },
	"vertex_format_add_textcoord": {
        "desc": ""
    },
	"vertex_format_begin": {
        "desc": ""
    },
	"vertex_format_delete": {
        "desc": "",
        "format_id": ""
    },
	"vertex_format_end": {
        "desc": ""
    },
	"vertex_freeze": {
        "desc": "",
        "vbuff": ""
    },
	"vertex_get_buffer_size": {
        "desc": "",
        "vbuff": ""
    },
	"vertex_get_number": {
        "desc": "",
        "vbuff": ""
    },
	"vertex_normal": {
        "desc": "",
        "vbuff": "",
        "nx": "",
        "ny": "",
        "nz": ""
    },
	"vertex_position": {
        "desc": "",
        "vbuff": "",
        "x": "",
        "y": ""
    },
	"vertex_position_3d": {
        "desc": "",
        "vbuff": "",
        "x": "",
        "y": "",
        "z": ""
    },
	"vertex_submit": {
        "desc": "",
        "vbuff": "",
        "prim": "",
        "texture": ""
    },
	"vertex_texcoord": {
        "desc": "",
        "vbuff": "",
        "u": "",
        "v": ""
    },
	"vertex_ubyte4": {
        "desc": "",
        "vbuff": "",
        "b1": "",
        "b2": "",
        "b3": "",
        "b4": ""
    },
	"virtual_key_add": {
        "desc": "",
        "x": "",
        "y": "",
        "w": "",
        "h": "",
        "keycode": ""
    },
	"virtual_key_delete": {
        "desc": "",
        "id": ""
    },
	"virtual_key_hide": {
        "desc": "",
        "id": ""
    },
	"virtual_key_show": {
        "desc": "",
        "id": ""
    },
	"window_center": {
        "desc": ""
    },
	"window_device": {
        "desc": ""
    },
	"window_get_caption": {
        "desc": ""
    },
	"window_get_color": {
        "desc": ""
    },
	"window_get_colour": {
        "desc": ""
    },
	"window_get_cursor": {
        "desc": ""
    },
	"window_get_fullscreen": {
        "desc": ""
    },
	"window_get_height": {
        "desc": ""
    },
	"window_get_visible_rects": {
        "desc": "",
        "x1": "",
        "y1": "",
        "x2": "",
        "y2": ""
    },
	"window_get_width": {
        "desc": ""
    },
	"window_get_x": {
        "desc": ""
    },
	"window_get_y": {
        "desc": ""
    },
	"window_handle": {
        "desc": ""
    },
	"window_has_focus": {
        "desc": ""
    },
	"window_mouse_get_x": {
        "desc": ""
    },
	"window_mouse_get_y": {
        "desc": ""
    },
	"window_mouse_set": {
        "desc": "",
        "x": "",
        "y": ""
    },
	"window_set_caption": {
        "desc": "",
        "caption": ""
    },
	"window_set_color": {
        "desc": "",
        "color": ""
    },
	"window_set_colour": {
        "desc": "",
        "colour": ""
    },
	"window_set_cursor": {
        "desc": "",
        "curs": ""
    },
	"window_set_fullscreen": {
        "desc": "",
        "full": ""
    },
	"window_set_max_height": {
        "desc": "",
        "maxheight": ""
    },
	"window_set_max_width": {
        "desc": "",
        "maxwidth": ""
    },
	"window_set_min_height": {
        "desc": "",
        "minheight": ""
    },
	"window_set_min_width": {
        "desc": "",
        "minwidth": ""
    },
	"window_set_position": {
        "desc": "",
        "x": "",
        "y": ""
    },
	"window_set_rectangle": {
        "desc": "",
        "x": "",
        "y": "",
        "w": "",
        "h": ""
    },
	"window_set_size": {
        "desc": "",
        "w": "",
        "h": ""
    },
	"window_views_mouse_get_x": {
        "desc": ""
    },
	"window_views_mouse_get_y": {
        "desc": ""
    },
	"window_view_mouse_get_x": {
        "desc": "",
        "id": ""
    },
	"window_view_mouse_get_y": {
        "desc": "",
        "id": ""
    },
	"zip_unzip": {
        "desc": "",
        "file": "",
        "destPath": ""
    },

    "variable_global_exists": {
        "desc": "",
        "name": ""
    },
	"variable_global_get": {
        "desc": "",
        "name": ""
    },
	"variable_global_set": {
        "desc": "",
        "name": "",
        "value": ""
    },
	"variable_instance_exists": {
        "desc": "",
        "instance_id": "",
        "name": ""
    },
	"variable_instance_get": {
        "desc": "",
        "instance_id": "",
        "name": ""
    },
	"variable_instance_set": {
        "desc": "",
        "instance_id": "",
        "name": "",
        "val": ""
    },
	"variable_instance_get_names": {
        "desc": "",
        "instance_id": ""
    },

    "pocketchange_display_reward": {
        "desc": ""
    },
	"pocketchange_display_shop": {
        "desc": ""
    },
	"iap_store_status": {
        "desc": ""
    },
	"iap_product_status": {
        "desc": "",
        "product_id": ""
    },
	"iap_is_downloaded": {
        "desc": "",
        "product_id_string": ""
    },
	"iap_files_purchased": {
        "desc": ""
    },
	"iap_product_files": {
        "desc": "",
        "product_id": "",
        "ds_list": ""
    },
	"iap_event_queue": {
        "desc": ""
    },
    "win8_appbar_add_element": {
        "desc": "",
        "type": "",
        "icon": "",
        "label": "",
        "section": "",
        "toolTip": "",
        "callback": ""
    },
	"win8_appbar_enable": {
        "desc": "",
        "flag": ""
    },
	"win8_appbar_remove_element": {
        "desc": "",
        "id": ""
    },
	"win8_device_touchscreen_available": {
        "desc": ""
    },
	"win8_license_initialize_sandbox": {
        "desc": "",
        "licenseString": ""
    },
	"win8_license_trial_version": {
        "desc": ""
    },
	"win8_livetile_badge_clear": {
        "desc": ""
    },
	"win8_livetile_badge_notification": {
        "desc": "",
        "id": ""
    },
	"win8_livetile_notification_begin": {
        "desc": "",
        "template": ""
    },
	"win8_livetile_notification_end": {
        "desc": ""
    },
	"win8_livetile_notification_expiry": {
        "desc": "",
        "expiryTime": ""
    },
	"win8_livetile_notification_image_add": {
        "desc": "",
        "image": ""
    },
	"win8_livetile_notification_secondary_begin": {
        "desc": "",
        "template": "",
        "tileid": ""
    },
	"win8_livetile_notification_tag": {
        "desc": "",
        "tag": ""
    },
	"win8_livetile_notification_text_add": {
        "desc": "",
        "text": ""
    },
	"win8_livetile_queue_enable": {
        "desc": "",
        "flag": ""
    },
	"win8_livetile_tile_clear": {
        "desc": ""
    },
	"win8_livetile_tile_notification": {
        "desc": "",
        "template": "",
        "ds_map": "",
        "expiry": "",
        "tag": ""
    },
	"win8_search_add_suggestions": {
        "desc": "",
        "dslist": ""
    },
	"win8_search_disable": {
        "desc": ""
    },
	"win8_search_enable": {
        "desc": "",
        "selectionCallback": ""
    },
	"win8_secondarytile_badge_notification": {
        "desc": "",
        "id": "",
        "tileid": ""
    },
	"win8_secondarytile_delete": {
        "desc": "",
        "id": ""
    },
	"win8_secondarytile_pin": {
        "desc": "",
        "id": "",
        "shortName": "",
        "displayName": "",
        "cmdLineArgs": "",
        "dsListOptions": "",
        "tileImg": "",
        "wideTileImg": "",
        "textCol": ""
    },
	"win8_settingscharm_add_entry": {
        "desc": "",
        "name": "",
        "callback": ""
    },
	"win8_settingscharm_add_html_entry": {
        "desc": "",
        "id": "",
        "name": "",
        "htmlPath": ""
    },
	"win8_settingscharm_add_xaml_entry": {
        "desc": "",
        "name": "",
        "xamlPath": "",
        "headerRGB": "",
        "callback": "",
        "wideFlyout": ""
    },
	"win8_settingscharm_get_xaml_property": {
        "desc": "",
        "entryName": "",
        "elementName": "",
        "propertyName": ""
    },
	"win8_settingscharm_remove_entry": {
        "desc": "",
        "name": ""
    },
	"win8_settingscharm_set_xaml_property": {
        "desc": "",
        "entryName": "",
        "elementName": "",
        "propertyName": "",
        "newValue": ""
    },
	"win8_share_file": {
        "desc": "",
        "filename": "",
        "title": "",
        "description": "",
        "immediate": ""
    },
	"win8_share_image": {
        "desc": "",
        "image_filename": "",
        "title": "",
        "description": "",
        "immediate": ""
    },
	"win8_share_screenshot": {
        "desc": "",
        "entryName": "",
        "description": "",
        "immediate": ""
    },
	"win8_share_text": {
        "desc": "",
        "text": "",
        "title": "",
        "description": "",
        "immediate": ""
    },
	"win8_share_url": {
        "desc": "",
        "url": "",
        "title": "",
        "description": "",
        "immediate": ""
    },
    "winphone_license_trial_version": {
        "desc": ""
    },
	"winphone_tile_background_color": {
        "desc": "",
        "color": ""
    },
	"winphone_tile_background_colour": {
        "desc": "",
        "colour": ""
    },
	"winphone_tile_back_content": {
        "desc": "",
        "content": ""
    },
	"winphone_tile_back_content_wide": {
        "desc": "",
        "content": ""
    },
	"winphone_tile_back_image": {
        "desc": "",
        "included_filename": ""
    },
	"winphone_tile_back_image_wide": {
        "desc": "",
        "included_filename": ""
    },
	"winphone_tile_back_title": {
        "desc": "",
        "title": ""
    },
	"winphone_tile_count": {
        "desc": "",
        "count": ""
    },
	"winphone_tile_cycle_images": {
        "desc": "",
        "included_filename_1": "",
        "included_filename_2": "",
        "more": ""
    },
	"winphone_tile_front_image": {
        "desc": "",
        "included_filename": ""
    },
	"winphone_tile_front_image_small": {
        "desc": "",
        "included_filename": ""
    },
	"winphone_tile_front_image_wide": {
        "desc": "",
        "included_filename": ""
    },
	"winphone_tile_icon_image": {
        "desc": "",
        "included_filename": ""
    },
	"winphone_tile_small_background_image": {
        "desc": "",
        "included_filename": ""
    },
	"winphone_tile_small_icon_image": {
        "desc": "",
        "included_filename": ""
    },
	"winphone_tile_title": {
        "desc": "",
        "title": ""
    },
	"winphone_tile_wide_content": {
        "desc": "",
        "content": "",
        "index": ""
    },
    "device_ios_get_image": {
        "desc": ""
    },
	"device_ios_get_imagename": {
        "desc": ""
    },
    "sound_delete": {
        "desc": "",
        "ind": ""
    },
    "sound_discard": {
        "desc": "",
        "ind": ""
    },
    "sound_exists": {
        "desc": "",
        "ind": ""
    },
    "sound_get_kind": {
        "desc": "",
        "ind": ""
    },
	"sound_get_name": {
        "desc": "",
        "ind": ""
    },
	"sound_get_preload": {
        "desc": "",
        "ind": ""
    },
    "sound_restore": {
        "desc": "",
        "ind": ""
    },
    "sound_loop": {
        "desc": "",
        "index": ""
    },
    "sound_play": {
        "desc": "",
        "index": ""
    },
    "sound_stop": {
        "desc": "",
        "index": ""
    },
	"sound_stop_all": {
        "desc": ""
    },
	"sound_volume": {
        "desc": "",
        "index": "",
        "value": ""
    },
	"sound_global_volume": {
        "desc": "",
        "value": ""
    },
	"sound_fade": {
        "desc": "",
        "index": "",
        "value": "",
        "time": ""
    },
	"sound_isplaying": {
        "desc": "",
        "index": ""
    },
    "audio_music_is_playing": {
        "desc": ""
    },
    "audio_resume_music": {
        "desc": ""
    },
    "audio_pause_music": {
        "desc": ""
    },
	"audio_play_music": {
        "desc": "",
        "soundid": "",
        "loops": ""
    },
	"audio_stop_music": {
        "desc": ""
    },
	"audio_music_gain": {
        "desc": "",
        "value": "",
        "time": ""
    },
	"ads_disable": {
        "desc": "",
        "num": ""
	},
	"ads_enable": {
        "desc": "",
        "x": "",
        "y": "",
        "num": ""
	},
	"ads_engagement_active": {
		"desc": ""
	},
	"ads_engagement_available": {
		"desc": ""
	},
	"ads_engagement_launch": {
		"desc": ""
	},
	"ads_event": {
        "desc": "",
        "stringid": ""
	},
	"ads_event_preload": {
        "desc": "",
        "stringid": ""
	},
	"ads_get_display_height": {
        "desc": "",
        "slotnum": ""
	},
	"ads_get_display_width": {
        "desc": "",
        "slotnum": ""
	},
	"ads_interstitial_available": {
		"desc": ""
	},
	"ads_interstitial_display": {
		"desc": ""
	},
	"ads_move": {
        "desc": "",
        "x": "",
        "y": "",
        "slotnum": ""
    },
	"ads_setup": {
        "desc": "",
        "user_uuid": "",
        "ad_app_key": ""
	},
	"ads_set_reward_callback": {
        "desc": "",
        "callback": ""
	},
    "playhaven_add_notification_badge": {
        "desc": "",
        "x": "",
        "y": "",
        "w": "",
        "h": "",
        "ident": ""
    },
	"playhaven_hide_notification_badge": {
        "desc": "",
        "x": "",
        "y": "",
        "w": "",
        "h": "",
        "ident": ""
    },
	"playhaven_position_notification_badge": {
        "desc": "",
        "x": "",
        "y": "",
        "w": "",
        "h": ""
    },
	"playhaven_update_notification_badge": {
        "desc": "",
        "x": "",
        "y": "",
        "w": "",
        "h": ""
    },
    "openfeint_accept_challenge": {
        "desc": ""
    },
	"openfeint_send_challenge": {
        "desc": "",
        "definition_string": "",
        "text_string": "",
        "data_string": ""
    },
	"openfeint_send_invite": {
        "desc": "",
        "definition_string": ""
    },
	"openfeint_send_result": {
        "desc": "",
        "challenge_result": "",
        "definition_string": ""
    },
	"openfeint_send_social": {
        "desc": "",
        "text_string": "",
        "suggested_message": "",
        "image_name": ""
    },
	"openfeint_set_url": {
        "desc": "",
        "url": ""
    },
	"openfeint_start": {
        "desc": ""
    },
	"achievement_map_achievement": {
        "desc": "",
        "gamecenter_string": "",
        "openfeint_string": ""
	},
	"achievement_map_leaderboard": {
        "desc": "",
        "gamecenter_string": "",
        "openfeint_string": "",
        "leaderboard_type": ""
	},
	"achievement_is_online": {
		"desc": ""
    },
    
    "background_add": {
        "desc": "",
        "fname": "",
        "removeback": "",
        "smooth": ""
    },
    "background_assign": {
        "desc": "",
        "ind": "",
        "source": ""
    },
    "background_create_color": {
        "desc": "",
        "w": "",
        "h": "",
        "col": ""
    },
    "background_create_colour": {
        "desc": "",
        "w": "",
        "h": "",
        "col": ""
    },
    "background_create_from_surface": {
        "desc": "",
        "id": "",
        "x": "",
        "y": "",
        "w": "",
        "h": "",
        "removeback": "",
        "smooth": ""
    },
    "background_create_gradient": {
        "desc": "",
        "w": "",
        "h": "",
        "col1": "",
        "col2": "",
        "kind": ""
    },
    "background_delete": {
        "desc": "",
        "ind": ""
    },
    "background_duplicate": {
        "desc": "",
        "ind": ""
    },
    "background_exists": {
        "desc": "",
        "ind": ""
    },
    "background_flush": {
        "desc": "",
        "ind": ""
    },
    "background_flush_multi": {
        "desc": "",
        "indarray": ""
    },
    "background_get_height": {
        "desc": "",
        "ind": ""
    },
    "background_get_name": {
        "desc": "",
        "ind": ""
    },
    "background_get_texture": {
        "desc": "",
        "back": ""
    },
    "background_get_uvs": {
        "desc": "",
        "back": ""
    },
    "background_get_width": {
        "desc": "",
        "ind": ""
    },
    "background_prefetch": {
        "desc": "",
        "ind": ""
    },
    "background_prefetch_multi": {
        "desc": "",
        "indarray": ""
    },
    "background_replace": {
        "desc": "",
        "ind": "",
        "fname": "",
        "removeback": "",
        "smooth": ""
    },
    "background_replace_background": {
        "desc": "",
        "ind": "",
        "fname": ""
    },
    "background_save": {
        "desc": "",
        "ind": "",
        "fname": ""
    },
    "background_set_alpha_from_background": {
        "desc": "",
        "ind": "",
        "alpha": ""
    },
    "draw_background": {
        "desc": "",
        "back": "",
        "x": "",
        "y": ""
    },
    "draw_background_ext": {
        "desc": "",
        "back": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "rot": "",
        "colour": "",
        "alpha": ""
    },
    "draw_background_general": {
        "desc": "",
        "back": "",
        "left": "",
        "top": "",
        "width": "",
        "height": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "rot": "",
        "c1": "",
        "c2": "",
        "c3": "",
        "c4": "",
        "alpha": ""
    },
    "draw_background_part": {
        "desc": "",
        "back": "",
        "left": "",
        "top": "",
        "width": "",
        "height": "",
        "x": "",
        "y": ""
    },
    "draw_background_part_ext": {
        "desc": "",
        "back": "",
        "left": "",
        "top": "",
        "width": "",
        "height": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "colour": "",
        "alpha": ""
    },
    "draw_background_stretched": {
        "desc": "",
        "back": "",
        "x": "",
        "y": "",
        "w": "",
        "h": ""
    },
    "draw_background_stretched_ext": {
        "desc": "",
        "back": "",
        "x": "",
        "y": "",
        "w": "",
        "h": "",
        "colour": "",
        "alpha": ""
    },
    "draw_background_tiled": {
        "desc": "",
        "back": "",
        "x": "",
        "y": ""
    },
    "draw_background_tiled_ext": {
        "desc": "",
        "back": "",
        "x": "",
        "y": "",
        "xscale": "",
        "yscale": "",
        "colour": "",
        "alpha": ""
    },
    "room_set_background": {
        "desc": "",
        "ind": "",
        "bind": "",
        "vis": "",
        "fore": "",
        "back": "",
        "x": "",
        "y": "",
        "htiled": "",
        "vtiled": "",
        "hspeed": "",
        "vspeed": "",
        "alpha": ""
    },
    "room_tile_add": {
        "desc": "",
        "ind": "",
        "back": "",
        "left": "",
        "top": "",
        "width": "",
        "hieght": "",
        "x": "",
        "y": "",
        "depth": ""
    },
    "room_tile_add_ext": {
        "desc": "",
        "ind": "",
        "back": "",
        "left": "",
        "top": "",
        "width": "",
        "hieght": "",
        "x": "",
        "y": "",
        "depth": "",
        "xscale": "",
        "yscale": "",
        "alpha": ""
    },
    "room_tile_clear": {
        "desc": "",
        "ind": ""
    },
    "tile_add": {
        "desc": "",
        "background": "",
        "left": "",
        "top": "",
        "width": "",
        "height": "",
        "x": "",
        "y": "",
        "depth": ""
    },
    "tile_delete": {
        "desc": "",
        "id": ""
    },
    "tile_exists": {
        "desc": "",
        "id": ""
    },
    "tile_get_alpha": {
        "desc": "",
        "id": ""
    },
    "tile_get_background": {
        "desc": "",
        "id": ""
    },
    "tile_get_blend": {
        "desc": "",
        "id": ""
    },
    "tile_get_count": {
        "desc": ""
    },
    "tile_get_depth": {
        "desc": "",
        "id": ""
    },
    "tile_get_height": {
        "desc": "",
        "id": ""
    },
    "tile_get_id": {
        "desc": "",
        "index": ""
    },
    "tile_get_ids": {
        "desc": ""
    },
    "tile_get_ids_at_depth": {
        "desc": "",
        "depth": ""
    },
    "tile_get_left": {
        "desc": "",
        "id": ""
    },
    "tile_get_top": {
        "desc": "",
        "id": ""
    },
    "tile_get_visible": {
        "desc": "",
        "id": ""
    },
    "tile_get_width": {
        "desc": "",
        "id": ""
    },
    "tile_get_x": {
        "desc": "",
        "id": ""
    },
    "tile_get_xscale": {
        "desc": "",
        "id": ""
    },
    "tile_get_y": {
        "desc": "",
        "id": ""
    },
    "tile_get_yscale": {
        "desc": "",
        "id": ""
    },
    "tile_layer_delete": {
        "desc": "",
        "depth": ""
    },
    "tile_layer_delete_at": {
        "desc": "",
        "depth": "",
        "x": "",
        "y": ""
    },
    "tile_layer_depth": {
        "desc": "",
        "depth": "",
        "newdepth": ""
    },
    "tile_layer_find": {
        "desc": "",
        "depth": "",
        "x": "",
        "y": ""
    },
    "tile_layer_hide": {
        "desc": "",
        "depth": ""
    },
    "tile_layer_shift": {
        "desc": "",
        "depth": "",
        "x": "",
        "y": ""
    },
    "tile_layer_show": {
        "desc": "",
        "depth": ""
    },
    "tile_set_alpha": {
        "desc": "",
        "id": "",
        "alpha": ""
    },
    "tile_set_background": {
        "desc": "",
        "id": "",
        "background": ""
    },
    "tile_set_blend": {
        "desc": "",
        "id": "",
        "colour": ""
    },
    "tile_set_depth": {
        "desc": "",
        "id": "",
        "depth": ""
    },
    "tile_set_position": {
        "desc": "",
        "id": "",
        "x": "",
        "y": ""
    },
    "tile_set_region": {
        "desc": "",
        "id": "",
        "left": "",
        "top": "",
        "width": "",
        "height": ""
    },
    "tile_set_scale": {
        "desc": "",
        "id": "",
        "xscale": "",
        "yscale": ""
    },
    "tile_set_visible": {
        "desc": "",
        "id": "",
        "visible": ""
    },
    "object_get_depth": {
        "desc": "",
        "ind": ""
    },
    "object_set_depth": {
        "desc": "",
        "ind": "",
        "depth": ""
    },
    "d3d_draw_block": {
        "desc": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": "",
        "texid": "",
        "hrepeat": "",
        "vrepeat": ""
    },
    "d3d_draw_cone": {
        "desc": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": "",
        "texid": "",
        "hrepeat": "",
        "vrepeat": "",
        "closed": "",
        "steps": ""
    },
    "d3d_draw_cylinder": {
        "desc": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": "",
        "texid": "",
        "hrepeat": "",
        "vrepeat": "",
        "closed": "",
        "steps": ""
    },
    "d3d_draw_ellipsoid": {
        "desc": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": "",
        "texid": "",
        "hrepeat": "",
        "vrepeat": "",
        "closed": "",
        "steps": ""
    },
    "d3d_draw_floor": {
        "desc": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": "",
        "texid": "",
        "hrepeat": "",
        "vrepeat": ""
    },
    "d3d_draw_wall": {
        "desc": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": "",
        "texid": "",
        "hrepeat": "",
        "vrepeat": ""
    },
    "d3d_end": {
        "desc": ""
    },
    "d3d_light_define_ambient": {
        "desc": "",
        "col": ""
    },
    "d3d_light_define_direction": {
        "desc": "",
        "ind": "",
        "dx": "",
        "dy": "",
        "dz": "",
        "col": ""
    },
    "d3d_light_define_point": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "z": "",
        "range": "",
        "col": ""
    },
    "d3d_light_enable": {
        "desc": "",
        "ind": "",
        "enable": ""
    },
    "d3d_model_block": {
        "desc": "",
        "ind": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": "",
        "hrepeat": "",
        "vrepeat": ""
    },
    "d3d_model_clear": {
        "desc": "",
        "ind": ""
    },
    "d3d_model_cone": {
        "desc": "",
        "ind": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": "",
        "hrepeat": "",
        "vrepeat": "",
        "closed": "",
        "steps": ""
    },
    "d3d_model_create": {
        "desc": ""
    },
    "d3d_model_cylinder": {
        "desc": "",
        "ind": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": "",
        "hrepeat": "",
        "vrepeat": "",
        "closed": "",
        "steps": ""
    },
    "d3d_model_destroy": {
        "desc": ""
    },
    "d3d_model_draw": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "z": "",
        "texid": ""
    },
    "d3d_model_ellipsoid": {
        "desc": "",
        "ind": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": "",
        "hrepeat": "",
        "vrepeat": "",
        "closed": ""
    },
    "d3d_model_floor": {
        "desc": "",
        "ind": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": "",
        "hrepeat": "",
        "vrepeat": ""
    },
    "d3d_model_load": {
        "desc": "",
        "ind": "",
        "fname": ""
    },
    "d3d_model_primitive_begin": {
        "desc": "",
        "ind": "",
        "kind": ""
    },
    "d3d_model_primitive_end": {
        "desc": "",
        "ind": ""
    },
    "d3d_model_save": {
        "desc": "",
        "ind": "",
        "fname": ""
    },
    "d3d_model_vertex": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "z": ""
    },
    "d3d_model_vertex_color": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "z": "",
        "col": "",
        "alpha": ""
    },
    "d3d_model_vertex_colour": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "z": "",
        "col": "",
        "alpha": ""
    },
    "d3d_model_vertex_normal": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "z": "",
        "nx": "",
        "ny": "",
        "nz": ""
    },
    "d3d_model_vertex_normal_color": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "z": "",
        "nx": "",
        "ny": "",
        "nz": "",
        "col": "",
        "alpha": ""
    },
    "d3d_model_vertex_normal_colour": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "z": "",
        "nx": "",
        "ny": "",
        "nz": "",
        "col": "",
        "alpha": ""
    },
    "d3d_model_vertex_normal_texture": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "z": "",
        "nx": "",
        "ny": "",
        "nz": "",
        "xtex": "",
        "ytex": ""
    },
    "d3d_model_vertex_normal_texture_color": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "z": "",
        "nx": "",
        "ny": "",
        "nz": "",
        "xtex": "",
        "ytex": "",
        "col": "",
        "alpha": ""
    },
    "d3d_model_vertex_normal_texture_colour": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "z": "",
        "nx": "",
        "ny": "",
        "nz": "",
        "xtex": "",
        "ytex": "",
        "col": "",
        "alpha": ""
    },
    "d3d_model_vertex_texture": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "z": "",
        "xtex": "",
        "ytex": ""
    },
    "d3d_model_vertex_texture_color": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "z": "",
        "xtex": "",
        "ytex": "",
        "col": "",
        "alpha": ""
    },
    "d3d_model_vertex_texture_colour": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "z": "",
        "xtex": "",
        "ytex": "",
        "col": "",
        "alpha": ""
    },
    "d3d_model_wall": {
        "desc": "",
        "ind": "",
        "x1": "",
        "y1": "",
        "z1": "",
        "x2": "",
        "y2": "",
        "z2": "",
        "hrepeat": "",
        "vrepeat": ""
    },
    "d3d_primitive_begin": {
        "desc": "",
        "kind": ""
    },
    "d3d_primitive_begin_texture": {
        "desc": "",
        "kind": "",
        "texid": ""
    },
    "d3d_primitive_end": {
        "desc": ""
    },
    "d3d_set_culling": {
        "desc": "",
        "cull": ""
    },
    "d3d_set_depth": {
        "desc": "",
        "depth": ""
    },
    "d3d_set_fog": {
        "desc": "",
        "enable": "",
        "colour": "",
        "start": "",
        "end": ""
    },
    "d3d_set_hidden": {
        "desc": "",
        "hidden": ""
    },
    "d3d_set_lighting": {
        "desc": "",
        "enable": ""
    },
    "d3d_set_perspective": {
        "desc": "",
        "enable": ""
    },
    "d3d_set_projection": {
        "desc": "",
        "xfrom": "",
        "yfrom": "",
        "zfrom": "",
        "xto": "",
        "yto": "",
        "zto": "",
        "xup": "",
        "yup": "",
        "zup": ""
    },
    "d3d_set_projection_ext": {
        "desc": "",
        "xfrom": "",
        "yfrom": "",
        "zfrom": "",
        "xto": "",
        "yto": "",
        "zto": "",
        "xup": "",
        "yup": "",
        "zup": "",
        "angle": "",
        "aspect": "",
        "znear": "",
        "zfar": ""
    },
    "d3d_set_projection_ortho": {
        "desc": "",
        "x": "",
        "y": "",
        "w": "",
        "h": "",
        "angle": ""
    },
    "d3d_set_projection_perspective": {
        "desc": "",
        "x": "",
        "y": "",
        "w": "",
        "h": "",
        "angle": ""
    },
    "d3d_set_shading": {
        "desc": "",
        "smooth": ""
    },
    "d3d_set_zwriteenable": {
        "desc": "",
        "on_off": ""
    },
    "d3d_start": {
        "desc": ""
    },
    "d3d_transform_add_rotation_axis": {
        "desc": "",
        "xa": "",
        "ya": "",
        "za": "",
        "angle": ""
    },
    "d3d_transform_add_rotation_x": {
        "desc": "",
        "angle": ""
    },
    "d3d_transform_add_rotation_y": {
        "desc": "",
        "angle": ""
    },
    "d3d_transform_add_rotation_z": {
        "desc": "",
        "angle": ""
    },
    "d3d_transform_add_scaling": {
        "desc": "",
        "xs": "",
        "ys": "",
        "zs": ""
    },
    "d3d_transform_add_translation": {
        "desc": "",
        "xt": "",
        "yt": "",
        "zt": ""
    },
    "d3d_transform_set_identity": {
        "desc": ""
    },
    "d3d_transform_set_rotation_axis": {
        "desc": "",
        "xa": "",
        "ya": "",
        "za": "",
        "angle": ""
    },
    "d3d_transform_set_rotation_x": {
        "desc": "",
        "angle": ""
    },
    "d3d_transform_set_rotation_y": {
        "desc": "",
        "angle": ""
    },
    "d3d_transform_set_rotation_z": {
        "desc": "",
        "angle": ""
    },
    "d3d_transform_set_scaling": {
        "desc": "",
        "xs": "",
        "ys": "",
        "zs": ""
    },
    "d3d_transform_set_translation": {
        "desc": "",
        "xt": "",
        "yt": "",
        "zt": ""
    },
    "d3d_transform_stack_clear": {
        "desc": ""
    },
    "d3d_transform_stack_discard": {
        "desc": ""
    },
    "d3d_transform_stack_empty": {
        "desc": ""
    },
    "d3d_transform_stack_pop": {
        "desc": ""
    },
    "d3d_transform_stack_push": {
        "desc": ""
    },
    "d3d_transform_stack_top": {
        "desc": ""
    },
    "d3d_transform_vertex": {
        "desc": "",
        "x": "",
        "y": "",
        "z": ""
    },
    "d3d_vertex": {
        "desc": "",
        "x": "",
        "y": "",
        "z": ""
    },
    "d3d_vertex_color": {
        "desc": "",
        "x": "",
        "y": "",
        "z": "",
        "col": "",
        "alpha": ""
    },
    "d3d_vertex_colour": {
        "desc": "",
        "x": "",
        "y": "",
        "z": "",
        "col": "",
        "alpha": ""
    },
    "d3d_vertex_normal": {
        "desc": "",
        "x": "",
        "y": "",
        "z": "",
        "nx": "",
        "ny": "",
        "nz": ""
    },
    "d3d_vertex_normal_color": {
        "desc": "",
        "x": "",
        "y": "",
        "z": "",
        "nx": "",
        "ny": "",
        "nz": "",
        "col": "",
        "alpha": ""
    },
    "d3d_vertex_normal_colour": {
        "desc": "",
        "x": "",
        "y": "",
        "z": "",
        "nx": "",
        "ny": "",
        "nz": "",
        "col": "",
        "alpha": ""
    },
    "d3d_vertex_normal_texture": {
        "desc": "",
        "x": "",
        "y": "",
        "z": "",
        "nx": "",
        "ny": "",
        "nz": "",
        "xtex": "",
        "ytex": ""
    },
    "d3d_vertex_normal_texture_color": {
        "desc": "",
        "x": "",
        "y": "",
        "z": "",
        "nx": "",
        "ny": "",
        "nz": "",
        "xtex": "",
        "ytex": "",
        "col": "",
        "alpha": ""
    },
    "d3d_vertex_normal_texture_colour": {
        "desc": "",
        "x": "",
        "y": "",
        "z": "",
        "nx": "",
        "ny": "",
        "nz": "",
        "xtex": "",
        "ytex": "",
        "col": "",
        "alpha": ""
    },
    "d3d_vertex_texture": {
        "desc": "",
        "x": "",
        "y": "",
        "z": "",
        "xtex": "",
        "ytex": ""
    },
    "d3d_vertex_texture_color": {
        "desc": "",
        "x": "",
        "y": "",
        "z": "",
        "xtex": "",
        "ytex": "",
        "col": "",
        "alpha": ""
    },
    "d3d_vertex_texture_colour": {
        "desc": "",
        "x": "",
        "y": "",
        "z": "",
        "xtex": "",
        "ytex": "",
        "col": "",
        "alpha": ""
    },
    "display_set_windows_vertex_buffer_method": {
        "desc": "",
        "method": ""
    },
    "display_get_windows_vertex_buffer_method": {
        "desc": ""
    },
    "display_set_windows_alternate_sync": {
        "desc": "",
        "enable": ""
    },
    "display_get_windows_alternate_sync": {
        "desc": ""
    },
    "room_set_view": {
        "desc": "",
        "ind": "",
        "vind": "",
        "vis": "",
        "xview": "",
        "yview": "",
        "wview": "",
        "hview": "",
        "xport": "",
        "yport": "",
        "wport": "",
        "hport": "",
        "hborder": "",
        "vborder": "",
        "hspeed": "",
        "vspeed": "",
        "obj": ""
    },
    "immersion_play_effect": {
        "desc": "",
        "effect": ""
    },
    "immersion_stop": {
        "desc": ""
    },
    "analytics_event": {
        "desc": "",
        "string": ""
    },
    "analytics_event_ext": {
        "desc": "",
        "string": "",
        "string_param_name1": "",
        "number_value1": "",
        "...": ""
    },

    "background_add_background": {
        "desc": "",
        "fname": ""
    },
    "background_create_from_screen": {
        "desc": "",
        "x": "",
        "y": "",
        "w": "",
        "h": "",
        "removeback": "",
        "smooth": ""
    },
    "cd_close_door": {
        "desc": ""
    },
	"cd_init": {
        "desc": ""
    },
    "cd_length": {
        "desc": ""
    },
	"cd_number": {
        "desc": ""
    },
	"cd_open_door": {
        "desc": ""
    },
	"cd_pause": {
        "desc": ""
    },
	"cd_paused": {
        "desc": ""
    },
	"cd_play": {
        "desc": "",
        "first": "",
        "last": ""
    },
	"cd_playing": {
        "desc": ""
    },
	"cd_position": {
        "desc": ""
    },
	"cd_present": {
        "desc": ""
    },
	"cd_resume": {
        "desc": ""
    },
	"cd_set_position": {
        "desc": "",
        "pos": ""
    },
	"cd_set_track_position": {
        "desc": "",
        "pos": ""
    },
	"cd_stop": {
        "desc": ""
    },
	"cd_track": {
        "desc": ""
    },
	"cd_track_length": {
        "desc": "",
        "n": ""
    },
	"cd_track_position": {
        "desc": ""
    },
    "date_create_date": {
        "desc": "",
        "year": "",
        "month": "",
        "day": ""
    },
    "date_create_time": {
        "desc": "",
        "hour": "",
        "minute": "",
        "second": ""
    },
	"date_current_date": {
        "desc": ""
    },
    "date_current_time": {
        "desc": ""
    },
    "date_valid_date": {
        "desc": "",
        "year": "",
        "month": "",
        "day": ""
    },
    "date_valid_time": {
        "desc": "",
        "hour": "",
        "minute": "",
        "second": ""
    },
    "discard_include_file": {
        "desc": "",
        "fname": ""
    },
	"disk_free": {
        "desc": "",
        "drive": ""
    },
	"disk_size": {
        "desc": "",
        "drive": ""
    },
	"display_set_all": {
        "desc": "",
        "w": "",
        "h": "",
        "frequency": "",
        "coldepth": ""
    },
	"display_set_colordepth": {
        "desc": "",
        "coldepth": ""
    },
	"display_set_frequency": {
        "desc": "",
        "frequency": ""
    },
	"display_set_size": {
        "desc": "",
        "w": "",
        "h": ""
    },
	"display_test_all": {
        "desc": "",
        "w": "",
        "h": "",
        "frequency": "",
        "coldepth": ""
    },
    "execute_file": {
        "desc": "",
        "fname": "",
        "arg0": "",
        "arg1": "",
        "...": ""
    },
    "execute_program": {
        "desc": "",
        "fname": "",
        "arg": "",
        "wait": ""
    },
	"execute_shell": {
        "desc": "",
        "fname": "",
        "arg": ""
    },
    "execute_string": {
        "desc": "",
        "str": "",
        "arg0": "",
        "arg1": "",
        "...": ""
    },
	"export_include_file": {
        "desc": "",
        "fname": ""
    },
	"export_include_file_location": {
        "desc": "",
        "fname": "",
        "location": ""
    },
    "get_color": {
        "desc": "",
        "defcol": ""
    },
	"get_directory": {
        "desc": "",
        "dname": ""
    },
	"get_directory_alt": {
        "desc": "",
        "capt": "",
        "root": ""
    },
    "highscore_add_current": {
        "desc": ""
    },
    "highscore_set_background": {
        "desc": "",
        "back": ""
    },
	"highscore_set_border": {
        "desc": "",
        "show": ""
    },
	"highscore_set_colors": {
        "desc": "",
        "back": "",
        "new": "",
        "other": ""
    },
	"highscore_set_font": {
        "desc": "",
        "name": "",
        "size": "",
        "style": ""
    },
	"highscore_set_strings": {
        "desc": "",
        "caption": "",
        "nobody": "",
        "escape": ""
    },
	"highscore_show": {
        "desc": "",
        "numb": ""
    },
	"highscore_show_ext": {
        "desc": "",
        "numb": "",
        "back": "",
        "border": "",
        "col1": "",
        "col2": "",
        "name": "",
        "size": ""
    },
    "io_handle": {
        "desc": ""
    },
    "keyboard_wait": {
        "desc": ""
    },
	"MCI_command": {
        "desc": "",
        "str": ""
    },
	"message_alpha": {
        "desc": "",
        "alpha": ""
    },
	"message_background": {
        "desc": "",
        "back": ""
    },
	"message_button": {
        "desc": "",
        "sprite": ""
    },
	"message_button_font": {
        "desc": "",
        "name": "",
        "size": "",
        "colour": "",
        "style": ""
    },
	"message_caption": {
        "desc": "",
        "show": "",
        "str": ""
    },
	"message_input_color": {
        "desc": "",
        "col": ""
    },
	"message_input_font": {
        "desc": "",
        "name": "",
        "size": "",
        "colour": "",
        "style": ""
    },
	"message_mouse_color": {
        "desc": "",
        "col": ""
    },
	"message_position": {
        "desc": "",
        "x": "",
        "y": ""
    },
	"message_size": {
        "desc": "",
        "w": "",
        "h": ""
    },
	"message_text_charset": {
        "desc": "",
        "type": "",
        "charset_id": ""
    },
	"message_text_font": {
        "desc": "",
        "name": "",
        "size": "",
        "colour": "",
        "style": ""
    },
    "mouse_wait": {
        "desc": ""
    },
    "object_add": {
        "desc": ""
    },
	"object_delete": {
        "desc": "",
        "ind": ""
    },
	"object_event_add": {
        "desc": "",
        "ind": "",
        "evtype": "",
        "evnumb": "",
        "codestr": ""
    },
	"object_event_clear": {
        "desc": "",
        "ind": "",
        "evtype": "",
        "evnumb": ""
    },
	"part_attractor_clear": {
        "desc": "",
        "ps": "",
        "ind": ""
    },
	"part_attractor_create": {
        "desc": "",
        "ps": ""
    },
	"part_attractor_destroy": {
        "desc": "",
        "ps": "",
        "ind": ""
    },
	"part_attractor_destroy_all": {
        "desc": "",
        "ps": ""
    },
	"part_attractor_exists": {
        "desc": "",
        "ps": "",
        "ind": ""
    },
	"part_attractor_force": {
        "desc": "",
        "ps": "",
        "ind": "",
        "force": "",
        "dist": "",
        "kind": "",
        "additive": ""
    },
	"part_attractor_position": {
        "desc": "",
        "ps": "",
        "ind": "",
        "x": "",
        "y": ""
    },
	"part_changer_clear": {
        "desc": "",
        "ps": "",
        "ind": ""
    },
	"part_changer_create": {
        "desc": "",
        "ps": ""
    },
	"part_changer_destroy": {
        "desc": "",
        "ps": "",
        "ind": ""
    },
	"part_changer_destroy_all": {
        "desc": "",
        "ps": ""
    },
	"part_changer_exists": {
        "desc": "",
        "ps": "",
        "ind": ""
    },
	"part_changer_kind": {
        "desc": "",
        "ps": "",
        "ind": "",
        "kind": ""
    },
	"part_changer_region": {
        "desc": "",
        "ps": "",
        "ind": "",
        "xmin": "",
        "xmax": "",
        "ymin": "",
        "ymax": "",
        "shape": ""
    },
	"part_changer_types": {
        "desc": "",
        "ps": "",
        "ind": "",
        "parttype1": "",
        "parttype2": ""
    },
	"part_deflector_clear": {
        "desc": "",
        "ps": "",
        "ind": ""
    },
	"part_deflector_create": {
        "desc": "",
        "ps": ""
    },
	"part_deflector_destroy": {
        "desc": "",
        "ps": "",
        "ind": ""
    },
	"part_deflector_destroy_all": {
        "desc": "",
        "ps": ""
    },
	"part_deflector_exists": {
        "desc": "",
        "ps": "",
        "ind": ""
    },
	"part_deflector_friction": {
        "desc": "",
        "ps": "",
        "ind": "",
        "amount": ""
    },
	"part_deflector_kind": {
        "desc": "",
        "ps": "",
        "ind": "",
        "kind": ""
    },
	"part_deflector_region": {
        "desc": "",
        "ps": "",
        "ind": "",
        "xmin": "",
        "xmax": "",
        "ymin": "",
        "ymax": ""
    },
	"part_destroyer_clear": {
        "desc": "",
        "ps": "",
        "ind": ""
    },
	"part_destroyer_create": {
        "desc": "",
        "ps": ""
    },
	"part_destroyer_destroy": {
        "desc": "",
        "ps": "",
        "ind": ""
    },
	"part_destroyer_destroy_all": {
        "desc": "",
        "ps": ""
    },
	"part_destroyer_exists": {
        "desc": "",
        "ps": "",
        "ind": ""
    },
	"part_destroyer_region": {
        "desc": "",
        "ps": "",
        "ind": "",
        "xmin": "",
        "xmax": "",
        "ymin": "",
        "ymax": "",
        "shape": ""
    },
    "registry_exists": {
        "desc": "",
        "name": ""
    },
	"registry_exists_ext": {
        "desc": "",
        "key": "",
        "name": ""
    },
	"registry_read_real": {
        "desc": "",
        "name": ""
    },
	"registry_read_real_ext": {
        "desc": "",
        "key": "",
        "name": ""
    },
	"registry_read_string": {
        "desc": "",
        "name": ""
    },
	"registry_read_string_ext": {
        "desc": "",
        "key": "",
        "name": ""
    },
	"registry_set_root": {
        "desc": "",
        "root": ""
    },
	"registry_write_real": {
        "desc": "",
        "name": "",
        "value": ""
    },
	"registry_write_real_ext": {
        "desc": "",
        "key": "",
        "name": "",
        "value": ""
    },
	"registry_write_string": {
        "desc": "",
        "name": "",
        "str": ""
    },
	"registry_write_string_ext": {
        "desc": "",
        "key": "",
        "name": "",
        "str": ""
    },
    "room_set_caption": {
        "desc": "",
        "ind": "",
        "str": ""
    },
	"room_set_code": {
        "desc": "",
        "ind": "",
        "codestr": ""
    },
    "screen_redraw": {
        "desc": ""
    },
    "screen_refresh": {
        "desc": ""
    },
    "screen_wait_vsync": {
        "desc": ""
    },
    "script_get_text": {
        "desc": "",
        "ind": ""
    },
	"set_application_title": {
        "desc": "",
        "title": ""
    },
	"set_automatic_draw": {
        "desc": "",
        "value": ""
    },
	"set_program_priority": {
        "desc": "",
        "priority": ""
    },
	"set_synchronization": {
        "desc": "",
        "value": ""
    },
    "show_menu": {
        "desc": "",
        "str": "",
        "def": ""
    },
	"show_menu_pos": {
        "desc": "",
        "x": "",
        "y": "",
        "str": "",
        "def": ""
    },
    "show_message_ext": {
        "desc": "",
        "str": "",
        "but1": "",
        "but2": "",
        "but3": ""
    },
    "sleep": {
        "desc": "",
        "millisec": ""
    },
	"sound_3d_set_sound_cone": {
        "desc": "",
        "snd": "",
        "x": "",
        "y": "",
        "z": "",
        "anglein": "",
        "angleout": "",
        "voloutside": ""
    },
	"sound_3d_set_sound_distance": {
        "desc": "",
        "snd": "",
        "mindist": "",
        "maxdist": ""
    },
	"sound_3d_set_sound_position": {
        "desc": "",
        "snd": "",
        "x": "",
        "y": "",
        "z": ""
    },
	"sound_3d_set_sound_velocity": {
        "desc": "",
        "snd": "",
        "x": "",
        "y": "",
        "z": ""
    },
	"sound_add": {
        "desc": "",
        "fname": "",
        "kind": "",
        "preload": ""
    },
	"sound_background_tempo": {
        "desc": "",
        "factor": ""
    },
	"sound_effect_chorus": {
        "desc": "",
        "snd": "",
        "wetdry": "",
        "depth": "",
        "feedback": "",
        "frequency": "",
        "wave": "",
        "delay": "",
        "phase": ""
    },
	"sound_effect_compressor": {
        "desc": "",
        "snd": "",
        "gain": "",
        "attack": "",
        "release": "",
        "threshold": "",
        "ratio": "",
        "delay": ""
    },
	"sound_effect_echo": {
        "desc": "",
        "snd": "",
        "wetdry": "",
        "feedback": "",
        "leftdelay": "",
        "rightdelay": "",
        "pandelay": ""
    },
	"sound_effect_equalizer": {
        "desc": "",
        "snd": "",
        "center": "",
        "bandwidth": "",
        "gain": ""
    },
	"sound_effect_flanger": {
        "desc": "",
        "snd": "",
        "wetdry": "",
        "depth": "",
        "feedback": "",
        "frequency": "",
        "wave": "",
        "delay": "",
        "phase": ""
    },
	"sound_effect_gargle": {
        "desc": "",
        "snd": "",
        "rate": "",
        "wave": ""
    },
	"sound_effect_reverb": {
        "desc": "",
        "snd": "",
        "gain": "",
        "mix": "",
        "time": "",
        "ratio": ""
    },
	"sound_effect_set": {
        "desc": "",
        "snd": "",
        "effect": ""
    },
	"sound_pan": {
        "desc": "",
        "index": "",
        "value": ""
    },
	"sound_replace": {
        "desc": "",
        "ind": "",
        "fname": "",
        "kind": "",
        "preload": ""
    },
	"sound_set_search_directory": {
        "desc": "",
        "dir": ""
    },
	"splash_set_adapt": {
        "desc": "",
        "adapt": ""
    },
	"splash_set_border": {
        "desc": "",
        "border": ""
    },
	"splash_set_caption": {
        "desc": "",
        "cap": ""
    },
	"splash_set_close_button": {
        "desc": "",
        "show": ""
    },
	"splash_set_color": {
        "desc": "",
        "col": ""
    },
	"splash_set_cursor": {
        "desc": "",
        "vis": ""
    },
	"splash_set_fullscreen": {
        "desc": "",
        "full": ""
    },
	"splash_set_interrupt": {
        "desc": "",
        "interrupt": ""
    },
	"splash_set_main": {
        "desc": "",
        "main": ""
    },
	"splash_set_position": {
        "desc": "",
        "x": "",
        "y": ""
    },
	"splash_set_scale": {
        "desc": "",
        "scale": ""
    },
	"splash_set_size": {
        "desc": "",
        "w": "",
        "h": ""
    },
	"splash_set_stop_key": {
        "desc": "",
        "stop": ""
    },
	"splash_set_stop_mouse": {
        "desc": "",
        "stop": ""
    },
	"splash_set_top": {
        "desc": "",
        "top": ""
    },
	"splash_show_image": {
        "desc": "",
        "fname": "",
        "delay": ""
    },
	"splash_show_text": {
        "desc": "",
        "fname": "",
        "delay": ""
    },
	"splash_show_video": {
        "desc": "",
        "fname": "",
        "loop": ""
    },
	"splash_show_web": {
        "desc": "",
        "url": "",
        "delay": ""
    },
    "sprite_add_from_screen": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "w": "",
        "h": "",
        "removeback": "",
        "smooth": ""
    },
    "sprite_add_sprite": {
        "desc": "",
        "fname": ""
    },
    "sprite_create_from_screen": {
        "desc": "",
        "x": "",
        "y": "",
        "w": "",
        "h": "",
        "removeback": "",
        "smooth": "",
        "xorig": "",
        "yorig": ""
    },
    "sprite_replace_sprite": {
        "desc": "",
        "ind": "",
        "fname": ""
    },
    "timeline_moment_add": {
        "desc": "",
        "ind": "",
        "step": "",
        "codestr": ""
    },
    "transition_define": {
        "desc": "",
        "kind": "",
        "name": ""
    },
	"transition_exists": {
        "desc": "",
        "kind": ""
    },
	"variable_global_array2_get": {
        "desc": "",
        "name": "",
        "ind1": "",
        "ind2": ""
    },
	"variable_global_array2_set": {
        "desc": "",
        "name": "",
        "ind1": "",
        "ind2": "",
        "value": ""
    },
	"variable_global_array_get": {
        "desc": "",
        "name": "",
        "ind": ""
    },
	"variable_global_array_set": {
        "desc": "",
        "name": "",
        "ind": "",
        "value": ""
    },
    "variable_local_array2_get": {
        "desc": "",
        "name": "",
        "ind1": "",
        "ind2": ""
    },
	"variable_local_array2_set": {
        "desc": "",
        "name": "",
        "ind1": "",
        "ind2": "",
        "value": ""
    },
	"variable_local_array_get": {
        "desc": "",
        "name": "",
        "ind": ""
    },
	"variable_local_array_set": {
        "desc": "",
        "name": "",
        "ind": "",
        "value": ""
    },
	"variable_local_exists": {
        "desc": "",
        "name": ""
    },
	"variable_local_get": {
        "desc": "",
        "name": ""
    },
	"variable_local_set": {
        "desc": "",
        "name": "",
        "value": ""
    },
    "window_default": {
        "desc": ""
    },
    "window_get_region_height": {
        "desc": ""
    },
	"window_get_region_scale": {
        "desc": ""
    },
	"window_get_region_width": {
        "desc": ""
    },
	"window_get_showborder": {
        "desc": ""
    },
	"window_get_showicons": {
        "desc": ""
    },
	"window_get_sizeable": {
        "desc": ""
    },
	"window_get_stayontop": {
        "desc": ""
    },
    "window_get_visible": {
        "desc": ""
    },
    "window_set_region_scale": {
        "desc": "",
        "scale": "",
        "adaptwindow": ""
    },
	"window_set_region_size": {
        "desc": "",
        "w": "",
        "h": "",
        "adaptwindow": ""
    },
	"window_set_showborder": {
        "desc": "",
        "show": ""
    },
	"window_set_showicons": {
        "desc": "",
        "show": ""
    },
	"window_set_sizeable": {
        "desc": "",
        "sizeable": ""
    },
	"window_set_stayontop": {
        "desc": "",
        "stay": ""
    },
	"window_set_visible": {
        "desc": "",
        "visible": ""
    },
	"window_views_mouse_set": {
        "desc": "",
        "x": "",
        "y": ""
    },
	"window_view_mouse_set": {
        "desc": "",
        "id": "",
        "x": "",
        "y": ""
    },
    "texture_preload": {
        "desc": "",
        "texid": ""
    },
    "texture_set_priority": {
        "desc": "",
        "texid": "",
        "prio": ""
    },
    "display_get_colourdepth": {
        "desc": ""
    },
    "display_get_frequency": {
        "desc": ""
    },
    "show_info": {
        "desc": ""
    },
    "load_info": {
        "desc": "",
        "fname": ""
    },

    "string_hash_to_newline": {
        "desc": "",
        "str": ""
    },
	"game_set_speed": {
        "desc": "",
        "value": "",
        "type": ""
    },
	"game_get_speed": {
        "desc": "",
        "type": ""
    },
	"sprite_set_speed": {
        "desc": "",
        "ind": "",
        "speed": "",
        "type": ""
    },
	"sprite_get_speed_type": {
        "desc": "",
        "ind": ""
    },
	"sprite_get_speed": {
        "desc": "",
        "ind": ""
    },
	"texture_get_uvs": {
        "desc": "",
        "texid": ""
    },
	"room_get_camera": {
        "desc": "",
        "ind": "",
        "vind": ""
    },
	"room_set_camera": {
        "desc": "",
        "ind": "",
        "vind": "",
        "camera": ""
    },
	"room_get_viewport": {
        "desc": "",
        "vind": ""
    },
	"room_set_viewport": {
        "desc": "",
        "ind": "",
        "vind": "",
        "vis": "",
        "xport": "",
        "yport": "",
        "wport": "",
        "hport": ""
    },
	"ds_list_set": {
        "desc": "",
        "id": "",
        "pos": "",
        "value": ""
    },
	"ds_map_set": {
        "desc": "",
        "id": "",
        "key": "",
        "value": ""
    },
	"part_system_create_layer": {
        "desc": "",
        "layer": "",
        "persistent": ""
    },
	"part_system_get_layer": {
        "desc": "",
        "ind": ""
    },
	"part_system_layer": {
        "desc": "",
        "ind": "",
        "layer": ""
    },
	"matrix_build_identity": {
        "desc": ""
    },
	"matrix_build_lookat": {
        "desc": "",
        "xfrom": "",
        "yfrom": "",
        "zfrom": "",
        "xto": "",
        "yto": "",
        "zto": "",
        "xup": "",
        "yup": "",
        "zup": ""
    },
	"matrix_build_projection_ortho": {
        "desc": "",
        "width": "",
        "height": "",
        "znear": "",
        "zfar": ""
    },
	"matrix_build_projection_perspective": {
        "desc": "",
        "width": "",
        "height": "",
        "znear": "",
        "zfar": ""
    },
	"matrix_build_projection_perspective_fov": {
        "desc": "",
        "fov_y": "",
        "height": "",
        "znear": "",
        "zfar": ""
    },
	"matrix_transform_vertex": {
        "desc": "",
        "matrix": "",
        "x": "",
        "y": "",
        "z": ""
    },
	"matrix_stack_push": {
        "desc": "",
        "...": ""
    },
	"matrix_stack_pop": {
        "desc": ""
    },
	"matrix_stack_set": {
        "desc": "",
        "matrix": ""
    },
	"matrix_stack_clear": {
        "desc": ""
    },
	"matrix_stack_top": {
        "desc": ""
    },
	"matrix_stack_is_empty": {
        "desc": ""
    },
	"gpu_set_blendenable": {
        "desc": "",
        "enable": ""
    },
	"gpu_set_ztestenable": {
        "desc": "",
        "enable": ""
    },
	"gpu_set_zfunc": {
        "desc": "",
        "enable": ""
    },
	"gpu_set_zwriteenable": {
        "desc": "",
        "enable": ""
    },
	"gpu_set_fog": {
        "desc": "",
        "enable": "",
        "col": "",
        "start": "",
        "end": ""
    },
	"gpu_set_cullmode": {
        "desc": "",
        "cullmode": ""
    },
	"gpu_set_blendmode": {
        "desc": "",
        "mode": ""
    },
	"gpu_set_blendmode_ext": {
        "desc": "",
        "src": "",
        "dest": ""
    },
	"gpu_set_blendmode_ext_sepalpha": {
        "desc": "",
        "src": "",
        "dest": "",
        "srcalpha": "",
        "destalpha": ""
    },
	"gpu_set_colorwriteenable": {
        "desc": "",
        "red": "",
        "green": "",
        "blue": "",
        "alpha": ""
    },
	"gpu_set_colourwriteenable": {
        "desc": "",
        "red": "",
        "green": "",
        "blue": "",
        "alpha": ""
    },
	"gpu_set_alphatestenable": {
        "desc": "",
        "enable": ""
    },
	"gpu_set_alphatestref": {
        "desc": "",
        "value": ""
    },
	"gpu_set_alphatestfunc": {
        "desc": "",
        "cmp_func": ""
    },
	"gpu_set_texfilter": {
        "desc": "",
        "linear": ""
    },
	"gpu_set_texfilter_ext": {
        "desc": "",
        "sampler_id": "",
        "linear": ""
    },
	"gpu_set_texrepeat": {
        "desc": "",
        "repeat": ""
    },
	"gpu_set_texrepeat_ext": {
        "desc": "",
        "sampler_id": "",
        "repeat": ""
    },
	"gpu_set_tex_filter": {
        "desc": "",
        "linear": ""
    },
	"gpu_set_tex_filter_ext": {
        "desc": "",
        "sampler_id": "",
        "linear": ""
    },
	"gpu_set_tex_repeat": {
        "desc": "",
        "repeat": ""
    },
	"gpu_set_tex_repeat_ext": {
        "desc": "",
        "sampler_id": "",
        "repeat": ""
    },
	"gpu_set_tex_mip_filter": {
        "desc": "",
        "filter": ""
    },
	"gpu_set_tex_mip_filter_ext": {
        "desc": "",
        "sampler_id": "",
        "filter": ""
    },
	"gpu_set_tex_mip_bias": {
        "desc": "",
        "bias": ""
    },
	"gpu_set_tex_mip_bias_ext": {
        "desc": "",
        "sampler_id": "",
        "bias": ""
    },
	"gpu_set_tex_min_mip": {
        "desc": "",
        "minmip": ""
    },
	"gpu_set_tex_min_mip_ext": {
        "desc": "",
        "sampler_id": "",
        "minmip": ""
    },
	"gpu_set_tex_max_mip": {
        "desc": "",
        "maxmip": ""
    },
	"gpu_set_tex_max_mip_ext": {
        "desc": "",
        "sampler_id": "",
        "maxmip": ""
    },
	"gpu_set_tex_max_aniso": {
        "desc": "",
        "maxaniso": ""
    },
	"gpu_set_tex_max_aniso_ext": {
        "desc": "",
        "sampler_id": "",
        "maxaniso": ""
    },
	"gpu_set_tex_mip_enable": {
        "desc": "",
        "setting": ""
    },
	"gpu_set_tex_mip_enable_ext": {
        "desc": "",
        "sampler_id": "",
        "setting": ""
    },
	"gpu_get_blendenable": {
        "desc": ""
    },
	"gpu_get_ztestenable": {
        "desc": ""
    },
	"gpu_get_zfunc": {
        "desc": ""
    },
	"gpu_get_zwriteenable": {
        "desc": ""
    },
	"gpu_get_fog": {
        "desc": ""
    },
	"gpu_get_cullmode": {
        "desc": ""
    },
	"gpu_get_blendmode": {
        "desc": ""
    },
	"gpu_get_blendmode_ext": {
        "desc": ""
    },
	"gpu_get_blendmode_ext_sepalpha": {
        "desc": ""
    },
	"gpu_get_blendmode_src": {
        "desc": ""
    },
	"gpu_get_blendmode_dest": {
        "desc": ""
    },
	"gpu_get_blendmode_srcalpha": {
        "desc": ""
    },
	"gpu_get_blendmode_destalpha": {
        "desc": ""
    },
	"gpu_get_colorwriteenable": {
        "desc": ""
    },
	"gpu_get_colourwriteenable": {
        "desc": ""
    },
	"gpu_get_alphatestenable": {
        "desc": ""
    },
	"gpu_get_alphatestref": {
        "desc": ""
    },
	"gpu_get_alphatestfunc": {
        "desc": ""
    },
	"gpu_get_texfilter": {
        "desc": ""
    },
	"gpu_get_texfilter_ext": {
        "desc": "",
        "sampler_id": ""
    },
	"gpu_get_texrepeat": {
        "desc": ""
    },
	"gpu_get_texrepeat_ext": {
        "desc": "",
        "sampler_id": ""
    },
	"gpu_get_tex_filter": {
        "desc": ""
    },
	"gpu_get_tex_filter_ext": {
        "desc": "",
        "sampler_id": ""
    },
	"gpu_get_tex_repeat": {
        "desc": ""
    },
	"gpu_get_tex_repeat_ext": {
        "desc": "",
        "sampler_id": ""
    },
	"gpu_get_tex_mip_filter": {
        "desc": ""
    },
	"gpu_get_tex_mip_filter_ext": {
        "desc": "",
        "sampler_id": ""
    },
	"gpu_get_tex_mip_bias": {
        "desc": ""
    },
	"gpu_get_tex_mip_bias_ext": {
        "desc": "",
        "sampler_id": ""
    },
	"gpu_get_tex_min_mip": {
        "desc": ""
    },
	"gpu_get_tex_min_mip_ext": {
        "desc": "",
        "sampler_id": ""
    },
	"gpu_get_tex_max_mip": {
        "desc": ""
    },
	"gpu_get_tex_max_mip_ext": {
        "desc": "",
        "sampler_id": ""
    },
	"gpu_get_tex_max_aniso": {
        "desc": ""
    },
	"gpu_get_tex_max_aniso_ext": {
        "desc": "",
        "sampler_id": ""
    },
	"gpu_get_tex_mip_enable": {
        "desc": ""
    },
	"gpu_get_tex_mip_enable_ext": {
        "desc": "",
        "sampler_id": ""
    },
	"gpu_push_state": {
        "desc": ""
    },
	"gpu_pop_state": {
        "desc": ""
    },
	"gpu_get_state": {
        "desc": ""
    },
	"gpu_set_state": {
        "desc": "",
        "map": ""
    },
	"draw_light_define_ambient": {
        "desc": "",
        "col": ""
    },
	"draw_light_define_direction": {
        "desc": "",
        "ind": "",
        "dx": "",
        "dy": "",
        "dz": "",
        "col": ""
    },
	"draw_light_define_point": {
        "desc": "",
        "ind": "",
        "x": "",
        "y": "",
        "z": "",
        "range": "",
        "col": ""
    },
	"draw_light_enable": {
        "desc": "",
        "ind": "",
        "enable": ""
    },
	"draw_set_lighting": {
        "desc": "",
        "enable": ""
    },
	"draw_light_get_ambient": {
        "desc": ""
    },
	"draw_light_get": {
        "desc": "",
        "ind": ""
    },
	"draw_get_lighting": {
        "desc": ""
    },
	"load_csv": {
        "desc": "",
        "filename": ""
    },
    "skeleton_animation_get_frame": {
        "desc": "",
        "track": ""
    },
	"skeleton_animation_set_frame": {
        "desc": "",
        "track": "",
        "index": ""
    },
	"layer_get_id": {
        "desc": "",
        "layer_name": ""
    },
	"layer_get_id_at_depth": {
        "desc": "",
        "depth": ""
    },
	"layer_get_depth": {
        "desc": "",
        "layer_id": ""
    },
	"layer_create": {
        "desc": "",
        "depth": "",
        "name": "",
        "...": ""
    },
	"layer_destroy": {
        "desc": "",
        "layer_id": ""
    },
	"layer_destroy_instances": {
        "desc": "",
        "layer_id": ""
    },
	"layer_add_instance": {
        "desc": "",
        "layer_id": "",
        "instance": ""
    },
	"layer_has_instance": {
        "desc": "",
        "layer_id": "",
        "instance": ""
    },
	"layer_set_visible": {
        "desc": "",
        "layer_id": "",
        "visible": ""
    },
	"layer_get_visible": {
        "desc": "",
        "layer_id": ""
    },
	"layer_exists": {
        "desc": "",
        "layer_id": ""
    },
	"layer_x": {
        "desc": "",
        "layer_id": "",
        "x": ""
    },
	"layer_y": {
        "desc": "",
        "layer_id": "",
        "y": ""
    },
	"layer_get_x": {
        "desc": "",
        "layer_id": ""
    },
	"layer_get_y": {
        "desc": "",
        "layer_id": ""
    },
	"layer_hspeed": {
        "desc": "",
        "layer_id": "",
        "speed": ""
    },
	"layer_vspeed": {
        "desc": "",
        "layer_id": "",
        "speed": ""
    },
	"layer_get_hspeed": {
        "desc": "",
        "layer_id": ""
    },
	"layer_get_vspeed": {
        "desc": "",
        "layer_id": ""
    },
	"layer_script_begin": {
        "desc": "",
        "layer_id": "",
        "script": ""
    },
	"layer_script_end": {
        "desc": "",
        "layer_id": "",
        "script": ""
    },
	"layer_shader": {
        "desc": "",
        "layer_id": "",
        "shader": ""
    },
	"layer_get_script_begin": {
        "desc": "",
        "layer_id": ""
    },
	"layer_get_script_end": {
        "desc": "",
        "layer_id": ""
    },
	"layer_get_shader": {
        "desc": "",
        "layer_id": ""
    },
	"layer_set_target_room": {
        "desc": "",
        "room": ""
    },
	"layer_get_target_room": {
        "desc": ""
    },
	"layer_reset_target_room": {
        "desc": ""
    },
	"layer_get_all": {
        "desc": ""
    },
	"layer_get_all_elements": {
        "desc": "",
        "layer_id": ""
    },
	"layer_get_name": {
        "desc": "",
        "layer_id": ""
    },
	"layer_depth": {
        "desc": "",
        "layer_id": "",
        "depth": ""
    },
	"layer_get_element_layer": {
        "desc": "",
        "element_id": ""
    },
	"layer_get_element_type": {
        "desc": "",
        "element_id": ""
    },
	"layer_element_move": {
        "desc": "",
        "element_id": "",
        "layer_id": ""
    },
	"layer_force_draw_depth": {
        "desc": "",
        "force": "",
        "depth": ""
    },
	"layer_is_draw_depth_forced": {
        "desc": ""
    },
	"layer_get_forced_depth": {
        "desc": ""
    },
	"layer_background_get_id": {
        "desc": "",
        "layer_id": ""
    },
	"layer_background_exists": {
        "desc": "",
        "layer_id": "",
        "background_element_id": ""
    },
	"layer_background_create": {
        "desc": "",
        "layer_id": "",
        "sprite": ""
    },
	"layer_background_destroy": {
        "desc": "",
        "background_element_id": ""
    },
	"layer_background_visible": {
        "desc": "",
        "background_element_id": "",
        "visible": ""
    },
	"layer_background_change": {
        "desc": "",
        "background_element_id": "",
        "sprite": ""
    },
	"layer_background_sprite": {
        "desc": "",
        "background_element_id": "",
        "sprite": ""
    },
	"layer_background_htiled": {
        "desc": "",
        "background_element_id": "",
        "tiled": ""
    },
	"layer_background_vtiled": {
        "desc": "",
        "background_element_id": "",
        "tiled": ""
    },
	"layer_background_stretch": {
        "desc": "",
        "background_element_id": "",
        "stretch": ""
    },
	"layer_background_yscale": {
        "desc": "",
        "background_element_id": "",
        "yscale": ""
    },
	"layer_background_xscale": {
        "desc": "",
        "background_element_id": "",
        "xscale": ""
    },
	"layer_background_blend": {
        "desc": "",
        "background_element_id": "",
        "col": ""
    },
	"layer_background_alpha": {
        "desc": "",
        "background_element_id": "",
        "alpha": ""
    },
	"layer_background_index": {
        "desc": "",
        "background_element_id": "",
        "image_index": ""
    },
	"layer_background_speed": {
        "desc": "",
        "background_element_id": "",
        "image_speed": ""
    },
	"layer_background_get_visible": {
        "desc": "",
        "background_element_id": ""
    },
	"layer_background_get_sprite": {
        "desc": "",
        "background_element_id": ""
    },
	"layer_background_get_htiled": {
        "desc": "",
        "background_element_id": ""
    },
	"layer_background_get_vtiled": {
        "desc": "",
        "background_element_id": ""
    },
	"layer_background_get_stretch": {
        "desc": "",
        "background_element_id": ""
    },
	"layer_background_get_yscale": {
        "desc": "",
        "background_element_id": ""
    },
	"layer_background_get_xscale": {
        "desc": "",
        "background_element_id": ""
    },
	"layer_background_get_blend": {
        "desc": "",
        "background_element_id": ""
    },
	"layer_background_get_alpha": {
        "desc": "",
        "background_element_id": ""
    },
	"layer_background_get_index": {
        "desc": "",
        "background_element_id": ""
    },
	"layer_background_get_speed": {
        "desc": "",
        "background_element_id": ""
    },
	"layer_sprite_get_id": {
        "desc": "",
        "layer_id": "",
        "sprite_element_name": ""
    },
	"layer_sprite_exists": {
        "desc": "",
        "layer_id": "",
        "sprite_element_id": ""
    },
	"layer_sprite_create": {
        "desc": "",
        "layer_id": "",
        "x": "",
        "y": "",
        "sprite": ""
    },
	"layer_sprite_destroy": {
        "desc": "",
        "sprite_element_id": ""
    },
	"layer_sprite_change": {
        "desc": "",
        "sprite_element_id": "",
        "sprite": ""
    },
	"layer_sprite_index": {
        "desc": "",
        "sprite_element_id": "",
        "image_index": ""
    },
	"layer_sprite_speed": {
        "desc": "",
        "sprite_element_id": "",
        "image_speed": ""
    },
	"layer_sprite_xscale": {
        "desc": "",
        "sprite_element_id": "",
        "xscale": ""
    },
	"layer_sprite_yscale": {
        "desc": "",
        "sprite_element_id": "",
        "yscale": ""
    },
	"layer_sprite_angle": {
        "desc": "",
        "sprite_element_id": "",
        "angle": ""
    },
	"layer_sprite_blend": {
        "desc": "",
        "sprite_element_id": "",
        "col": ""
    },
	"layer_sprite_alpha": {
        "desc": "",
        "sprite_element_id": "",
        "alpha": ""
    },
	"layer_sprite_x": {
        "desc": "",
        "sprite_element_id": "",
        "x": ""
    },
	"layer_sprite_y": {
        "desc": "",
        "sprite_element_id": "",
        "y": ""
    },
	"layer_sprite_get_sprite": {
        "desc": "",
        "sprite_element_id": ""
    },
	"layer_sprite_get_index": {
        "desc": "",
        "sprite_element_id": ""
    },
	"layer_sprite_get_speed": {
        "desc": "",
        "sprite_element_id": ""
    },
	"layer_sprite_get_xscale": {
        "desc": "",
        "sprite_element_id": ""
    },
	"layer_sprite_get_yscale": {
        "desc": "",
        "sprite_element_id": ""
    },
	"layer_sprite_get_angle": {
        "desc": "",
        "sprite_element_id": ""
    },
	"layer_sprite_get_blend": {
        "desc": "",
        "sprite_element_id": ""
    },
	"layer_sprite_get_alpha": {
        "desc": "",
        "sprite_element_id": ""
    },
	"layer_sprite_get_x": {
        "desc": "",
        "sprite_element_id": ""
    },
	"layer_sprite_get_y": {
        "desc": "",
        "sprite_element_id": ""
    },
	"layer_tilemap_get_id": {
        "desc": "",
        "layer_id": ""
    },
	"layer_tilemap_exists": {
        "desc": "",
        "layer_id": "",
        "tilemap_element_id": ""
    },
	"layer_tilemap_create": {
        "desc": "",
        "layer_id": "",
        "x": "",
        "y": "",
        "tileset": "",
        "width": "",
        "height": ""
    },
	"layer_tilemap_destroy": {
        "desc": "",
        "tilemap_element_id": ""
    },
	"tilemap_tileset": {
        "desc": "",
        "tilemap_element_id": "",
        "tileset": ""
    },
	"tilemap_x": {
        "desc": "",
        "tilemap_element_id": "",
        "x": ""
    },
	"tilemap_y": {
        "desc": "",
        "tilemap_element_id": "",
        "y": ""
    },
	"tilemap_set": {
        "desc": "",
        "tilemap_element_id": "",
        "tiledata": "",
        "cell_x": "",
        "cell_y": ""
    },
	"tilemap_set_at_pixel": {
        "desc": "",
        "tilemap_element_id": "",
        "tiledata": "",
        "x": "",
        "y": ""
    },
	"tilemap_get_tileset": {
        "desc": "",
        "tilemap_element_id": ""
    },
	"tilemap_get_tile_width": {
        "desc": "",
        "tilemap_element_id": ""
    },
	"tilemap_get_tile_height": {
        "desc": "",
        "tilemap_element_id": ""
    },
	"tilemap_get_width": {
        "desc": "",
        "tilemap_element_id": ""
    },
	"tilemap_get_height": {
        "desc": "",
        "tilemap_element_id": ""
    },
	"tilemap_get_x": {
        "desc": "",
        "tilemap_element_id": ""
    },
	"tilemap_get_y": {
        "desc": "",
        "tilemap_element_id": ""
    },
	"tilemap_get": {
        "desc": "",
        "tilemap_element_id": "",
        "cell_x": "",
        "cell_y": ""
    },
	"tilemap_get_at_pixel": {
        "desc": "",
        "tilemap_element_id": "",
        "x": "",
        "y": ""
    },
	"tilemap_get_cell_x_at_pixel": {
        "desc": "",
        "tilemap_element_id": "",
        "x": "",
        "y": ""
    },
	"tilemap_get_cell_y_at_pixel": {
        "desc": "",
        "tilemap_element_id": "",
        "x": "",
        "y": ""
    },
	"tilemap_clear": {
        "desc": "",
        "tilemap_element_id": "",
        "tiledata": ""
    },
	"draw_tilemap": {
        "desc": "",
        "tilemap_element_id": "",
        "x": "",
        "y": ""
    },
	"draw_tile": {
        "desc": "",
        "tileset": "",
        "tiledata": "",
        "frame": "",
        "x": "",
        "y": ""
    },
	"tilemap_set_global_mask": {
        "desc": "",
        "mask": ""
    },
	"tilemap_get_global_mask": {
        "desc": ""
    },
	"tilemap_set_mask": {
        "desc": "",
        "tilemap_element_id": "",
        "mask": ""
    },
	"tilemap_get_mask": {
        "desc": "",
        "tilemap_element_id": ""
    },
	"tilemap_get_frame": {
        "desc": "",
        "tilemap_element_id": ""
    },
	"tile_set_empty": {
        "desc": "",
        "tiledata": ""
    },
	"tile_set_index": {
        "desc": "",
        "tiledata": "",
        "tileindex": ""
    },
	"tile_set_flip": {
        "desc": "",
        "tiledata": "",
        "flip": ""
    },
	"tile_set_mirror": {
        "desc": "",
        "tiledata": "",
        "mirror": ""
    },
	"tile_set_rotate": {
        "desc": "",
        "tiledata": "",
        "rotate": ""
    },
	"tile_get_empty": {
        "desc": "",
        "tiledata": ""
    },
	"tile_get_index": {
        "desc": "",
        "tiledata": ""
    },
	"tile_get_flip": {
        "desc": "",
        "tiledata": ""
    },
	"tile_get_mirror": {
        "desc": "",
        "tiledata": ""
    },
	"tile_get_rotate": {
        "desc": "",
        "tiledata": ""
    },
	"layer_tile_exists": {
        "desc": "",
        "layer_id": "",
        "tile_element_id": "",
        "...": ""
    },
	"layer_tile_create": {
        "desc": "",
        "layer_id": "",
        "x": "",
        "y": "",
        "tileset": "",
        "left": "",
        "top": "",
        "width": "",
        "height": ""
    },
	"layer_tile_destroy": {
        "desc": "",
        "tile_element_id": ""
    },
	"layer_tile_change": {
        "desc": "",
        "tile_element_id": "",
        "sprite": ""
    },
	"layer_tile_xscale": {
        "desc": "",
        "tile_element_id": "",
        "xscale": ""
    },
	"layer_tile_yscale": {
        "desc": "",
        "tile_element_id": "",
        "yscale": ""
    },
	"layer_tile_blend": {
        "desc": "",
        "tile_element_id": "",
        "col": ""
    },
	"layer_tile_alpha": {
        "desc": "",
        "tile_element_id": "",
        "alpha": ""
    },
	"layer_tile_x": {
        "desc": "",
        "tile_element_id": "",
        "x": ""
    },
	"layer_tile_y": {
        "desc": "",
        "tile_element_id": "",
        "y": ""
    },
	"layer_tile_region": {
        "desc": "",
        "tile_element_id": "",
        "left": "",
        "top": "",
        "width": "",
        "height": ""
    },
	"layer_tile_visible": {
        "desc": "",
        "tile_element_id": "",
        "visible": ""
    },
	"layer_tile_get_sprite": {
        "desc": "",
        "tile_element_id": ""
    },
	"layer_tile_get_xscale": {
        "desc": "",
        "tile_element_id": ""
    },
	"layer_tile_get_yscale": {
        "desc": "",
        "tile_element_id": ""
    },
	"layer_tile_get_blend": {
        "desc": "",
        "tile_element_id": ""
    },
	"layer_tile_get_alpha": {
        "desc": "",
        "tile_element_id": ""
    },
	"layer_tile_get_x": {
        "desc": "",
        "tile_element_id": ""
    },
	"layer_tile_get_y": {
        "desc": "",
        "tile_element_id": ""
    },
	"layer_tile_get_region": {
        "desc": "",
        "tile_element_id": ""
    },
	"layer_tile_get_visible": {
        "desc": "",
        "tile_element_id": ""
    },
	"layer_instance_get_instance": {
        "desc": "",
        "instance_element_id": ""
    },
	 "instance_activate_layer": {
        "desc": "",
        "layer_id": ""
    },
	 "instance_deactivate_layer": {
        "desc": "",
        "layer_id": ""
    },
	"camera_create": {
        "desc": ""
    },
	"camera_create_view": {
        "desc": "",
        "room_x": "",
        "room_y": "",
        "width": "",
        "height": "",
        "angle": "",
        "object": "",
        "x_speed": "",
        "y_speed": "",
        "x_border": "",
        "y_border": ""
    },
	"camera_destroy": {
        "desc": "",
        "camera": ""
    },
	"camera_apply": {
        "desc": "",
        "camera": ""
    },
	"camera_get_active": {
        "desc": ""
    },
	"camera_get_default": {
        "desc": ""
    },
	"camera_set_default": {
        "desc": "",
        "camera": ""
    },
	"camera_set_view_mat": {
        "desc": "",
        "camera": "",
        "matrix": ""
    },
	"camera_set_proj_mat": {
        "desc": "",
        "camera": "",
        "matrix": ""
    },
	"camera_set_update_script": {
        "desc": "",
        "camera": "",
        "script": ""
    },
	"camera_set_begin_script": {
        "desc": "",
        "camera": "",
        "script": ""
    },
	"camera_set_end_script": {
        "desc": "",
        "camera": "",
        "script": ""
    },
	"camera_set_view_pos": {
        "desc": "",
        "camera": "",
        "x": "",
        "y": ""
    },
	"camera_set_view_size": {
        "desc": "",
        "camera": "",
        "width": "",
        "height": ""
    },
	"camera_set_view_speed": {
        "desc": "",
        "camera": "",
        "x_speed": "",
        "y_speed": ""
    },
	"camera_set_view_border": {
        "desc": "",
        "camera": "",
        "x_border": "",
        "y_border": ""
    },
	"camera_set_view_angle": {
        "desc": "",
        "camera": "",
        "angle": ""
    },
	"camera_set_view_target": {
        "desc": "",
        "camera": "",
        "object": ""
    },
	"camera_get_view_mat": {
        "desc": "",
        "camera": ""
    },
	"camera_get_proj_mat": {
        "desc": "",
        "camera": ""
    },
	"camera_get_update_script": {
        "desc": "",
        "camera": ""
    },
	"camera_get_begin_script": {
        "desc": "",
        "camera": ""
    },
	"camera_get_end_script": {
        "desc": "",
        "camera": ""
    },
	"camera_get_view_x": {
        "desc": "",
        "camera": ""
    },
	"camera_get_view_y": {
        "desc": "",
        "camera": ""
    },
	"camera_get_view_width": {
        "desc": "",
        "camera": ""
    },
	"camera_get_view_height": {
        "desc": "",
        "camera": ""
    },
	"camera_get_view_speed_x": {
        "desc": "",
        "camera": ""
    },
	"camera_get_view_speed_y": {
        "desc": "",
        "camera": ""
    },
	"camera_get_view_border_x": {
        "desc": "",
        "camera": ""
    },
	"camera_get_view_border_y": {
        "desc": "",
        "camera": ""
    },
	"camera_get_view_angle": {
        "desc": "",
        "camera": ""
    },
	"camera_get_view_target": {
        "desc": "",
        "camera": ""
    },
	"view_get_camera": {
        "desc": "",
        "view": ""
    },
	"view_get_visible": {
        "desc": "",
        "view": ""
    },
	"view_get_xport": {
        "desc": "",
        "view": ""
    },
	"view_get_yport": {
        "desc": "",
        "view": ""
    },
	"view_get_wport": {
        "desc": "",
        "view": ""
    },
	"view_get_hport": {
        "desc": "",
        "view": ""
    },
	"view_get_surface_id": {
        "desc": "",
        "view": ""
    },
	"view_set_camera": {
        "desc": "",
        "view": "",
        "camera": ""
    },
	"view_set_visible": {
        "desc": "",
        "view": "",
        "visible": ""
    },
	"view_set_xport": {
        "desc": "",
        "view": "",
        "xport": ""
    },
	"view_set_yport": {
        "desc": "",
        "view": "",
        "yport": ""
    },
	"view_set_wport": {
        "desc": "",
        "view": "",
        "wport": ""
    },
	"view_set_hport": {
        "desc": "",
        "view": "",
        "hport": ""
    },
	"view_set_surface_id": {
        "desc": "",
        "view": "",
        "surface_id": ""
    },
	"gesture_drag_time": {
        "desc": "",
        "time": ""
    },
	"gesture_drag_distance": {
        "desc": "",
        "distance": ""
    },
	"gesture_flick_speed": {
        "desc": "",
        "speed": ""
    },
	"gesture_double_tap_time": {
        "desc": "",
        "time": ""
    },
	"gesture_double_tap_distance": {
        "desc": "",
        "distance": ""
    },
	"gesture_pinch_distance": {
        "desc": "",
        "distance": ""
    },
	"gesture_pinch_angle_towards": {
        "desc": "",
        "angle": ""
    },
	"gesture_pinch_angle_away": {
        "desc": "",
        "angle": ""
    },
	"gesture_rotate_time": {
        "desc": "",
        "time": ""
    },
	"gesture_rotate_angle": {
        "desc": "",
        "angle": ""
    },
	"gesture_tap_count": {
        "desc": "",
        "enable": ""
    },
	"gesture_get_drag_time": {
        "desc": ""
    },
	"gesture_get_drag_distance": {
        "desc": ""
    },
	"gesture_get_flick_speed": {
        "desc": ""
    },
	"gesture_get_double_tap_time": {
        "desc": ""
    },
	"gesture_get_double_tap_distance": {
        "desc": ""
    },
	"gesture_get_pinch_distance": {
        "desc": ""
    },
	"gesture_get_pinch_angle_towards": {
        "desc": ""
    },
	"gesture_get_pinch_angle_away": {
        "desc": ""
    },
	"gesture_get_rotate_time": {
        "desc": ""
    },
	"gesture_get_rotate_angle": {
        "desc": ""
    },
	"gesture_get_tap_count": {
		"desc": ""
	}
}