{
    "normal": {
        "prefix": "n",
        "body": [
	    	"{",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "Normal block"
    },
	"if ...": {
        "prefix": "if",
        "body": [
	    	"if (${1:CONDITION}) {",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "If block"
    },
    "if … else …": {
		"prefix": "ifelse",
		"body": [
			"if (${1:CONDITION}) {",
			"\t${2:STATEMENT}",
			"} else {",
			"\t${3:STATEMENT}",
			"}",
			"$0"
		],
		"description": "If Else block"
	},
    "switch …": {
		"prefix": "switch",
		"body": [
			"switch (${1:CONDITION}) {",
			"\tcase '${2:EXPRESSION}':",
			"\t\t${3:STATEMENT}",
			"\t\tbreak;",
			"\t$0",
			"\tdefault:",
			"\t\t${4:STATEMENT}",
			"\t\tbreak;",
			"}"
		],
		"description": "Switch block"
	},
    "do … until …": {
		"prefix": "do",
		"body": [
			"do {",
			"\t${0:STATEMENT}",
			"} until (${1:${2:$a} <= ${3:10}});"
		],
		"description": "Do-until loop"
	},
    "for …": {
		"prefix": "for",
		"body": [
        "for (${1:INITIALISATION}; ${2:CONDITION}; ${3:INCREMENT}) { ",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "For-loop"
	},
    "for … i": {
		"prefix": "fori",
		"body": [
			"for (${1:i}=${2:0}; ${1:i} < ${2:CONDITION}; ${1:i}++) { ",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "For-i-loop"
	},
    "while …": {
		"prefix": "while",
		"body": [
			"while (${1:$a <= 10}) {",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "While-loop"
	},
    "repeat …": {
		"prefix": "repeat",
		"body": [
	    	"repeat (${1:EXPRESSION}) {",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "Repeat-loop"
	},
    "with ...": {
        "prefix": "with",
        "body": [
            "with (${1:EXPRESSION}) {",
            "\t${0:STATEMENT}",
            "}"
        ],
        "description": "With structure"
    },
    //GameMaker Language Lists
	//GameMaker 8.1
	//Draw Event Start
	//Draw Event Functions Start
	"draw_text": {
        "prefix": "draw_text",
        "body": [
	    	"draw_text(${1:x},${2:y},${0:string})"
		],
		"description": "[Function]draw_text(x,y,string) \n在坐标 (x,y) 处绘制字符串 string ，一个'#'通配符或者一个回 车符 chr(13) 或者断行符 chr(10) 会让字符串另起一行，这样我们就可以实现多行文本的 绘制（使用 '\\#' 显示字符 '#' 本身）。"
    },
	"draw_text_ext": {
        "prefix": "draw_text_ext",
        "body": [
	    	"draw_text_ext(${1:x},${2:y},${0:string})"
		],
		"description": "[Function]draw_text_ext(x,y,string) \n基本与draw_text()的函数作用相同，但增加了两个功能。首先 sep 代表行间距，设成 －1 代表使用默认值。 w 代表行宽，单位像素。超出行宽的部分 会以空格或'-'进行分行。设为 -1 代表不换行。"
    },
	"draw_arrow": {
        "prefix": "draw_arrow",
        "body": [
	    	"draw_arrow(${1:x1},${2:y1},${3:x2},${4:y2},${0:size})"
		],
		"description": "[Function]draw_arrow(x1,y1,x2,y2,size) \n绘制一个从坐标(x1,y1)到(x2,y2) 的箭头。size 指定箭 头的尺寸，单位像素。"
    },
	"draw_button": {
        "prefix": "draw_button",
        "body": [
	    	"draw_button(${1:x1},${2:y1},${3:x2},${4:y2},${0:up})"
		],
		"description": "[Function]draw_button(x1,y1,x2,y2,up) \n绘制一个按钮， up 指定按钮状态为上（1）还是下（0）。"
    },
	"draw_path": {
        "prefix": "draw_path",
        "body": [
	    	"draw_path(${1:path},${2:x},${3:y},${0:absolute})"
		],
		"description": "[Function]draw_path(path,x,y,absolute) \n 通过这个函数你可以从房间坐标(x,y)之间绘制一条指定的 路径 path 。如果 absolute 为真，路径就会以原先设定的位置进行绘制，而x和y就被无视 了。"
    },
	"draw_healthbar": {
        "prefix": "draw_healthbar",
        "body": [
	    	"draw_healthbar(${1:x1},${2:y1},${3:x2},${4:y2},${5:amount},${6:backcol},${7:mincol},${8:maxcol},${9:direction},${10:showback},${0:showborder})"
		],
		"description": "[Function]draw_healthbar(x1,y1,x2,y2,amount,backcol,mincol,maxcol,direction,showback,showborder) \n 绘制一个健康条。（或者其他任何一种表现数值变化的颜色条，比如：攻击 力）。(x1,y1)和(x2,y2)代表整个条的范围。amount 代表条内颜色填充程度的百分比(从0 到 100)。backcol 为条的背景颜色，mincol 和maxcol 代表条从0 到100之间的颜色变化。 中间值在两端颜色之间渐变。direction 代表条的绘制方向。 0 代表从左边开始， 1 代表 从右边开始， 2 代表从上开始， 3 代表从下开始。 showback 指定是否显示背景框， showborder 指定是否显示边框。"
    },
	"draw_clear": {
        "prefix": "draw_clear",
        "body": [
	    	"draw_clear(${0:col})"
		],
		"description": "[Function]draw_clear(col) \n使用给定的颜色清除全部房间（非透明混合）。"
    },
	"draw_clear_alpha": {
        "prefix": "draw_clear_alpha",
        "body": [
	    	"draw_clear_alpha(${1:col},${0:alpha})"
		],
		"description": "[Function]draw_clear_alpha(col,alpha) \n使用给定的颜色和阿尔法值清除整个房间（在表面处理时经常用到）。"
    },
	"draw_point": {
        "prefix": "draw_point",
        "body": [
	    	"draw_point(${1:x},${0:y})"
		],
		"description": "[Function]draw_point(x,y) \n在坐标(x,y) 上绘制一个使用当前颜色的点。"
    },
	"draw_line": {
        "prefix": "draw_line",
        "body": [
	    	"draw_line(${1:x1},${2:y1},${3:x2},${0:y2})"
		],
		"description": "[Function]draw_line(x1,y1,x2,y2) \n从坐标(x1,y1)到(x2,y2)绘制一条直线。"
    },
	"draw_line_width": {
        "prefix": "draw_line_width(x1,y1,x2,y2)",
        "body": [
	    	"draw_line_width(${1:x1},${2:y1},${3:x2},${4:y2},${0:w})"
		],
		"description": "[Function]draw_line_width(x1,y1,x2,y2,w) \n从坐标(x1,y1)到(x2,y2)绘制一条直线，宽为w。"
    },
	"draw_rectangle": {
        "prefix": "draw_rectangle",
        "body": [
	    	"draw_rectangle(${1:x1},${2:y1},${3:x2},${4:y2},${0:outline})"
		],
		"description": "[Function]draw_rectanglet(x1,y1,x2,y2,outline) \n在指定坐标之间绘制一个矩形。outline 指定是只 描绘边框（真 true），还是要填充整个区域(假 false)。"
    },
	"draw_roundrect": {
        "prefix": "draw_roundrect",
        "body": [
	    	"draw_roundrect(${1:x1},${2:y1},${3:x2},${4:y2},${0:outline})"
		],
		"description": "[Function]draw_roundrect(x1,y1,x2,y2,outline) \n在指定坐标之间绘制一个圆角矩形。outline 指定是只描 绘边框（真 true），还是要填充整个区域(假 false)。"
    },
	"draw_triangle": {
        "prefix": "draw_triangle",
        "body": [
	    	"draw_triangle(${1:x1},${2:y1},${3:x2},${4:y2},${5:x3},${6:y3},${0:outline})"
		],
		"description": "[Function]draw_triangle(x1,y1,x2,y2,x3,y3,outline) \n在指定坐标之间绘制一个三角形。outline 指定是只描绘边框（真 true），还是要填充整个区域(假 false)。"
    },
	"draw_circle": {
        "prefix": "draw_circle",
        "body": [
	    	"draw_circle(${1:x},${2:y},${3:r},${0:outline})"
		],
		"description": "[Function]draw_circle(x,y,r,outline) \n以坐标(x,y)为圆心，r 为半径绘制一个圆形。outline 指定 是只描绘边框（真 true），还是要填充整个区域(假 false)。"
    },
	"draw_ellipse": {
        "prefix": "draw_ellipse",
        "body": [
	    	"draw_ellipse(${1:x1},${2:y1},${3:x2},${4:y2},${0:outline})"
		],
		"description": "[Function]draw_ellipse(x1,y1,x2,y2,outline) \n绘制一个椭圆。outline 指定是只描绘边框（真 true），还是 要填充整个区域(假 false)。"
    },
	"draw_set_circle_precision": {
        "prefix": "draw_set_circle_precision",
        "body": [
	    	"draw_set_circle_precision(${0:precision})"
		],
		"description": "[Function]draw_set_circle_precision(precision) \n设置绘制圆的精度，就是由多少段组成，精度必须在4－64之间并被4整除，这也被使用在椭圆和圆角方形中。"
    },
	"draw_set_color": {
        "prefix": "draw_set_color",
        "body": [
	    	"draw_set_color(${0:col})"
		],
		"description": "[Function]draw_set_color(col) \n设置当前绘制颜色。"
    },
	"draw_set_alpha": {
        "prefix": "draw_set_alpha",
        "body": [
	    	"draw_set_alpha(${0:alpha})"
		],
		"description": "[Function]draw_set_alpha(alpha) \n设置当前绘制时的阿尔法透明通道值。（从0 到1，0代表完全透明， 1代表完全不透明）。"
    },
	"draw_get_color": {
        "prefix": "draw_get_color",
        "body": [
	    	"draw_get_color()"
		],
		"description": "[Function]draw_get_color() \n返回当前绘制的颜色。"
    },
	"draw_get_alpha": {
        "prefix": "draw_get_alpha",
        "body": [
	    	"draw_get_alpha()"
		],
		"description": "[Function]draw_get_alpha() \n返回当前绘制的阿尔法透明通道值。"
    },
	"draw_getpixel": {
        "prefix": "draw_getpixel",
        "body": [
	    	"draw_getpixel(${1:x},${0:y})"
		],
		"description": "[Function]draw_getpixel(x,y) \n在房间的指定坐标(x,y)返回像素的颜色。这个函数不是很快，所以要 谨慎使用。"
    },
	"draw_sprite": {
        "prefix": "draw_sprite",
        "body": [
	    	"draw_sprite(${1:sprite},${2:subimg},${3:x},${0:y})"
		],
		"description": "[Function]draw_sprite(sprite,subimg,x,y) \n在坐标(x,y)绘制子图像 subimg （-1 代表当前子图像，0到N代表各子图像编号）。（不包含颜色混合和阿尔法透明通道）"
    },
	"draw_sprite_stretched": {
        "prefix": "draw_sprite_stretched",
        "body": [
	    	"draw_sprite_stretched(${1:sprite},${2:subimg},${3:x},${4:y},${5:w},${0:h})"
		],
		"description": "[Function]draw_sprite_stretched(sprite,subimg,x,y,w,h) \n将精灵扩展填充至左上角坐标为(x,y)，宽度高度分别为w,h的方形区域内。"
    },
	"draw_sprite_tiled": {
        "prefix": "draw_sprite_tiled",
        "body": [
	    	"draw_sprite_tiled(${1:sprite},${2:subimg},${3:x},${0:y})"
		],
		"description": "[Function]draw_sprite_tiled(sprite,subimg,x,y) \n将精灵作为图块在整个房间内进行绘制。(x,y) 是其中精灵的绘制坐标。"
    },
	"draw_sprite_part": {
        "prefix": "draw_sprite_part",
        "body": [
	    	"draw_sprite_part(${1:sprite},${2:subimg},${3:left},${4:top},${5:width},${6:height},${7:x},${0:y})"
		],
		"description": "[Function]draw_sprite_part(sprite,subimg,left,top,width,height,x,y) \n在坐标(x,y)绘制指定范围内的子图像的子图区域 （-1 代表当前子图像）（从子图像内位置 left,top,width,height ）。"
    },
	"draw_background": {
        "prefix": "draw_background",
        "body": [
	    	"draw_background(${1:back},${2:x},${0:y})"
		],
		"description": "[Function]draw_background(back,x,y) \n绘制背景在坐标（x，y）。(不包含颜色混合和阿尔法透明通道)"
    },
	"draw_background_stretched": {
        "prefix": "draw_background_stretched",
        "body": [
	    	"draw_background_stretched(${1:back},${2:x},${3:y},${4:w},${0:h})"
		],
		"description": "[Function]draw_background_stretched(back,x,y,w,h) \n将背景扩展填充至左上角坐标为(x,y)，宽度高度分别为w,h的方形区域内。"
    },
	"draw_background_tiled": {
        "prefix": "draw_background_tiled",
        "body": [
	    	"draw_background_tiled(${1:back},${2:x},${0:y})"
		],
		"description": "[Function]draw_background_tiled(back,x,y) \n背景作为片平铺在房间中，以(x,y)为起始点。"
    },
	"draw_background_part": {
        "prefix": "draw_background_part",
        "body": [
	    	"draw_background_part(${1:back},${2:left},${3:top},${4:width},${5:height},${6:x},${0:y})"
		],
		"description": "[Function]draw_background_part(x,y,r,outline) \n绘制背景部分，以左上为原点的x，y。"
    },
	"draw_sprite_ext": {
        "prefix": "draw_sprite_ext",
        "body": [
	    	"draw_sprite_ext(${1:sprite},${2:subimg},${3:x},${4:y},${5:xscale},${6:yscale},${7:rot},${8:color},${0:alpha})"
		],
		"description": "[Function]draw_sprite_ext(sprite,subimg,x,y,xscale,yscale,rot,color,alpha) \n 代表所要绘制的精灵，subimg 代表要绘制的具体子图像，(x,y) 代表绘制的坐标，(xscale,yscale) 代表要绘制的具体缩放尺寸， rot 代表图像逆时针旋转绘制的角度，color 代表需要混合的颜色（c_white 为默认值），alpha 代表要绘制的阿尔法透明通道数值（1 代表完全不透明， 0 代表完全透明）。这个函数可以创造很多的效果（比如部分透明的爆炸效果）。"
    },
	"draw_sprite_stretched_ext": {
        "prefix": "draw_sprite_stretched_ext",
        "body": [
	    	"draw_sprite_stretched_ext(${1:sprite},${2:subimg},${3:x},${4:y},${5:w},${6:h},${7:color},${0:alpha})"
		],
		"description": "[Function]draw_sprite_stretched_ext(sprite,subimg,x,y,w,h,color,alpha) \n绘制精灵拉伸如此精灵填充在x，y，宽，高的区域里，color是混合色，alpha是透明度。"
    },
	"draw_sprite_tiled_ext": {
        "prefix": "draw_sprite_tiled_ext",
        "body": [
	    	"draw_sprite_tiled_ext(${1:sprite},${2:subimg},${3:x},${4:y},${5:xscale},${6:yscale},${7:color},${0:alpha})"
		],
		"description": "[Function]draw_circle(sprite,subimg,x,y,xscale,yscale,color,alpha) \n绘制精灵贴图，精灵填充整个房间但是以scale比例，color颜色，alpha透明度。"
    },
	"draw_sprite_part_ext": {
        "prefix": "draw_sprite_part_ext",
        "body": [
	    	"draw_sprite_part_ext(${1:sprite},${2:subimg},${3:left},${4:top},${5:width},${6:height},${7:x},${8:y},${9:xscale},${10:yscale},${11:color},${0:alpha})"
		],
		"description": "[Function]draw_sprite_part_ext(sprite,subimg,left,top,width,height,x,y,xscale,yscale,color,alpha) \n绘制精灵子图的部分（-1为当前子图）按照left,top,width,height尺寸，以scale比例，color颜色，alpha透明度。"
    },
	"draw_sprite_general": {
        "prefix": "draw_sprite_general",
        "body": [
	    	"draw_sprite_general(${1:sprite},${2:subimg},${3:left},${4:top},${5:width},${6:height},${7:x},${8:y},${9:xscale},${10:yscale},${11:rot},${12:c1},${13:c2},${14:c3},${15:c4},${0:alpha})"
		],
		"description": "[Function]draw_sprite_general(sprite,subimg,left,top,width,height,x,y,xscale,yscale,rot,c1,c2,c3,c4,alpha) \n常规绘制函数，它绘制精灵子图的部分（－1＝当前子图）按照left,top,width,height尺寸，以scale比例，rot旋转角度，四角混合颜色（左上，右上，右下，左下），alpha透明度。"
    },
	"draw_set_font": {
        "prefix": "draw_set_font",
        "body": [
	    	"draw_set_font(${0:font})"
		],
		"description": "draw_set_font(font) \n设定绘制文本时将要使用的字体。 -1 代表默认字体（Arial 12）。"
    },
	"draw_set_halign": {
        "prefix": "draw_set_halign",
        "body": [
	    	"draw_set_halign(${0:halign})"
		],
		"description": "draw_set_halign(halign) \n设定绘制文本的水平坐标参数。选择下面三个中的一个作为值： \nfa_left 左 \nfa_center 中 \nfa_right 右"
    },
	"draw_set_valign": {
        "prefix": "draw_set_valign",
        "body": [
	    	"draw_set_valign(${0:valign})"
		],
		"description": "draw_set_valign(valign) \n设定绘制文本的垂直坐标参数。选择下面三个中的一个作为值: \nfa_top 上 \nfa_middle 中 \nfa_bottom 下 "
    },
	"draw_text_transformed": {
        "prefix": "draw_text_transformed",
        "body": [
	    	"draw_text_transformed(${1:x},${2:y},${3:string},${4:xscale},${5:yscale},${0:angle})"
		],
		"description": "draw_text_transformed(x,y,string,xscale,yscale,angle) \n在坐标(x,y)，以 xscale, yscale指定的缩放尺寸和逆时针旋转 angle 角度的方式绘制文本 string。"
    },
	"draw_text_ext_transformed": {
        "prefix": "draw_text_ext_transformed",
        "body": [
	    	"draw_text_ext_transformed(${1:x},${2:y},${3:string},${4:sep},${5:w},${6:xscale},${7:yscale},${0:angle})"
		],
		"description": "draw_text_ext_transformed(x,y,string,sep,w,xscale,yscale,angle) \n功能与draw_text_transformed()类似， 但加入了行间距 sep 和 行宽 w 。可以绘制多行文本。"
    },
	"draw_text_color": {
        "prefix": "draw_text_color",
        "body": [
	    	"draw_text_color(${1:x},${2:y},${3:string},${4:c1},${5:c2},${6:c3},${7:c4},${0:alpha})"
		],
		"description": "draw_text_color(x,y,string,c1,c2,c3,c4,alpha) \n在坐标(x,y)，左上，右上，右下，左 下四个地方指定文本颜色，以阿尔法透明通道值 alpha （0到1之间）绘制文本 string。"
    },
	"draw_text_ext_color": {
        "prefix": "draw_text_ext_color",
        "body": [
	    	"draw_text_ext_color(${1:x},${2:y},${3:string},${4:sep},${5:w},${6:c1},${7:c2},${8:c3},${9:c4},${0:alpha})"
		],
		"description": "draw_text_ext_color(x,y,string,sep,w,c1,c2,c3,c4,alpha) \ndraw_text_color()函数的多行显示变体。"
    },
	"draw_text_transformed_color": {
        "prefix": "draw_circle",
        "body": [
	    	"draw_text_transformed_color(${1:x},${2:y},${3:string},${4:xscale},${5:yscale},${6:angle},${7:c1},${8:c2},${9:c3},${10:c4},${0:alpha})"
		],
		"description": "draw_text_transformed_color(x,y,string,xscale,yscale,angle,c1,c2,c3,c4,alpha) \n与draw_text_transformed() 相同，但是多了颜色渐变。"
    },
	"draw_text_ext_transformed_color": {
        "prefix": "draw_text_transformed_color",
        "body": [
	    	"draw_text_transformed_color(${1:x},${2:y},${3:string},${4:sep},${5:w},${6:xscale},${7:yscale},${8:angle},${9:c1},${10:c2},${11:c3},${12:c4},${0:alpha})"
		],
		"description": "draw_text_transformed_color(x,y,string,sep,w,xscale,yscale,angle,c1,c2,c3,c4,alpha) \n与draw_text_ext_transformed()相同 但是多了颜色渐变。"
    }
	//Draw Event Functions End
	//Draw Event End
}