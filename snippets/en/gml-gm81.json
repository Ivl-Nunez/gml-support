{
    "normal": {
        "prefix": "n",
        "body": [
	    	"{",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "Normal block"
    },
	"if ...": {
        "prefix": "if",
        "body": [
	    	"if (${1:CONDITION}) {",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "If block"
    },
    "if … else …": {
		"prefix": "ifelse",
		"body": [
			"if (${1:CONDITION}) {",
			"\t${2:STATEMENT}",
			"} else {",
			"\t${3:STATEMENT}",
			"}",
			"$0"
		],
		"description": "If Else block"
	},
    "switch …": {
		"prefix": "switch",
		"body": [
			"switch (${1:CONDITION}) {",
			"\tcase '${2:EXPRESSION}':",
			"\t\t${3:STATEMENT}",
			"\t\tbreak;",
			"\t$0",
			"\tdefault:",
			"\t\t${4:STATEMENT}",
			"\t\tbreak;",
			"}"
		],
		"description": "Switch block"
	},
    "do … until …": {
		"prefix": "do",
		"body": [
			"do {",
			"\t${0:STATEMENT}",
			"} until (${1:${2:$a} <= ${3:10}});"
		],
		"description": "Do-until loop"
	},
    "for …": {
		"prefix": "for",
		"body": [
        "for (${1:INITIALISATION}; ${2:CONDITION}; ${3:INCREMENT}) { ",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "For-loop"
	},
    "for … i": {
		"prefix": "fori",
		"body": [
			"for (${1:i}=${2:0}; ${1:i} < ${2:CONDITION}; ${1:i}++) { ",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "For-i-loop"
	},
    "while …": {
		"prefix": "while",
		"body": [
			"while (${1:$a <= 10}) {",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "While-loop"
	},
    "repeat …": {
		"prefix": "repeat",
		"body": [
	    	"repeat (${1:EXPRESSION}) {",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "Repeat-loop"
	},
    "with ...": {
        "prefix": "with",
        "body": [
            "with (${1:EXPRESSION}) {",
            "\t${0:STATEMENT}",
            "}"
        ],
        "description": "With structure"
    },
    //GameMaker Language Lists
	//GameMaker 8.1
	//Draw Event Start
	//Draw Event Functions Start
	"draw_text": {
        "prefix": "draw_text",
        "body": [
	    	"draw_text(${1:x},${2:y},${0:string})"
		],
		"description": "[Function]draw_text(x,y,string) \nDraws the string at position (x,y), using the drawing color and alpha. A # symbol or carriage return chr(13) or linefeed chr(10) are interpreted as newline characters. In this way you can draw multi-line texts. (Use \\# to get the # symbol itself.)"
    },
	"draw_text_ext": {
        "prefix": "draw_text_ext",
        "body": [
	    	"draw_text_ext(${1:x},${2:y},${0:string})"
		],
		"description": "[Function]draw_text_ext(x,y,string) \nSimilar to the previous routine but you can specify two more things. First of all, sep indicates the separation distance between the lines of text in a multiline text. Use -1 to get the default distance. Use w to indicate the width of the text in pixels. Lines that are longer than this width are split- up at spaces or - signs. Use -1 to not split up lines."
    },
	"draw_arrow": {
        "prefix": "draw_arrow",
        "body": [
	    	"draw_arrow(${1:x1},${2:y1},${3:x2},${4:y2},${0:size})"
		],
		"description": "[Function]draw_arrow(x1,y1,x2,y2,size) \nDraws an arrow from (x1,y1) to (x2,y2). size indicates the size of the arrow in pixels."
    },
	"draw_button": {
        "prefix": "draw_button",
        "body": [
	    	"draw_button(${1:x1},${2:y1},${3:x2},${4:y2},${0:up})"
		],
		"description": "[Function]draw_button(x1,y1,x2,y2,up) \nDraws a button, up indicates whether up (1) or down (0)."
    },
	"draw_path": {
        "prefix": "draw_path",
        "body": [
	    	"draw_path(${1:path},${2:x},${3:y},${0:absolute})"
		],
		"description": "[Function]draw_path(path,x,y,absolute) \nWith this function you can draw the indicated path in the room with its start at position (x,y). If absolute is true the path is drawn at the position where it was defined and the values of x and y are ignored."
    },
	"draw_healthbar": {
        "prefix": "draw_healthbar",
        "body": [
	    	"draw_healthbar(${1:x1},${2:y1},${3:x2},${4:y2},${5:amount},${6:backcol},${7:mincol},${8:maxcol},${9:direction},${10:showback},${0:showborder})"
		],
		"description": "[Function]draw_healthbar(x1,y1,x2,y2,amount,backcol,mincol,maxcol,direction,showback,showborder) \nWith this function you can draw a healthbar (or any other bar that indicates some value, like e.g. the damage). The arguments x1, y1, x2 and y2 indicate the total area for the bar. amount indicates the percentage of the bar that must be filled (must lie between 0 and 100). backcol is the color of the background for the bar. mincol and maxcol indicate the color when the amount is 0 and 100 respectively. For an amount in between the color is interpolated. So you can easily make a bar that goes e.g. from green to red. The direction is the direction in which the bar is drawn. 0 indicates that the bar is anchored at the left, 1 at the right, 2 at the top and 3 at the bottom. Finally showback indicates whether a background box must be shown and showborder indicated whether the box and bar should have a black border line."
    },
	"draw_clear": {
        "prefix": "draw_clear",
        "body": [
	    	"draw_clear(${0:col})"
		],
		"description": "[Function]draw_clear(col) \nClears the entire room in the given color (no alpha blending)."
    },
	"draw_clear_alpha": {
        "prefix": "draw_clear_alpha",
        "body": [
	    	"draw_clear_alpha(${1:col},${0:alpha})"
		],
		"description": "[Function]draw_clear_alpha(col,alpha)\nClears the entire room in the given color and alpha value (in particular useful for surfaces)."
    },
	"draw_point": {
        "prefix": "draw_point",
        "body": [
	    	"draw_point(${1:x},${0:y})"
		],
		"description": "[Function]draw_point(x,y) nDraws a point at (x,y) in the current color."
    },
	"draw_line": {
        "prefix": "draw_line",
        "body": [
	    	"draw_line(${1:x1},${2:y1},${3:x2},${0:y2})"
		],
		"description": "[Function]draw_line(x1,y1,x2,y2) \nDraws a line from (x1,y1) to (x2,y2)."
    },
	"draw_line_width": {
        "prefix": "draw_line_width(x1,y1,x2,y2)",
        "body": [
	    	"draw_line_width(${1:x1},${2:y1},${3:x2},${4:y2},${0:w})"
		],
		"description": "[Function]draw_line_width(x1,y1,x2,y2,w) \nDraws a line from (x1,y1) to (x2,y2) with width w."
    },
	"draw_rectangle": {
        "prefix": "draw_rectangle",
        "body": [
	    	"draw_rectangle(${1:x1},${2:y1},${3:x2},${4:y2},${0:outline})"
		],
		"description": "[Function]draw_rectanglet(x1,y1,x2,y2,outline) \nDraws a rectangle. outline indicates whether only the outline must be drawn (true) or it should be filled (false)."
    },
	"draw_roundrect": {
        "prefix": "draw_roundrect",
        "body": [
	    	"draw_roundrect(${1:x1},${2:y1},${3:x2},${4:y2},${0:outline})"
		],
		"description": "[Function]draw_roundrect(x1,y1,x2,y2,outline) \nDraws a rounded rectangle. outline indicates whether only the outline must be drawn (true) or it should be filled (false)."
    },
	"draw_triangle": {
        "prefix": "draw_triangle",
        "body": [
	    	"draw_triangle(${1:x1},${2:y1},${3:x2},${4:y2},${5:x3},${6:y3},${0:outline})"
		],
		"description": "[Function]draw_triangle(x1,y1,x2,y2,x3,y3,outline) \nDraws a triangle. outline indicates whether only the outline must be drawn (true) or it should be filled (false)."
    },
	"draw_circle": {
        "prefix": "draw_circle",
        "body": [
	    	"draw_circle(${1:x},${2:y},${3:r},${0:outline})"
		],
		"description": "[Function]draw_circle(x,y,r,outline) \nDraws a circle at (x,y) with radius r. outline indicates whether only the outline must be drawn (true) or it should be filled (false)."
    },
	"draw_ellipse": {
        "prefix": "draw_ellipse",
        "body": [
	    	"draw_ellipse(${1:x1},${2:y1},${3:x2},${4:y2},${0:outline})"
		],
		"description": "[Function]draw_ellipse(x1,y1,x2,y2,outline) \nDraws an ellipse. outline indicates whether only the outline must be drawn (true) or it should be filled (false)."
    },
	"draw_set_circle_precision": {
        "prefix": "draw_set_circle_precision",
        "body": [
	    	"draw_set_circle_precision(${0:precision})"
		],
		"description": "[Function]draw_set_circle_precision(precision) \nSets the precision with which circles are drawn, that is, the number of segments they consist of. The precision must lie between 4 and 64 and must be dividable by 4. This is also used for drawing ellipses and rounded rectangles."
    },
	"draw_set_color": {
        "prefix": "draw_set_color",
        "body": [
	    	"draw_set_color(${0:col})"
		],
		"description": "[Function]draw_set_color(col) \nSets the drawing color to be used from now on for drawing primitives."
    },
	"draw_set_alpha": {
        "prefix": "draw_set_alpha",
        "body": [
	    	"draw_set_alpha(${0:alpha})"
		],
		"description": "[Function]draw_set_alpha(alpha) \nSets the alpha transparency value to be used from now on for drawing primitives. Should lie in the range 0-1. 0 is fully transparent, 1 is fully opaque."
    },
	"draw_get_color": {
        "prefix": "draw_get_color",
        "body": [
	    	"draw_get_color()"
		],
		"description": "[Function]draw_get_color() \nReturns the drawing color used for drawing primitives."
    },
	"draw_get_alpha": {
        "prefix": "draw_get_alpha",
        "body": [
	    	"draw_get_alpha()"
		],
		"description": "[Function]draw_get_alpha() \nReturns the alpha value used for drawing primitives."
    },
	"draw_getpixel": {
        "prefix": "draw_getpixel",
        "body": [
	    	"draw_getpixel(${1:x},${0:y})"
		],
		"description": "[Function]draw_getpixel(x,y) \nReturns the color of the pixel corresponding to position (x,y) in the room. This is not very fast, so use with care."
    },
	"draw_sprite": {
        "prefix": "draw_sprite",
        "body": [
	    	"draw_sprite(${1:sprite},${2:subimg},${3:x},${0:y})"
		],
		"description": "[Function]draw_sprite(sprite,subimg,x,y) \nDraws subimage subimg (-1 = current) of the sprite with its origin at position (x,y). (Without color blending and no alpha transparency.)"
    },
	"draw_sprite_stretched": {
        "prefix": "draw_sprite_stretched",
        "body": [
	    	"draw_sprite_stretched(${1:sprite},${2:subimg},${3:x},${4:y},${5:w},${0:h})"
		],
		"description": "[Function]draw_sprite_stretched(sprite,subimg,x,y,w,h) \nDraws the sprite stretched so that it fills the region with top-left corner (x,y) and width w and height h."
    },
	"draw_sprite_tiled": {
        "prefix": "draw_sprite_tiled",
        "body": [
	    	"draw_sprite_tiled(${1:sprite},${2:subimg},${3:x},${0:y})"
		],
		"description": "[Function]draw_sprite_tiled(sprite,subimg,x,y) \nDraws the sprite tiled so that it fills the entire room. (x,y) is the place where one of the sprites is drawn."
    },
	"draw_sprite_part": {
        "prefix": "draw_sprite_part",
        "body": [
	    	"draw_sprite_part(${1:sprite},${2:subimg},${3:left},${4:top},${5:width},${6:height},${7:x},${0:y})"
		],
		"description": "[Function]draw_sprite_part(sprite,subimg,left,top,width,height,x,y) \nDraws the indicated part of subimage subimg (-1 = current) of the sprite with the top-left corner of the part at position (x,y)."
    },
	"draw_background": {
        "prefix": "draw_background",
        "body": [
	    	"draw_background(${1:back},${2:x},${0:y})"
		],
		"description": "[Function]draw_background(back,x,y) \nDraws the background at position (x,y). (Without color blending and no alpha transparency.)"
    },
	"draw_background_stretched": {
        "prefix": "draw_background_stretched",
        "body": [
	    	"draw_background_stretched(${1:back},${2:x},${3:y},${4:w},${0:h})"
		],
		"description": "[Function]draw_background_stretched(back,x,y,w,h) \nDraws the background stretched to the indicated region."
    },
	"draw_background_tiled": {
        "prefix": "draw_background_tiled",
        "body": [
	    	"draw_background_tiled(${1:back},${2:x},${0:y})"
		],
		"description": "[Function]draw_background_tiled(back,x,y) \nDraws the background tiled so that it fills the entire room."
    },
	"draw_background_part": {
        "prefix": "draw_background_part",
        "body": [
	    	"draw_background_part(${1:back},${2:left},${3:top},${4:width},${5:height},${6:x},${0:y})"
		],
		"description": "[Function]draw_background_part(x,y,r,outline) \nDraws the indicated part of the background with the top-left corner of the part at position (x,y)."
    },
	"draw_sprite_ext": {
        "prefix": "draw_sprite_ext",
        "body": [
	    	"draw_sprite_ext(${1:sprite},${2:subimg},${3:x},${4:y},${5:xscale},${6:yscale},${7:rot},${8:color},${0:alpha})"
		],
		"description": "[Function]draw_sprite_ext(sprite,subimg,x,y,xscale,yscale,rot,color,alpha) \nDraws the sprite scaled with factors xscale and yscale and rotated counterclockwise over rot degrees. color is the blending color (use c_white for no blending) and alpha indicates the transparency factor with which the images is merged with its background. A value of 0 makes the sprite completely transparent. A value of 1 makes it completely solid. This function can create great effect (for example partially transparent explosions)."
    },
	"draw_sprite_stretched_ext": {
        "prefix": "draw_sprite_stretched_ext",
        "body": [
	    	"draw_sprite_stretched_ext(${1:sprite},${2:subimg},${3:x},${4:y},${5:w},${6:h},${7:color},${0:alpha})"
		],
		"description": "[Function]draw_sprite_stretched_ext(sprite,subimg,x,y,w,h,color,alpha) \nDraws the sprite stretched so that it fills the region with top-left corner (x,y) and width w and height h. color is the blending color and alpha indicates the transparency setting."
    },
	"draw_sprite_tiled_ext": {
        "prefix": "draw_sprite_tiled_ext",
        "body": [
	    	"draw_sprite_tiled_ext(${1:sprite},${2:subimg},${3:x},${4:y},${5:xscale},${6:yscale},${7:color},${0:alpha})"
		],
		"description": "[Function]draw_circle(sprite,subimg,x,y,xscale,yscale,color,alpha) \nDraws the sprite tiled so that it fills the entire room but now with scale factors and a color and transparency setting."
    },/*
	"draw_sprite_part_ext": {
        "prefix": "draw_sprite_part_ext",
        "body": [
	    	"draw_sprite_part_ext(${1:sprite},${2:subimg},${3:left},${4:top},${5:width},${6:height},${7:x},${8:y},${9:xscale},${10:yscale},${11:color},${0:alpha})"
		],
		"description": "[Function]draw_sprite_part_ext(sprite,subimg,left,top,width,height,x,y,xscale,yscale,color,alpha) \n绘制精灵子图的部分（-1为当前子图）按照left,top,width,height尺寸，以scale比例，color颜色，alpha透明度。"
    },
	"draw_sprite_general": {
        "prefix": "draw_sprite_general",
        "body": [
	    	"draw_sprite_general(${1:sprite},${2:subimg},${3:left},${4:top},${5:width},${6:height},${7:x},${8:y},${9:xscale},${10:yscale},${11:rot},${12:c1},${13:c2},${14:c3},${15:c4},${0:alpha})"
		],
		"description": "[Function]draw_sprite_general(sprite,subimg,left,top,width,height,x,y,xscale,yscale,rot,c1,c2,c3,c4,alpha) \n常规绘制函数，它绘制精灵子图的部分（－1＝当前子图）按照left,top,width,height尺寸，以scale比例，rot旋转角度，四角混合颜色（左上，右上，右下，左下），alpha透明度。"
    },
	"draw_set_font": {
        "prefix": "draw_set_font",
        "body": [
	    	"draw_set_font(${0:font})"
		],
		"description": "draw_set_font(font) \n设定绘制文本时将要使用的字体。 -1 代表默认字体（Arial 12）。"
    },
	"draw_set_halign": {
        "prefix": "draw_set_halign",
        "body": [
	    	"draw_set_halign(${0:halign})"
		],
		"description": "draw_set_halign(halign) \n设定绘制文本的水平坐标参数。选择下面三个中的一个作为值： \nfa_left 左 \nfa_center 中 \nfa_right 右"
    },
	"draw_set_valign": {
        "prefix": "draw_set_valign",
        "body": [
	    	"draw_set_valign(${0:valign})"
		],
		"description": "draw_set_valign(valign) \n设定绘制文本的垂直坐标参数。选择下面三个中的一个作为值: \nfa_top 上 \nfa_middle 中 \nfa_bottom 下 "
    },
	"draw_text_transformed": {
        "prefix": "draw_text_transformed",
        "body": [
	    	"draw_text_transformed(${1:x},${2:y},${3:string},${4:xscale},${5:yscale},${0:angle})"
		],
		"description": "draw_text_transformed(x,y,string,xscale,yscale,angle) \n在坐标(x,y)，以 xscale, yscale指定的缩放尺寸和逆时针旋转 angle 角度的方式绘制文本 string。"
    },
	"draw_text_ext_transformed": {
        "prefix": "draw_text_ext_transformed",
        "body": [
	    	"draw_text_ext_transformed(${1:x},${2:y},${3:string},${4:sep},${5:w},${6:xscale},${7:yscale},${0:angle})"
		],
		"description": "draw_text_ext_transformed(x,y,string,sep,w,xscale,yscale,angle) \n功能与draw_text_transformed()类似， 但加入了行间距 sep 和 行宽 w 。可以绘制多行文本。"
    },
	"draw_text_color": {
        "prefix": "draw_text_color",
        "body": [
	    	"draw_text_color(${1:x},${2:y},${3:string},${4:c1},${5:c2},${6:c3},${7:c4},${0:alpha})"
		],
		"description": "draw_text_color(x,y,string,c1,c2,c3,c4,alpha) \n在坐标(x,y)，左上，右上，右下，左 下四个地方指定文本颜色，以阿尔法透明通道值 alpha （0到1之间）绘制文本 string。"
    },
	"draw_text_ext_color": {
        "prefix": "draw_text_ext_color",
        "body": [
	    	"draw_text_ext_color(${1:x},${2:y},${3:string},${4:sep},${5:w},${6:c1},${7:c2},${8:c3},${9:c4},${0:alpha})"
		],
		"description": "draw_text_ext_color(x,y,string,sep,w,c1,c2,c3,c4,alpha) \ndraw_text_color()函数的多行显示变体。"
    },
	"draw_text_transformed_color": {
        "prefix": "draw_circle",
        "body": [
	    	"draw_text_transformed_color(${1:x},${2:y},${3:string},${4:xscale},${5:yscale},${6:angle},${7:c1},${8:c2},${9:c3},${10:c4},${0:alpha})"
		],
		"description": "draw_text_transformed_color(x,y,string,xscale,yscale,angle,c1,c2,c3,c4,alpha) \n与draw_text_transformed() 相同，但是多了颜色渐变。"
    },
	"draw_text_ext_transformed_color": {
        "prefix": "draw_text_transformed_color",
        "body": [
	    	"draw_text_transformed_color(${1:x},${2:y},${3:string},${4:sep},${5:w},${6:xscale},${7:yscale},${8:angle},${9:c1},${10:c2},${11:c3},${12:c4},${0:alpha})"
		],
		"description": "draw_text_transformed_color(x,y,string,sep,w,xscale,yscale,angle,c1,c2,c3,c4,alpha) \n与draw_text_ext_transformed()相同 但是多了颜色渐变。"
    }*/
	//Draw Event Functions End
	//Draw Event End
}