{
    "normal": {
        "prefix": "n",
        "body": [
	    	"{",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "Normal block"
    },
	"if ...": {
        "prefix": "if",
        "body": [
	    	"if (${1:CONDITION}) {",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "If block"
    },
    "if … else …": {
		"prefix": "ifelse",
		"body": [
			"if (${1:CONDITION}) {",
			"\t${2:STATEMENT}",
			"} else {",
			"\t${3:STATEMENT}",
			"}",
			"$0"
		],
		"description": "If Else block"
	},
    "switch …": {
		"prefix": "switch",
		"body": [
			"switch (${1:CONDITION}) {",
			"\tcase '${2:EXPRESSION}':",
			"\t\t${3:STATEMENT}",
			"\t\tbreak;",
			"\t$0",
			"\tdefault:",
			"\t\t${4:STATEMENT}",
			"\t\tbreak;",
			"}"
		],
		"description": "Switch block"
	},
    "do … until …": {
		"prefix": "do",
		"body": [
			"do {",
			"\t${0:STATEMENT}",
			"} until (${1:${2:$a} <= ${3:10}});"
		],
		"description": "Do-until loop"
	},
    "for …": {
		"prefix": "for",
		"body": [
        "for (${1:INITIALISATION}; ${2:CONDITION}; ${3:INCREMENT}) { ",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "For-loop"
	},
    "for … i": {
		"prefix": "fori",
		"body": [
			"for (${1:i}=${2:0}; ${1:i} < ${2:CONDITION}; ${1:i}++) { ",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "For-i-loop"
	},
    "while …": {
		"prefix": "while",
		"body": [
			"while (${1:$a <= 10}) {",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "While-loop"
	},
    "repeat …": {
		"prefix": "repeat",
		"body": [
	    	"repeat (${1:EXPRESSION}) {",
			"\t${0:STATEMENT}",
			"}"
		],
		"description": "Repeat-loop"
	},
    "with ...": {
        "prefix": "with",
        "body": [
            "with (${1:EXPRESSION}) {",
            "\t${0:STATEMENT}",
            "}"
        ],
        "description": "With structure"
    },
    //GameMaker Language Lists
	//GameMaker 8.1
	//Draw Event Start
	//Draw Event Functions Start
	"draw_text": {
        "prefix": "draw_text",
        "body": [
	    	"draw_text(${1:x},${2:y},${0:string})"
		],
		"description": "[Function]draw_text(x,y,string) \nDraws the string at position (x,y), using the drawing color and alpha. A # symbol or carriage return chr(13) or linefeed chr(10) are interpreted as newline characters. In this way you can draw multi-line texts. (Use \\# to get the # symbol itself.)"
    },
	"draw_text_ext": {
        "prefix": "draw_text_ext",
        "body": [
	    	"draw_text_ext(${1:x},${2:y},${0:string})"
		],
		"description": "[Function]draw_text_ext(x,y,string) \nSimilar to the previous routine but you can specify two more things. First of all, sep indicates the separation distance between the lines of text in a multiline text. Use -1 to get the default distance. Use w to indicate the width of the text in pixels. Lines that are longer than this width are split- up at spaces or - signs. Use -1 to not split up lines."
    },
	"draw_arrow": {
        "prefix": "draw_arrow",
        "body": [
	    	"draw_arrow(${1:x1},${2:y1},${3:x2},${4:y2},${0:size})"
		],
		"description": "[Function]draw_arrow(x1,y1,x2,y2,size) \nDraws an arrow from (x1,y1) to (x2,y2). size indicates the size of the arrow in pixels."
    },
	"draw_button": {
        "prefix": "draw_button",
        "body": [
	    	"draw_button(${1:x1},${2:y1},${3:x2},${4:y2},${0:up})"
		],
		"description": "[Function]draw_button(x1,y1,x2,y2,up) \nDraws a button, up indicates whether up (1) or down (0)."
    },
	"draw_path": {
        "prefix": "draw_path",
        "body": [
	    	"draw_path(${1:path},${2:x},${3:y},${0:absolute})"
		],
		"description": "[Function]draw_path(path,x,y,absolute) \nWith this function you can draw the indicated path in the room with its start at position (x,y). If absolute is true the path is drawn at the position where it was defined and the values of x and y are ignored."
    },
	"draw_healthbar": {
        "prefix": "draw_healthbar",
        "body": [
	    	"draw_healthbar(${1:x1},${2:y1},${3:x2},${4:y2},${5:amount},${6:backcol},${7:mincol},${8:maxcol},${9:direction},${10:showback},${0:showborder})"
		],
		"description": "[Function]draw_healthbar(x1,y1,x2,y2,amount,backcol,mincol,maxcol,direction,showback,showborder) \nWith this function you can draw a healthbar (or any other bar that indicates some value, like e.g. the damage). The arguments x1, y1, x2 and y2 indicate the total area for the bar. amount indicates the percentage of the bar that must be filled (must lie between 0 and 100). backcol is the color of the background for the bar. mincol and maxcol indicate the color when the amount is 0 and 100 respectively. For an amount in between the color is interpolated. So you can easily make a bar that goes e.g. from green to red. The direction is the direction in which the bar is drawn. 0 indicates that the bar is anchored at the left, 1 at the right, 2 at the top and 3 at the bottom. Finally showback indicates whether a background box must be shown and showborder indicated whether the box and bar should have a black border line."
    },
	"draw_clear": {
        "prefix": "draw_clear",
        "body": [
	    	"draw_clear(${0:col})"
		],
		"description": "[Function]draw_clear(col) \nClears the entire room in the given color (no alpha blending)."
    },
	"draw_clear_alpha": {
        "prefix": "draw_clear_alpha",
        "body": [
	    	"draw_clear_alpha(${1:col},${0:alpha})"
		],
		"description": "[Function]draw_clear_alpha(col,alpha)\nClears the entire room in the given color and alpha value (in particular useful for surfaces)."
    },
	"draw_point": {
        "prefix": "draw_point",
        "body": [
	    	"draw_point(${1:x},${0:y})"
		],
		"description": "[Function]draw_point(x,y) nDraws a point at (x,y) in the current color."
    },
	"draw_line": {
        "prefix": "draw_line",
        "body": [
	    	"draw_line(${1:x1},${2:y1},${3:x2},${0:y2})"
		],
		"description": "[Function]draw_line(x1,y1,x2,y2) \nDraws a line from (x1,y1) to (x2,y2)."
    },
	"draw_line_width": {
        "prefix": "draw_line_width(x1,y1,x2,y2)",
        "body": [
	    	"draw_line_width(${1:x1},${2:y1},${3:x2},${4:y2},${0:w})"
		],
		"description": "[Function]draw_line_width(x1,y1,x2,y2,w) \nDraws a line from (x1,y1) to (x2,y2) with width w."
    },
	"draw_rectangle": {
        "prefix": "draw_rectangle",
        "body": [
	    	"draw_rectangle(${1:x1},${2:y1},${3:x2},${4:y2},${0:outline})"
		],
		"description": "[Function]draw_rectanglet(x1,y1,x2,y2,outline) \nDraws a rectangle. outline indicates whether only the outline must be drawn (true) or it should be filled (false)."
    },
	"draw_roundrect": {
        "prefix": "draw_roundrect",
        "body": [
	    	"draw_roundrect(${1:x1},${2:y1},${3:x2},${4:y2},${0:outline})"
		],
		"description": "[Function]draw_roundrect(x1,y1,x2,y2,outline) \nDraws a rounded rectangle. outline indicates whether only the outline must be drawn (true) or it should be filled (false)."
    },
	"draw_triangle": {
        "prefix": "draw_triangle",
        "body": [
	    	"draw_triangle(${1:x1},${2:y1},${3:x2},${4:y2},${5:x3},${6:y3},${0:outline})"
		],
		"description": "[Function]draw_triangle(x1,y1,x2,y2,x3,y3,outline) \nDraws a triangle. outline indicates whether only the outline must be drawn (true) or it should be filled (false)."
    },
	"draw_circle": {
        "prefix": "draw_circle",
        "body": [
	    	"draw_circle(${1:x},${2:y},${3:r},${0:outline})"
		],
		"description": "[Function]draw_circle(x,y,r,outline) \nDraws a circle at (x,y) with radius r. outline indicates whether only the outline must be drawn (true) or it should be filled (false)."
    },
	"draw_ellipse": {
        "prefix": "draw_ellipse",
        "body": [
	    	"draw_ellipse(${1:x1},${2:y1},${3:x2},${4:y2},${0:outline})"
		],
		"description": "[Function]draw_ellipse(x1,y1,x2,y2,outline) \nDraws an ellipse. outline indicates whether only the outline must be drawn (true) or it should be filled (false)."
    },
	"draw_set_circle_precision": {
        "prefix": "draw_set_circle_precision",
        "body": [
	    	"draw_set_circle_precision(${0:precision})"
		],
		"description": "[Function]draw_set_circle_precision(precision) \nSets the precision with which circles are drawn, that is, the number of segments they consist of. The precision must lie between 4 and 64 and must be dividable by 4. This is also used for drawing ellipses and rounded rectangles."
    },
	"draw_set_color": {
        "prefix": "draw_set_color",
        "body": [
	    	"draw_set_color(${0:col})"
		],
		"description": "[Function]draw_set_color(col) \nSets the drawing color to be used from now on for drawing primitives."
    },
	"draw_set_alpha": {
        "prefix": "draw_set_alpha",
        "body": [
	    	"draw_set_alpha(${0:alpha})"
		],
		"description": "[Function]draw_set_alpha(alpha) \nSets the alpha transparency value to be used from now on for drawing primitives. Should lie in the range 0-1. 0 is fully transparent, 1 is fully opaque."
    },
	"draw_get_color": {
        "prefix": "draw_get_color",
        "body": [
	    	"draw_get_color()"
		],
		"description": "[Function]draw_get_color() \nReturns the drawing color used for drawing primitives."
    },
	"draw_get_alpha": {
        "prefix": "draw_get_alpha",
        "body": [
	    	"draw_get_alpha()"
		],
		"description": "[Function]draw_get_alpha() \nReturns the alpha value used for drawing primitives."
    },
	"draw_getpixel": {
        "prefix": "draw_getpixel",
        "body": [
	    	"draw_getpixel(${1:x},${0:y})"
		],
		"description": "[Function]draw_getpixel(x,y) \nReturns the color of the pixel corresponding to position (x,y) in the room. This is not very fast, so use with care."
    },
	"draw_sprite": {
        "prefix": "draw_sprite",
        "body": [
	    	"draw_sprite(${1:sprite},${2:subimg},${3:x},${0:y})"
		],
		"description": "[Function]draw_sprite(sprite,subimg,x,y) \nDraws subimage subimg (-1 = current) of the sprite with its origin at position (x,y). (Without color blending and no alpha transparency.)"
    },
	"draw_sprite_stretched": {
        "prefix": "draw_sprite_stretched",
        "body": [
	    	"draw_sprite_stretched(${1:sprite},${2:subimg},${3:x},${4:y},${5:w},${0:h})"
		],
		"description": "[Function]draw_sprite_stretched(sprite,subimg,x,y,w,h) \nDraws the sprite stretched so that it fills the region with top-left corner (x,y) and width w and height h."
    },
	"draw_sprite_tiled": {
        "prefix": "draw_sprite_tiled",
        "body": [
	    	"draw_sprite_tiled(${1:sprite},${2:subimg},${3:x},${0:y})"
		],
		"description": "[Function]draw_sprite_tiled(sprite,subimg,x,y) \nDraws the sprite tiled so that it fills the entire room. (x,y) is the place where one of the sprites is drawn."
    },
	"draw_sprite_part": {
        "prefix": "draw_sprite_part",
        "body": [
	    	"draw_sprite_part(${1:sprite},${2:subimg},${3:left},${4:top},${5:width},${6:height},${7:x},${0:y})"
		],
		"description": "[Function]draw_sprite_part(sprite,subimg,left,top,width,height,x,y) \nDraws the indicated part of subimage subimg (-1 = current) of the sprite with the top-left corner of the part at position (x,y)."
    },
	"draw_background": {
        "prefix": "draw_background",
        "body": [
	    	"draw_background(${1:back},${2:x},${0:y})"
		],
		"description": "[Function]draw_background(back,x,y) \nDraws the background at position (x,y). (Without color blending and no alpha transparency.)"
    },
	"draw_background_stretched": {
        "prefix": "draw_background_stretched",
        "body": [
	    	"draw_background_stretched(${1:back},${2:x},${3:y},${4:w},${0:h})"
		],
		"description": "[Function]draw_background_stretched(back,x,y,w,h) \nDraws the background stretched to the indicated region."
    },
	"draw_background_tiled": {
        "prefix": "draw_background_tiled",
        "body": [
	    	"draw_background_tiled(${1:back},${2:x},${0:y})"
		],
		"description": "[Function]draw_background_tiled(back,x,y) \nDraws the background tiled so that it fills the entire room."
    },
	"draw_background_part": {
        "prefix": "draw_background_part",
        "body": [
	    	"draw_background_part(${1:back},${2:left},${3:top},${4:width},${5:height},${6:x},${0:y})"
		],
		"description": "[Function]draw_background_part(x,y,r,outline) \nDraws the indicated part of the background with the top-left corner of the part at position (x,y)."
    },
	"draw_sprite_ext": {
        "prefix": "draw_sprite_ext",
        "body": [
	    	"draw_sprite_ext(${1:sprite},${2:subimg},${3:x},${4:y},${5:xscale},${6:yscale},${7:rot},${8:color},${0:alpha})"
		],
		"description": "[Function]draw_sprite_ext(sprite,subimg,x,y,xscale,yscale,rot,color,alpha) \nDraws the sprite scaled with factors xscale and yscale and rotated counterclockwise over rot degrees. color is the blending color (use c_white for no blending) and alpha indicates the transparency factor with which the images is merged with its background. A value of 0 makes the sprite completely transparent. A value of 1 makes it completely solid. This function can create great effect (for example partially transparent explosions)."
    },
	"draw_sprite_stretched_ext": {
        "prefix": "draw_sprite_stretched_ext",
        "body": [
	    	"draw_sprite_stretched_ext(${1:sprite},${2:subimg},${3:x},${4:y},${5:w},${6:h},${7:color},${0:alpha})"
		],
		"description": "[Function]draw_sprite_stretched_ext(sprite,subimg,x,y,w,h,color,alpha) \nDraws the sprite stretched so that it fills the region with top-left corner (x,y) and width w and height h. color is the blending color and alpha indicates the transparency setting."
    },
	"draw_sprite_tiled_ext": {
        "prefix": "draw_sprite_tiled_ext",
        "body": [
	    	"draw_sprite_tiled_ext(${1:sprite},${2:subimg},${3:x},${4:y},${5:xscale},${6:yscale},${7:color},${0:alpha})"
		],
		"description": "[Function]draw_circle(sprite,subimg,x,y,xscale,yscale,color,alpha) \nDraws the sprite tiled so that it fills the entire room but now with scale factors and a color and transparency setting."
    },
	"draw_sprite_part_ext": {
        "prefix": "draw_sprite_part_ext",
        "body": [
	    	"draw_sprite_part_ext(${1:sprite},${2:subimg},${3:left},${4:top},${5:width},${6:height},${7:x},${8:y},${9:xscale},${10:yscale},${11:color},${0:alpha})"
		],
		"description": "[Function]draw_sprite_part_ext(sprite,subimg,left,top,width,height,x,y,xscale,yscale,color,alpha) \nDraws the indicated part of subimage subimg (-1 = current) of the sprite with the top-left corner of the part at position (x,y) but now with scale factors and a color and transparency setting."
    },
	"draw_sprite_general": {
        "prefix": "draw_sprite_general",
        "body": [
	    	"draw_sprite_general(${1:sprite},${2:subimg},${3:left},${4:top},${5:width},${6:height},${7:x},${8:y},${9:xscale},${10:yscale},${11:rot},${12:c1},${13:c2},${14:c3},${15:c4},${0:alpha})"
		],
		"description": "[Function]draw_sprite_general(sprite,subimg,left,top,width,height,x,y,xscale,yscale,rot,c1,c2,c3,c4,alpha) \nThe most general drawing function. It draws the indicated part of subimage subimg (-1 = current) of the sprite with the top-left corner of the part at position (x,y) but now with scale factors, a rotation angle, a color for each of the four vertices (top-left, top-right, bottom-right, and bottom-left), and an alpha transparency value. Note that rotation takes place around the top-left corner of the part."
    },
	"draw_set_font": {
        "prefix": "draw_set_font",
        "body": [
	    	"draw_set_font(${0:font})"
		],
		"description": "[Function]draw_set_font(font) \nSets the font that will be used when drawing text. Use -1 to set the default font (Arial 12)."
    },
	"draw_set_halign": {
        "prefix": "draw_set_halign",
        "body": [
	    	"draw_set_halign(${0:halign})"
		],
		"description": "[Function]draw_set_halign(halign) \nSets the horizontal alignment used when drawing text. Choose one of the following constants as values: \nfa_left \nfa_center \nfa_right "
    },
	"draw_set_valign": {
        "prefix": "draw_set_valign",
        "body": [
	    	"draw_set_valign(${0:valign})"
		],
		"description": "[Function]draw_set_valign(valign) \nSets the vertical alignment used when drawing text. Choose one of the following constants as values: \nfa_top \nfa_middle \nfa_bottom "
    },
	"draw_text_transformed": {
        "prefix": "draw_text_transformed",
        "body": [
	    	"draw_text_transformed(${1:x},${2:y},${3:string},${4:xscale},${5:yscale},${0:angle})"
		],
		"description": "[Function]draw_text_transformed(x,y,string,xscale,yscale,angle) \nDraws the string at position (x,y) in the same way as above, but scale it horizontally and vertically with the indicated factors and rotate it counter-clockwise over angle degrees."
    },
	"draw_text_ext_transformed": {
        "prefix": "draw_text_ext_transformed",
        "body": [
	    	"draw_text_ext_transformed(${1:x},${2:y},${3:string},${4:sep},${5:w},${6:xscale},${7:yscale},${0:angle})"
		],
		"description": "[Function]draw_text_ext_transformed(x,y,string,sep,w,xscale,yscale,angle) \nCombines the function draw_text_ext and draw_text_transformed. It makes it possible to draw a multi-line text rotated and scaled."
    },
	"draw_text_color": {
        "prefix": "draw_text_color",
        "body": [
	    	"draw_text_color(${1:x},${2:y},${3:string},${4:c1},${5:c2},${6:c3},${7:c4},${0:alpha})"
		],
		"description": "[Function]draw_text_color(x,y,string,c1,c2,c3,c4,alpha) \nDraws the string at position (x,y) like above. The four colors specify the colors of the top-left, top-right, bottom-right, and bottom-left corner of the text. alpha is the alpha transparency to be used (0-1)."
    },
	"draw_text_ext_color": {
        "prefix": "draw_text_ext_color",
        "body": [
	    	"draw_text_ext_color(${1:x},${2:y},${3:string},${4:sep},${5:w},${6:c1},${7:c2},${8:c3},${9:c4},${0:alpha})"
		],
		"description": "[Function]draw_text_ext_color(x,y,string,sep,w,c1,c2,c3,c4,alpha) \nSimilar to draw_text_ext() but with colored vertices."
    },
	"draw_text_transformed_color": {
        "prefix": "draw_circle",
        "body": [
	    	"draw_text_transformed_color(${1:x},${2:y},${3:string},${4:xscale},${5:yscale},${6:angle},${7:c1},${8:c2},${9:c3},${10:c4},${0:alpha})"
		],
		"description": "[Function]draw_text_transformed_color(x,y,string,xscale,yscale,angle,c1,c2,c3,c4,alpha) \nSimilar to draw_text_transformed() but with colored vertices."
    },
	"draw_text_ext_transformed_color": {
        "prefix": "draw_text_transformed_color",
        "body": [
	    	"draw_text_transformed_color(${1:x},${2:y},${3:string},${4:sep},${5:w},${6:xscale},${7:yscale},${8:angle},${9:c1},${10:c2},${11:c3},${12:c4},${0:alpha})"
		],
		"description": "[Function]draw_text_transformed_color(x,y,string,sep,w,xscale,yscale,angle,c1,c2,c3,c4,alpha) \nSimilar to draw_text_ext_transformed() but with colored vertices."
    },
	"draw_point_color": {
        "prefix": "draw_point_color",
        "body": [
	    	"draw_point_color(${1:x},${2:y},${0:col1})"
		],
		"description": "[Function]draw_point_color(x,y,col1) \nDraws a point at (x,y) in the given color."
    },
	"draw_line_color": {
        "prefix": "draw_line_color",
        "body": [
	    	"draw_line_color(${1:x1},${2:y1},${3:x2},${4:y2},${5:col1},${0:col2})"
		],
		"description": "[Function]draw_line_color(x1,y1,x2,y2,col1,col2) \nDraws a line from (x1,y1) to (x2,y2), interpolating the color between col1 and col2."
    },
	"draw_line_width_color": {
        "prefix": "draw_line_width_color",
        "body": [
	    	"draw_line_width_color(${1:x1},${2:y1},${3:x2},${4:y2},${5:w},${6:col1},${0:col2})"
		],
		"description": "[Function]draw_line_width_color(x1,y1,x2,y2,w,col1,col2) \nDraws a line from (x1,y1) to (x2,y2) with width w interpolating the color between col1 and col2."
    },
	"draw_rectangle_color": {
        "prefix": "draw_rectangle_color",
        "body": [
	    	"draw_rectangle_color(${1:x1},${2:y1},${3:x2},${4:y2},${5:col1},${6:col2},${7:col3},${8:col4},${0:outline})"
		],
		"description": "[Function]draw_rectangle_color(x1,y1,x2,y2,col1,col2,col3,col4,outline) \nDraws a rectangle. The four colors indicated the colors at the top-left, top-right, bottom-right, and bottom-left vertex. outline indicates whether only the outline must be drawn (true) or it should be filled (false)."
    },
	"draw_roundrect_color": {
        "prefix": "draw_roundrect_color",
        "body": [
	    	"draw_roundrect_color(${1:x1},${2:y1},${3:x2},${4:y2},${5:col1},${6:col2},${0:outline})"
		],
		"description": "[Function]draw_roundrect_color(x1,y1,x2,y2,col1,col2,outline) \nDraws a rounded rectangle. col1 is the color in the middle and col2 the color at the boundary. outline indicates whether only the outline must be drawn (true) or it should be filled (false)."
    },
	"draw_triangle_color": {
        "prefix": "draw_triangle_color",
        "body": [
	    	"draw_triangle_color(${1:x1},${2:y1},${3:x2},${4:y2},${5:x3},${6:y3),${7:col1},${8:col2},${9:col3},${0:outline})"
		],
		"description": "[Function]draw_triangle_color(x1,y1,x2,y2,x3,y3,col1,col2,col3,outline) \nDraws a triangle. The three colors are the colors of the three vertices which is interpolated over the triangle. outline indicates whether only the outline must be drawn (true) or it should be filled (false)."
    },
	"draw_circle_color": {
        "prefix": "draw_circle_color",
        "body": [
	    	"draw_circle_color(${1:x},${2:y},${3:col1},${4:col2},${0:outline})"
		],
		"description": "[Function]draw_circle_color(x,y,r,col1,col2,outline) \nDraws a circle at (x,y) with radius r. col1 is the color in the middle and col2 the color at the boundary. outline indicates whether only the outline must be drawn (true) or it should be filled (false)."
    },
	"draw_ellipse_color": {
        "prefix": "draw_ellipse_color",
        "body": [
	    	"draw_ellipse_color(${1:x1},${2:y1},${3:x2},${4:y2},${5:col1},${6:col2},${0:outline})"
		],
		"description": "[Function]draw_ellipse_color(x1,y1,x2,y2,col1,col2,outline) \nDraws an ellipse. col1 is the color in the middle and col2 the color at the boundary. outline indicates whether only the outline must be drawn (true) or it should be filled (false)."
    },
	"draw_primitive_begin": {
        "prefix": "draw_primitive_begin",
        "body": [
	    	"draw_primitive_begin(${0:kind})"
		],
		"description": "[Function]draw_primitive_begin(kind) \nStart a primitive of the indicated kind."
    },
	"draw_vertex": {
        "prefix": "draw_vertex",
        "body": [
	    	"draw_vertex(${1:x},${0:y})"
		],
		"description": "[Function]draw_vertex(x,y) \nAdd vertex (x,y) to the primitive, using the color and alpha value set before."
    },
	"draw_vertex_color": {
        "prefix": "draw_vertex_color",
        "body": [
	    	"draw_vertex_color(${1:x},${2:y},${3:col},${0:alpha})"
		],
		"description": "[Function]draw_vertex_color(x,y,col,alpha) \nAdd vertex (x,y) to the primitive, with its own color and alpha value. This allows you to create primitives with smoothly changing color and alpha values."
    },
	"draw_primitive_end": {
        "prefix": "draw_primitive_end",
        "body": [
	    	"draw_primitive_end()"
		],
		"description": "[Function]draw_primitive_end() \nEnd the description of the primitive. This function actually draws it."
    },
	"draw_primitive_begin_texture": {
        "prefix": "draw_primitive_begin_texture",
        "body": [
	    	"draw_primitive_begin_texture(${1:kind},${0:texid})"
		],
		"description": "[Function]draw_primitive_begin_texture(kind,texid) \nStart a primitive of the indicated kind with the given texture."
    },
	"draw_vertex_texture": {
        "prefix": "draw_vertex_texture",
        "body": [
	    	"draw_vertex_texture(${1:x},${2:y},${3:xtex},${0:ytex})"
		],
		"description": "[Function]draw_vertex_texture(x,y,xtex,ytex) \nAdd vertex (x,y) to the primitive with position (xtex,ytex) in the texture, blending with the color and alpha value set before. xtex and ytex should normally lie between 0 and 1 but also larger values can be used, leading to a repetition of the texture (see below)."
    },
	"draw_vertex_texture_color": {
        "prefix": "draw_vertex_texture_color",
        "body": [
	    	"draw_vertex_texture_color(${1:x},${2:y},${3:xtex},${4:ytex},${5:col},${0:alpha})"
		],
		"description": "[Function]draw_vertex_texture_color(x,y,xtex,ytex,col,alpha) \nAdd vertex (x,y) to the primitive with position (xtex,ytex) in the texture, blending with its own color and alpha value."
    },
	"draw_set_blend_mode": {
        "prefix": "draw_set_blend_mode",
        "body": [
	    	"draw_set_blend_mode(${0:mode})"
		],
		"description": "[Function]draw_set_blend_mode(mode) \nIndicates what blend mode to use. The following values are possible: bm_normal, bm_add, bm_subtract, and bm_max. Don't forget to reset the mode to normal after use because otherwise also other sprites and even the backgrounds are drawn with the new blend mode."
    },
	"draw_set_blend_mode_ext": {
        "prefix": "draw_set_blend_mode_ext",
        "body": [
	    	"draw_set_blend_mode_ext(${1:src},${0:dest})"
		],
		"description": "[Function]draw_set_blend_mode_ext(font) \nIndicates what blend mode to use for both the source and destination color. The new color is some factor times the source and another factor times the destination. These factors are set with this function. To understand this, the source and destination both have a red, green, blue, and alpha component. So the source is (Rs, Gs, Bs, As) and the destination is (Rd, Gd, Bd, Ad). All are considered to lie between 0 and 1. The blend factors you can choose for source and destination are:  \nbm_zero: Blend factor is  (0, 0, 0, 0). \nbm_one: Blend factor is  (1, 1, 1, 1). \nbm_src_color: Blend factor is (Rs, Gs, Bs, As). \nbm_inv_src_color: Blend factor is (1–Rs, 1–Gs, 1–Bs, 1–As). \nbm_src_alpha: Blend factor is (As, As, As, As). \nbm_inv_src_alpha: Blend factor is (1–As, 1–As, 1–As, 1–As). \nbm_dest_alpha: Blend factor is (Ad, Ad, Ad, Ad). \nbm_inv_dest_alpha: Blend factor is (1–Ad, 1–Ad, 1–Ad, 1–Ad). \nbm_dest_color: Blend factor is (Rd, Gd, Bd, Ad). \nbm_inv_dest_color: Blend factor is (1–Rd, 1–Gd, 1–Bd, 1–Ad). \nbm_src_alpha_sat: Blend factor is (f, f, f, 1); f = min(As, 1–Ad). \nFor example, the normal blending mode sets the source blending to bm_src_alpha and the destination blending to bm_inv_src_alpha. Don't forget to reset the mode to normal after use because otherwise also other sprites and even the backgrounds are drawn with the new blend mode."
    },
	"draw_surface": {
        "prefix": "draw_surface",
        "body": [
	    	"draw_surface(${1:id},${2:x},${0:y})"
		],
		"description": "[Function]draw_surface(id,x,y) \nDraws the surface at position (x,y). (Without color blending and no alpha transparency.)"
    },
	"draw_surface_stretched": {
        "prefix": "draw_surface_stretched",
        "body": [
	    	"draw_surface_stretched(${1:id},${2:x},${3:y},${4:w},${0:h})"
		],
		"description": "[Function]draw_surface_stretched(id,x,y,w,h) \nDraws the surface stretched to the indicated region."
    },
	"draw_surface_tiled": {
        "prefix": "draw_surface_tiled",
        "body": [
	    	"draw_surface_tiled(${1:id},${2:x},${0:y})"
		],
		"description": "[Function]draw_surface_tiled(id,x,y) \nDraws the surface tiled so that it fills the entire room."
    },
	"draw_surface_part": {
        "prefix": "draw_surface_part",
        "body": [
	    	"draw_surface_part(${1:id},${2:left},${3:top},${4:width},${5:height},${6:x},${0:y})"
		],
		"description": "[Function]draw_surface_part(id,left,top,width,height,x,y) \nDraws the indicated part of the surface with its origin at position (x,y)."
    },
	"draw_surface_ext": {
        "prefix": "draw_surface_ext",
        "body": [
	    	"draw_surface_ext(${1:id},${2:x},${3:y},${4:xscale},${5:yscale},${6:rot},${7:color},${0:alpha})"
		],
		"description": "[Function]draw_surface_ext(id,x,y,xscale,yscale,rot,color,alpha) \nDraws the surface scaled and rotated with blending color (use c_white for no blending) and transparency alpha (0-1)."
    },
	"draw_surface_stretched_ext": {
        "prefix": "draw_surface_stretched_ext",
        "body": [
	    	"draw_surface_stretched_ext(${1:id},${2:x},${3:y},${4:w},${5:h},${6:color},${0:alpha})"
		],
		"description": "[Function]draw_surface_stretched_ext(id,x,y,w,h,color,alpha) \nDraws the surface stretched to the indicated region. color is the blending color and alpha indicates the transparency setting."
    },
	"draw_surface_tiled_ext": {
        "prefix": "draw_surface_tiled_ext",
        "body": [
	    	"draw_surface_tiled_ext((${1:id},${2:x},${3:y},${4:xscale},${5:yscale},${6:color},${0:alpha})"
		],
		"description": "[Function]draw_surface_tiled_ext(id,x,y,xscale,yscale,color,alpha) \n绘制表面贴图填充房间但是按照设定的比例,颜色,透明度。"
    },
	"draw_surface_part_ext": {
        "prefix": "draw_surface_part_ext",
        "body": [
	    	"draw_surface_part_ext(${1:id},${2:left},${3:top},${4:width},${5:height},${6:x},${7:y},${8:xscale},${9:yscale},${10:color},${0:alpha})"
		],
		"description": "[Function]draw_surface_part_ext(id,left,top,width,height,x,y,xscale,yscale,color,alpha) \nDraws the surface tiled so that it fills the entire room but now with scale factors and a color and transparency setting."
    },
	"draw_surface_general": {
        "prefix": "draw_surface_general",
        "body": [
	    	"draw_surface_general(${1:id},${2:left},${3:top},${4:width},${5:height},${6:x},${7:y},${8:xscale},${9:yscale},${10:rot},${11:c1},${12:c2},${13:c3},${14:c4},${0:alpha})"
		],
		"description": "[Function]draw_surface_general(id,left,top,width,height,x,y,xscale,yscale,rot,c1,c2,c3,c4,alpha) \nThe most general drawing function. It draws the indicated part of the surface with its origin at position (x,y) but now with scale factors, a rotation angle, a color for each of the four vertices (top-left, top-right, bottom-right, and bottom-left), and an alpha transparency value."
    }
	,
	"make_color_rgb": {
        "prefix": "make_color_rgb",
        "body": [
	    	"make_color_rgb(${1:red},${2:green},${0:blue})"
		],
		"description": "[Function]make_color_rgb(red,green,blue) \n Returns a color with the indicated red, green, and blue components, where red, green and blue must be values between 0 and 255."
    },
	"make_color_hsv": {
        "prefix": "make_color_hsv",
        "body": [
	    	"make_color_hsv(${1:hue},${2:saturation},${0:value})"
		],
		"description": "[Function]make_color_hsv(hue,saturation,value) \nReturns a color with the indicated hue, saturation and value components (each between 0 and 255)."
    },
	"color_get_red": {
        "prefix": "color_get_red",
        "body": [
	    	"color_get_red(${0:col})"
		],
		"description": "[Function]color_get_red(col) \nReturns the red component of the color."
    },
	"color_get_green": {
        "prefix": "color_get_green",
        "body": [
	    	"color_get_green(${0:col})"
		],
		"description": "[Function]color_get_green(col) \nReturns the green component of the color."
    },
	"color_get_blue": {
        "prefix": "color_get_blue",
        "body": [
	    	"color_get_blue(${0:col})"
		],
		"description": "[Function]color_get_blue(col) \nReturns the blue component of the color."
    },
	"color_get_hue": {
        "prefix": "color_get_hue",
        "body": [
	    	"color_get_hue(${0:col})"
		],
		"description": "[Function]color_get_hue(col) \nReturns the hue component of the color."
    },
	"color_get_saturation": {
        "prefix": "color_get_saturation",
        "body": [
	    	"color_get_saturation(${0:col})"
		],
		"description": "[Function]color_get_saturation(col) \nReturns the saturation component of the color."
    },
	"color_get_value": {
        "prefix": "color_get_value",
        "body": [
	    	"color_get_value(${0:col})"
		],
		"description": "[Function]color_get_value(col) \nReturns the value component of the color."
    },
	"merge_color": {
        "prefix": "merge_color",
        "body": [
	    	"merge_color(${1:col1},${2:col2},${0:amount})"
		],
		"description": "[Function]merge_color(col1,col2,amount) \nReturns a merged color of col1 and col2. The merging is determined by amount. A value of 0 corresponds to col1, a value of 1 to col2, and values in between to merged values."
    },
	"screen_save": {
        "prefix": "screen_save",
        "body": [
	    	"screen_save(${0:fname})"
		],
		"description": "[Function]screen_save(fname) \nSaves a png image of the screen in the given filename. Useful for making screenshots."
    },
	"screen_save_part": {
        "prefix": "screen_save_part",
        "body": [
	    	"screen_save_part(${1:fname},${2:x},${3:y},${4:w},${0:h})"
		],
		"description": "[Function]screen_save_part(fname,x,y,w,h) \nSaves part of the screen in the given png filename."
    },
	"string_width": {
        "prefix": "string_width",
        "body": [
	    	"string_width(${0:string})"
		],
		"description": "[Function]string_width(string) \nWidth of the string in the current font as it would be drawn using the draw_text() function. Can be used for precisely positioning graphics."
    },
	"string_height": {
        "prefix": "string_height",
        "body": [
	    	"string_height(${0:string})"
		],
		"description": "[Function]string_height(string) \nHeight of the string in the current font as it would be drawn using the draw_text() function."
    },
	"string_width_ext": {
        "prefix": "string_width_ext",
        "body": [
	    	"string_width_ext(${1:string},${2:sep},${0:w})"
		],
		"description": "[Function]string_width_ext(string,sep,w) \nWidth of the string in the current font as it would be drawn using the draw_text_ext() function. Can be used for precisely positioning graphics."
    },
	"string_height_ext": {
        "prefix": "string_height_ext",
        "body": [
	    	"string_height_ext(${1:string},${2:sep},${0:w})"
		],
		"description": "[Function]string_height_ext(string,sep,w) \nHeight of the string in the current font as it would be drawn using the draw_text_ext() function."
    },
	"texture_preload": {
        "prefix": "texture_preload",
        "body": [
	    	"texture_preload(${0:texid})"
		],
		"description": "[Function]texture_preload(texid) \nPuts the texture immediately into video memory."
    },
	"texture_set_priority": {
        "prefix": "texture_set_priority",
        "body": [
	    	"texture_set_priority(${1:texid},${0:prio})"
		],
		"description": "[Function]texture_set_priority(texid,prio) \nWhen there is too little video memory some will be removed temporarily to make room for others that are needed. The ones with lowest priority are removed first. Default, all have priority 0 but you can change the priority here. (Use positive values!)"
    },
	"texture_get_width": {
        "prefix": "texture_get_width",
        "body": [
	    	"texture_get_width(${0:texid})"
		],
		"description": "[Function]texture_get_width(texid) \nReturns the width of the texture with the given id. The width lies in the range 0-1."
    },
	"texture_get_height": {
        "prefix": "texture_get_height",
        "body": [
	    	"texture_get_height(${0:texid})"
		],
		"description": "[Function]texture_get_height(texid) \nReturns the height of the texture with the given id. The height lies in the range 0-1."
    },
	"texture_set_interpolation": {
        "prefix": "texture_set_interpolation",
        "body": [
	    	"texture_set_interpolation(${0:linear})"
		],
		"description": "[Function]texture_set_interpolation(linear) \nIndicates whether to use linear interpolation (true) or pick the nearest pixel (false). Linear interpolation gives smoother textures but can also be a bit blurry and sometimes costs extra time. This setting also influence the drawing of sprites and background. Default is false. (This can also be changed in the global game settings.)"
    },
	"texture_set_blending": {
        "prefix": "texture_set_blending",
        "body": [
	    	"texture_set_blending(${0:blend})"
		],
		"description": "[Function]texture_set_blending(blend) \nIndicates whether to use blending with colors and alpha values. Switching this off might be faster on old hardware. This setting also influence the drawing of sprites and background. Default is true."
    },
	"texture_set_repeat": {
        "prefix": "texture_set_repeat",
        "body": [
	    	"texture_set_repeat(${0:repeat})"
		],
		"description": "[Function]texture_set_repeat(repeat) \nIndicates whether to use repeat the texture. This works as follows. As indicated above texture coordinates lie in the range 0-1. If you specify a value larger than 1, default the rest is not drawn. By setting repeat to true the texture is repeated. Note that sprites and backgrounds are always drawn without repeating. So once you draw a sprite of background this value is reset to false. Default is false."
    },
	"surface_create": {
        "prefix": "surface_create",
        "body": [
	    	"surface_create(${1:w},${0:h})"
		],
		"description": "[Function]surface_create(w,h) \nCreates a surface of the indicated width and height. Returns the id of the surface, which must be used in all further calls. Note that the surface will not be cleared. This is the responsibility of the user. (Set it as a target and call the appropriate clear function.)"
    },
	"surface_free": {
        "prefix": "surface_free",
        "body": [
	    	"surface_free(${0:id})"
		],
		"description": "[Function]surface_free(id) \nFrees the memory used by the surface."
    },
	"surface_exists": {
        "prefix": "surface_exists",
        "body": [
	    	"surface_exists(${0:id})"
		],
		"description": "[Function]surface_exists(id) \nReturns whether the surface with the indicated id exists."
    },
	"surface_get_width": {
        "prefix": "surface_get_width",
        "body": [
	    	"surface_get_width(${0:id})"
		],
		"description": "[Function]surface_get_width(id) \nReturns the width of the surface."
    },
	"surface_get_height": {
        "prefix": "surface_get_height",
        "body": [
	    	"surface_get_height(${0:id})"
		],
		"description": "[Function]surface_get_height(id) \nReturns the height of the surface."
    },
	"surface_get_texture": {
        "prefix": "surface_get_texture",
        "body": [
	    	"surface_get_texture(${0:id})"
		],
		"description": "[Function]surface_get_texture(id) \nReturns the texture corresponding to the surface. This can be used to draw textured objects with the image of the surface."
    },
	"surface_set_target": {
        "prefix": "surface_set_target",
        "body": [
	    	"surface_set_target(${0:id})"
		],
		"description": "[Function]surface_set_target(id) \nSets the indicated surface as the drawing target. All subsequent drawing happens on this surface. It resets the projection to simply cover the surface."
    },
	"surface_reset_target": {
        "prefix": "surface_reset_target",
        "body": [
	    	"surface_reset_target()"
		],
		"description": "[Function]surface_reset_target() \nResets the drawing target to the normal screen."
    },
	"surface_getpixel": {
        "prefix": "surface_getpixel",
        "body": [
	    	"surface_getpixel(${1:id},${2:x},${0:y})"
		],
		"description": "[Function]surface_getpixel(id,x,y) \nReturns the color of the pixel corresponding to position (x,y) in the surface. This is not very fast, so use with care."
    },
	"surface_save": {
        "prefix": "surface_save",
        "body": [
	    	"surface_save(${1:id},${0:fname})"
		],
		"description": "[Function]surface_save(id,fname) \nSaves a png image of the surface in the given filename. Useful for making screenshots."
    },
	"surface_save_part": {
        "prefix": "screen_save_part",
        "body": [
	    	"screen_save_part(${1:id},${2:fname},${3:x},${4:y},${5:w},${0:h})"
		],
		"description": "[Function]screen_save_part(id,fname,x,y,w,h) \nSaves part of the surface in the given png filename."
    },
	"surface_copy": {
        "prefix": "surface_copy",
        "body": [
	    	"surface_copy(${1:destination},${2:x},${3:y},${0:source})"
		],
		"description": "[Function]surface_copy(destination,x,y,source) \nCopies the source surface at position (x,y) in the destination surface. (Without any form of blending.)"
    },
	"surface_copy_part": {
        "prefix": "surface_copy_part",
        "body": [
	    	"surface_copy_part(${1:destination},${2:x},${3:y},${4:source},${5:xs},${6:ys},${7:ws},${0:hs})"
		],
		"description": "[Function]surface_copy_part(destination,x,y,source,xs,ys,ws,hs) \nCopies the indicated part of the source surface at position (x,y) in the destination surface. (Without any form of blending.)"
    },
	"tile_add": {
        "prefix": "tile_add",
        "body": [
	    	"tile_add(${1:background},${2:left},${3:top},${4:width},${5:height},${6:x},${7:y},${0:depth})"
		],
		"description": "[Function]tile_add(background,left,top,width,height,x,y,depth) \nAdds a new tile to the room with the indicated values (see above for their meaning). The function returns the id of the tile that can be used later on."
    },
	"tile_delete": {
        "prefix": "tile_delete",
        "body": [
	    	"tile_delete(${0:id})"
		],
		"description": "[Function]tile_delete(id) \nDeletes the tile with the given id."
    },
	"tile_exists": {
        "prefix": "tile_exists",
        "body": [
	    	"tile_exists(${0:id})"
		],
		"description": "[Function]tile_exists(id) \nReturns whether a tile with the given id exists."
    },
	"tile_get_x": {
        "prefix": "tile_get_x",
        "body": [
	    	"tile_get_x(${0:id})"
		],
		"description": "[Function]tile_get_x(id) \nReturns the x-position of the tile with the given id."
    },
	"tile_get_y": {
        "prefix": "tile_get_y",
        "body": [
	    	"tile_get_y(${0:id})"
		],
		"description": "[Function]tile_get_y(id) \nReturns the y-position of the tile with the given id."
    },
	"tile_get_left": {
        "prefix": "tile_get_left",
        "body": [
	    	"tile_get_left(${0:id})"
		],
		"description": "[Function]tile_get_left(id) \nReturns the left value of the tile with the given id."
    },
	"tile_get_top": {
        "prefix": "tile_get_top",
        "body": [
	    	"tile_get_top(${0:id})"
		],
		"description": "[Function]tile_get_top(id) \nReturns the top value of the tile with the given id."
    },
	"tile_get_width": {
        "prefix": "tile_get_width",
        "body": [
	    	"tile_get_width(${0:id})"
		],
		"description": "[Function]tile_get_width(id) \nReturns the width of the tile with the given id."
    },
	"tile_get_height": {
        "prefix": "tile_get_height",
        "body": [
	    	"tile_get_height(${0:id})"
		],
		"description": "[Function]tile_get_height(id) \nReturns the height of the tile with the given id."
    },
	"tile_get_depth": {
        "prefix": "tile_get_depth",
        "body": [
	    	"tile_get_depth(${0:id})"
		],
		"description": "[Function]tile_get_depth(id) \nReturns the depth of the tile with the given id."
    },
	"tile_get_visible": {
        "prefix": "tile_get_visible",
        "body": [
	    	"tile_get_visible(${0:id})"
		],
		"description": "[Function]tile_get_visible(id) \nReturns whether the tile with the given id is visible."
    },
	"tile_get_xscale": {
        "prefix": "tile_get_xscale",
        "body": [
	    	"tile_get_xscale(${0:id})"
		],
		"description": "[Function]tile_get_xscale(id) \nReturns the xscale of the tile with the given id."
    },
	"tile_get_yscale": {
        "prefix": "tile_get_yscale",
        "body": [
	    	"tile_get_yscale(${0:id})"
		],
		"description": "[Function]tile_get_yscale(id) \nReturns the yscale of the tile with the given id."
    },
	"tile_get_background": {
        "prefix": "tile_get_background",
        "body": [
	    	"tile_get_background(${0:id})"
		],
		"description": "[Function]tile_get_background(id) \nReturns the background of the tile with the given id."
    },
	"tile_get_blend": {
        "prefix": "tile_get_blend",
        "body": [
	    	"tile_get_blend(${0:id})"
		],
		"description": "[Function]tile_get_blend(id) \nReturns the blending color of the tile with the given id."
    },
	"tile_get_alpha": {
        "prefix": "tile_get_alpha",
        "body": [
	    	"tile_get_alpha(${0:id})"
		],
		"description": "[Function]tile_get_alpha(id) \nReturns the alpha value of the tile with the given id."
    },
	"tile_set_position": {
        "prefix": "tile_set_position",
        "body": [
	    	"tile_set_position(${1:id},${2:x},${0:y})"
		],
		"description": "[Function]tile_set_position(id,x,y) \nSets the position of the tile with the given id."
    },
	"tile_set_region": {
        "prefix": "tile_set_region",
        "body": [
	    	"tile_set_region(${1:id},${2:left},${3:right},${4:width},${0:height})"
		],
		"description": "[Function]tile_set_region(id,left,right,width,height) \nSets the region of the tile with the given id in its background."
    },
	"tile_set_background": {
        "prefix": "tile_set_background",
        "body": [
	    	"tile_set_background(${1:id},${0:background})"
		],
		"description": "[Function]tile_set_background((id,background) \nSets the background for the tile with the given id."
    },
	"tile_set_visible": {
        "prefix": "tile_set_visible",
        "body": [
	    	"tile_set_visible(${${1:id},${0:visible})"
		],
		"description": "[Function]tile_set_visible(id,visible) \nSets whether the tile with the given id is visible."
    },
	"tile_set_depth": {
        "prefix": "tile_set_depth",
        "body": [
	    	"tile_set_depth(${${1:id},${0:depth})"
		],
		"description": "[Function]tile_set_depth(id,depth) \nSets the depth of the tile with the given id."
    },
	"tile_set_scale": {
        "prefix": "tile_set_scale",
        "body": [
	    	"tile_set_scale(${${1:id},${2:xscale},${0:yscale})"
		],
		"description": "[Function]tile_set_scale(id,xscale,yscale) \nSets the scaling of the tile with the given id."
    },
	"tile_set_blend": {
        "prefix": "tile_set_blend",
        "body": [
	    	"tile_set_blend(${${1:id},${0:blend})"
		],
		"description": "[Function]tile_set_blend(id,color) \nSets the blending color of the tile with the given id."
    },
	"tile_set_alpha": {
        "prefix": "tile_set_alpha",
        "body": [
	    	"tile_set_alpha(${${1:id},${0:alpha})"
		],
		"description": "[Function]tile_set_alpha(id,alpha) \nSets the alpha value of the tile with the given id."
    }
	//Draw Event Functions End
	//Draw Event End
}